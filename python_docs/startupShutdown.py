# -*- coding: utf-8 -*-
documentation = [
_(u"""# NVDA Starting and Exiting outline"""),
"",_(u"""## Ways to start NVDA:"""),
"",_(u"""1. For an installed copy:"""),
_(u"""    1. Ctrl+Alt+N (Desktop shortcut)"""),
_(u"""        - test: `startupShutdownNVDA.Starts from desktop shortcut`"""),
_(u"""    1. Automatically via Ease of Access on the Windows sign-in screen (at boot or signing out of a previous session)"""),
_(u"""    1. Automatically via Ease of Access on User Account Control (UAC) screens"""),
_(u"""    1. Automatically by Ease of Access after signing in to Windows"""),
_(u"""1. For an installed copy, portable copy, installer:"""),
_(u"""    1. An exiting instance of NVDA starting a new process (see shutting down procedures)"""),
_(u"""    1. By running the exe. """),
_(u"""        - This can be triggered by a user or external process such as an existing NVDA instance"""),
_(u"""        - test: `startupShutdownNVDA.Starts`"""),
_(u"""1. For source: eg runnvda.bat"""),
"",_(u"""## NVDA can be shutdown by:"""),
"",_(u"""1. UI within NVDA, with and without an ExitDialog prompt (uses `triggerNVDAExit`):"""),
_(u"""    1. NVDA+q"""),
_(u"""        - test: `startupShutdownNVDA.Quits from keyboard, Restarts`"""),
_(u"""    1. An input gesture to restart"""),
_(u"""    1. After changing some settings (eg installed add-ons or UI language), user prompted on dialog exit."""),
_(u"""    1. Via the NVDA menu -> Exit"""),
_(u"""        - test: `startupShutdownNVDA.Quits from menu`"""),
_(u"""1. A process sending `WM_QUIT`, eg a new NVDA process starting"""),
_(u"""1. A handled crash (directly causes a new process to start, terminates unsafely)"""),
_(u"""    - test: `startupShutdownNVDA.Restarts on crash, Restarts on braille crash`"""),
_(u"""1. An unhandled crash (terminates unsafely)"""),
_(u"""    - requires manual testing/confirmation"""),
_(u"""1. An external command which kills the process (terminates unsafely) """),
_(u"""1. Windows shutting down (terminates unsafely) (uses `wx.EVT_END_SESSION`)"""),
"",_(u"""## Manual testing"""),
_(u"""Instructions for testing startup / shutdown."""),
"",_(u"""### Start from shortcut"""),
_(u"""Prerequisites:"""),
_(u""" - NVDA installed"""),
_(u""" - Shortcut enabled during installation"""),
"",_(u"""Steps:"""),
_(u""" 1. Press (or emulate) Ctrl+Alt+N, observe NVDA starts up"""),
"",_(u"""Variation:"""),
_(u"""- At step 1. A version of NVDA is already running. Observe running version exits before installed version starts up."""),
"",_(u"""### Windows Sign-in screen, automatic start"""),
_(u"""Prerequisites:"""),
_(u""" - NVDA installed"""),
_(u""" - Enable \"Use NVDA during sign-in\""""),
"",_(u"""Steps:"""),
_(u""" 1. Sign out (not lock) Windows"""),
_(u""" 1. Observe NVDA announces the Windows sign-in screen"""),
"",_(u"""### UAC, automatic start"""),
_(u"""Prerequisites:"""),
_(u""" - NVDA installed"""),
_(u""" - An active Windows session (i.e. not signed out, locked)"""),
_(u""" - The NVDA installed copy is running"""),
"",_(u"""Steps:"""),
_(u""" 1. Open the Start menu"""),
_(u""" 1. Type notepad"""),
_(u""" 1. Open context menu for notepad and choose `Run as Administrator`."""),
_(u""" 1. When the UAC dialog appears, verify that NVDA launches on this secure desktop and reports the dialog."""),
"",_(u"""### Windows Successful sign-in, automatic start"""),
_(u"""Prerequisites:"""),
_(u""" - NVDA installed"""),
_(u""" - Enable \"Start NVDA after I sign in\""""),
"",_(u"""Steps:"""),
_(u""" 1. Start Windows"""),
_(u""" 1. Sign in"""),
_(u""" 1. Observe NVDA starts"""),
"",_(u"""### Running the *.exe"""),
"",_(u"""Steps:"""),
_(u""" 1. Press `win+r`"""),
_(u""" 1. Enter <path to nvda.exe>"""),
_(u""" 1. Press enter"""),
_(u""" 1. Observe NVDA starts"""),
"",_(u"""Variation:"""),
_(u"""- using an installer (launcher)"""),
_(u"""   -  eg: `C:\\Users\\username\\Downloads\\nvda_2021.1.exe`"""),
_(u"""- using an installed copy"""),
_(u"""   - just type `nvda` in place of the .exe"""),
_(u"""- using a portable copy"""),
_(u"""   - find and use the path to `nvda.exe`, located within the portable copy directory"""),
_(u"""   - the installer allows you to create an installed copy and a portable copy"""),
"",_(u"""### Running from source (runnvda.bat)"""),
_(u"""Prerequisites"""),
_(u"""- clone project and build NVDA (see [project readme](https://github.com/nvaccess/nvda/blob/master/readme.md#getting-the-source-code))."""),
"",_(u"""Steps:"""),
_(u""" 1. Run `runnvda.bat` from cmd"""),
_(u""" 1. Observe NVDA starts"""),
"",_(u"""### An input gesture to restart"""),
"",_(u"""Prerequisite:"""),
_(u"""- Input gesture for \"Restarts NVDA!\" is assigned"""),
"",_(u"""Steps:"""),
_(u""" 1. Press (or emulate) the input gesture"""),
_(u""" 1. Observe that NVDA exits"""),
_(u""" 1. Observe that a new instance is started"""),
"",_(u"""## Technical notes"""),
"",_(u"""These notes are aimed at developers, wishing to understand technical aspects of the NVDA start and exit."""),
"",_(u"""1. No more than one NVDA process instance should be running at the same time. Interactions with itself could cause severe issues, some (non-exhaustive list) examples of sub-systems where this would be a problem:"""),
_(u"""   - NVDA config files"""),
_(u"""   - Global (OS level) keyboard hook"""),
_(u"""   - Changed / incompatible in-process code"""),
_(u"""2. As such, we want to be able to detect running instances, cause them to exit, and confirm they have exited."""),
"",_(u"""### Exit hooks/triggers"""),
"",_(u"""There are 3 ways that NVDA receives a request to exit:"""),
"",_(u"""- From internally calling [triggerNVDAExit](#When-exiting-from-triggerNVDAExit)"""),
_(u"""- Receiving [WM_QUIT](#When-exiting-from-WM_QUIT) Windows message"""),
_(u"""- Receiving [wx.EVT_END_SESSION](#When-exiting-from-wxEVT_END_SESSION) due to Windows session ending"""),
"",_(u"""### When exiting from `triggerNVDAExit`"""),
_(u"""* Called from within NVDA."""),
_(u"""* A function in the core module"""),
_(u"""* Only executes the code once, uses a lock and flag to ensure this"""),
_(u"""* Uses a queue on the main thread to queue a safe shutdown"""),
_(u"""* Once the queued shutdown starts:"""),
_(u"""    1. the updateCheck is terminated"""),
_(u"""    1. watchdog is terminated"""),
_(u"""    1. globalPlugins and the brailleViewer are terminated, so we can close all windows safely"""),
_(u"""    1. All wx windows are closed"""),
_(u"""    1. Now that windows are closed, a new NVDA instance is started if requested"""),
"",_(u"""### When exiting from `WM_QUIT`"""),
_(u"""* [A Windows Message](https://docs.microsoft.com/en-us/windows/win32/winmsg/wm-quit) received from an external process, such as another NVDA process."""),
_(u"""* NVDA accepts `WM_QUIT` messages from other processes and creates a [named window](https://docs.microsoft.com/en-us/windows/win32/learnwin32/creating-a-window#creating-the-window) that can be discovered."""),
_(u"""* `WM_QUIT` is handled by `wx`, which force closes all wx windows (other UI features like the systray icon are not windows, and remain) and then exits the main loop."""),
_(u"""`triggerNVDAExit` is a more expansive check than how wxWidgets handles `WM_QUIT`"""),
_(u"""* We subsequently run `triggerNVDAExit` to ensure that clean up code isn't missed, and pump the queue to execute it."""),
_(u"""* Using a custom message has been considered:"""),
_(u"""  - Would allow custom handling (eg just `triggerNVDAExit`)"""),
_(u"""  - Unfortunately, older NVDA versions will only be aware of `WM_QUIT`, so we'd need to send `WM_QUIT` to these versions."""),
_(u"""  - Sending the custom message, waiting for a timeout, then sending `WM_QUIT` adds a significant wait time"""),
_(u"""  - Identifying the running version (to selectively send the message) requires maintaining 2 message windows in NVDA (one for legacy behaviour) and adds complexity"""),
"",_(u"""### When exiting from `wx.EVT_END_SESSION`"""),
_(u"""* This is a [wxCloseEvent](https://docs.wxwidgets.org/3.0/classwx_close_event.html) triggered by a Windows session ending."""),
_(u"""* On `wx.EVT_END_SESSION`, we save the config and play the exit sound."""),
_(u"""* Other actions are not performed as we have limited time to perform an action for this event."""),
_(u"""    * NVDA is expected to run as long as possible during the sign out process."""),
_(u"""    * This is achieved through the [Windows API](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessshutdownparameters), by setting the shutdown priority to the lowest reserved value for non-system applications, `0x100`."""),
_(u"""    * [SHUTDOWN_NORETRY](https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-setprocessshutdownparameters) ensures that NVDA does not show up in the blocked shutdown list dialog."""),
_(u"""    If it were, the user would have no way of reading the dialog and fixing the issue."""),
"",_(u"""### Replacing an existing NVDA instance"""),
"",_(u"""With the requirement to only allow a single instance of NVDA, a new NVDA process must be able to replace an existing NVDA process."""),
_(u"""NVDA will exit correctly in response to a [`WM_QUIT`](#When-exiting-from-WM_QUIT) Windows message, but the process must first be detected / identified in order to send the message."""),
_(u"""For new NVDA process to detect an existing NVDA process, a named [message window](https://docs.microsoft.com/en-us/windows/win32/learnwin32/creating-a-window#creating-the-window) is used."""),
_(u"""A new NVDA process searches for an existing NVDA window, and if it is detected, sends `WM_QUIT`."""),
_(u"""The message window is created late during the start up, and destroyed early in exit and is not perfectly indicative of whether or not an NVDA process is running."""),
_(u"""As such, we have a [MutEx](#MutEx) that ensures a newly started process blocks until any previous NVDA has finished exiting."""),
"",_(u"""### MutEx"""),
"",_(u"""To confirm that another NVDA process is not running,"""),
_(u"""a [MutEx](https://docs.microsoft.com/en-us/windows/win32/sync/mutex-objects) is owned by the NVDA process."""),
_(u"""NVDA will be blocked from starting until it can acquire the MutEx."""),
_(u"""If it can not acquire the MutEx within a timeout, startup is aborted."""),
_(u"""This is acquired as soon as possible and released by NVDA as late as possible."""),
_(u"""When the NVDA process exits abnormally, Windows will release the MutEx."""),
"",_(u"""### Unsafe restart"""),
"",_(u"""Called in the event of a crash. Exiting NVDA safely in the event of a crash could be improved, but it is limited as we cannot rely on other threads running or the state of NVDA."""),
]