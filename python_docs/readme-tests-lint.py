# -*- coding: utf-8 -*-
documentation = [
"",_(u"""## Lint overview"""),
_(u"""Our linting process with Flake8 consists of two main steps:"""),
_(u"""- Generating a diff"""),
_(u"""- Running Flake8 on the diff"""),
"",_(u"""## Common problems"""),
_(u"""There are several common situations for which the Flake8 errors don't clearly indicate an error free solution."""),
"",_(u"""### Continuation lines"""),
"",_(u"""According to the"""),
_(u"""[Pep8 indentation guide](https://www.python.org/dev/peps/pep-0008/#indentation),"""),
_(u"""continuation lines (Python's implicit line joining inside parentheses) are expected"""),
_(u"""to follow one of two main styles:"""),
"",_(u"""- Vertical alignment"""),
_(u"""  - The first parameter is on the same line as the opening parenthesis"""),
_(u"""  - For each subsequent line, the first character should be aligned with the"""),
_(u"""    first character of the first parameter."""),
_(u"""- Hanging indent"""),
_(u"""  - There is no parameter on the same line as the opening parenthesis."""),
_(u"""  - The first parameter is indented by a standard amount on the following line."""),
_(u"""  - All subsequent parameters have the same indent."""),
"",_(u"""What this means for us:"""),
_(u"""- Vertical alignment"""),
_(u"""  - Requires spaces to meet the length of arbitrary function/variable names"""),
_(u"""  - Requires counting characters to determine the number of spaces before arguments"""),
_(u"""  - Alignment must be changed if the function/variable name changes."""),
_(u"""- Hanging indent"""),
_(u"""  - Fixed indentation"""),
_(u"""  - Takes up more vertical space"""),
"",_(u"""Previously Flake8 checkers didn't know which style we intend, they allow for both."""),
_(u"""We now configure Flake8-tabs with the `continuation-style=hanging` option to enforce hanging indent"""),
_(u"""and it will complain about code which seems to be using vertical alignment style (warning ET113)."""),
"",_(u"""#### Preferred formatting for continuation lines"""),
"",_(u"""- Use hanging indent style."""),
_(u"""  - Line break after the opening parenthesis, putting the first parameter on a new line."""),
_(u"""- For function definitions, double indent the params to avoid ET121"""),
"",_(u"""```python"""),
_(u"""# method with many parameters"""),
_(u"""# use \"hanging indent style\" - start params on new line to avoid ET113 and ET128"""),
_(u"""def foo("""),
_(u"""		arg1,  # double indent to avoid ET121"""),
_(u"""		arg2"""),
_(u"""):  # put the closing paren on a new line, reduce the diff when changing parameters."""),
_(u"""	# long expression"""),
_(u"""	# use \"hanging indent style\" - start params on new line to avoid ET113 and ET128"""),
_(u"""	if("""),
_(u"""		arg1 is not None  # not a function definition, no double indent required"""),
_(u"""		and arg2 is None"""),
_(u"""	):  # put the closing paren on a new line, reduce the diff when changing conditions"""),
_(u"""		return None"""),
"",_(u"""	# use \"hanging indent style\" - start params on new line to avoid EET113 and T128"""),
_(u"""	values = ["""),
_(u"""		\"value1\", # not a function definition, no double indent required"""),
_(u"""		\"value2\","""),
_(u"""	]  # put the closing bracket on a new line, reduce the diff when adding items."""),
_(u"""	return values"""),
"",_(u"""```"""),
"",_(u"""Note: An inline comment on an opening parenthesis/bracket/brace does not cause an error"""),
_(u"""EG:"""),
_(u"""```python"""),
_(u"""def foo(  # a comment here is fine"""),
_(u"""		arg1"""),
_(u"""):"""),
_(u"""	items = [  # a comment here is fine"""),
_(u"""		\"item1\","""),
_(u"""		\"item2\","""),
_(u"""	]"""),
_(u"""	print(items)"""),
_(u"""```"""),
"",_(u"""#### ET113 (flake8-tabs)"""),
"",_(u"""Error messages:"""),
_(u""" - *Option continuation-style=hanging does not allow use of alignment as indentation*"""),
"",_(u"""A parameter is on the same line as the opening paran/bracket/brace."""),
_(u"""Move this parameter to a new line to resolve this error."""),
_(u"""When triggered, it is likely that ET128 will be triggered for subsequent lines with parameters."""),
"",_(u"""#### ET128 (flake8-tabs)"""),
"",_(u"""Error messages:"""),
_(u"""- *unexpected number of tabs at start of definition line*"""),
_(u"""- *unexpected number of tabs and spaces at start of expression line*s"""),
"",_(u"""Its likely that this is triggered because the linter is expecting \"vertical alignment\""""),
_(u"""style for the set of continuation lines, rather than \"hanging indent\" style."""),
_(u"""To confirm look for ET113 triggered on the same line."""),
_(u"""To change this, ensure that there is a newline after the opening paren/bracket/brace."""),
"",_(u"""An example cause:"""),
_(u"""```python"""),
_(u"""def foo(arg1, # Triggers ET113"""),
_(u"""	arg2,  # Triggers ET128: arg2 not vertically aligned with start of first parameter."""),
_(u"""):"""),
_(u"""	return None"""),
_(u"""```"""),
"",_(u"""#### ET121 (flake8-tabs)"""),
"",_(u"""Error messages:"""),
_(u"""- *unexpected number of tabs at start of definition line (expected 2, got 1)*"""),
"",_(u"""Example cause:"""),
_(u"""```python"""),
_(u"""def foo("""),
_(u"""	arg1,  # one level of indentation, matches the function body"""),
_(u"""	arg2,"""),
_(u"""):"""),
_(u"""	return None"""),
_(u"""```"""),
"",_(u"""In function definitions we require double indentation of parameters to differentiate from"""),
_(u"""the body of the function."""),
"",_(u"""## Scons lint"""),
_(u"""Executed with SCons."""),
_(u"""```"""),
_(u"""scons lint base=origin/master"""),
_(u"""```"""),
_(u"""- Remember to set the the `base` branch (the target you would use for a PR)."""),
_(u"""- This SCons target will generate a diff file (`tests\\lint\\current.diff`) and run Flake8 on it."""),
_(u"""- The output from Flake8 will be displayed with other SCons output, and will also be written to file (`tests\\lint\\current.lint`)"""),
_(u"""- This uses the NVDA flake8 configuration file (`tests\\lint\\flake8.ini`)"""),
"",_(u"""## Lint integration"""),
"",_(u"""For faster lint results, or greater integration with your tools you may want to execute this on the command line or via your IDE."""),
"",_(u"""### Generate a diff"""),
"",_(u"""You can use the `tests/lint/genDiff.py` script to generate the diff, or create the diff on the commandline:"""),
_(u"""- Get the merge base"""),
_(u"""  - `git merge-base <baseBranch> HEAD`"""),
_(u"""  - `merge-base` is used to limit changes to only those that are new on HEAD."""),
_(u"""- Create a diff with your working tree"""),
_(u"""  - `git diff -U0 <mergeBaseSha>`"""),
_(u"""  - `-U0`: Only include changed lines (no context) in the diff."""),
_(u"""    - Otherwise developers may end up getting warnings for code adjacent to code they touched."""),
_(u"""    - This could result in very large change sets in order to get a clean build."""),
_(u"""  - Note: We don't use triple dot syntax (`...`) because it will not report changes in your working tree."""),
"",_(u"""### Pipe to Flake8"""),
"",_(u"""Flake8 can accept a unified diff, however only via stdin."""),
"",_(u"""In cmd:"""),
_(u"""```"""),
_(u"""type current.diff | py -3 -m flake8 --diff --config=\"tests/lint/flake8.ini\""""),
_(u"""```"""),
"",_(u"""In bash:"""),
_(u"""```"""),
_(u"""cat current.diff | py -3 -m flake8 --diff --config=\"tests/lint/flake8.ini\""""),
_(u"""```"""),
]