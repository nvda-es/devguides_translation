# -*- coding: utf-8 -*-
documentation = [
_(u"""## NVDA system tests"""),
"",_(u"""### Dependencies"""),
"",_(u"""This build system uses the Robot test framework to execute the system tests."""),
_(u"""Dependencies such as Robot are automatically installed for you when NVDA's build system Python virtual environment is set up, when running any of the high-level commands such as runsystemtests.bat, thus a developer should usually not have to worry about dependencies."""),
_(u""" """),
_(u"""### Running the tests"""),
"",_(u"""You can run the tests with `runsystemtests.bat`."""),
_(u"""Running this script with no arguments will run all system tests found in tests\\system\\robot, against the current source copy of NVDA."""),
_(u"""Any extra arguments provided to this script are forwarded on to Robot."""),
"",_(u"""To run a single test, add the `--test` argument (wildcards accepted)."""),
"",_(u"""```"""),
_(u"""runsystemtests --test \"starts\" ..."""),
_(u"""```"""),
"",_(u"""To run all tests with a particular tag use `-i`:"""),
_(u"""```"""),
_(u"""runsystemtests -i \"chrome\" ..."""),
_(u"""```"""),
"",_(u"""Other options exit for specifying tests to run (e.g. by suite, tag, etc)."""),
_(u"""Consult `runsystemtests --help`"""),
"",_(u"""### Getting the results"""),
"",_(u"""The process is displayed in the command prompt, for more information consider the [Robot report and NVDA logs](#logs)"""),
_(u"""`report.html`, `log.html`, and `output.xml` files."""),
_(u"""The logs from NVDA are saved to the `nvdaTestRunLogs` folder"""),
"",_(u"""### Excluding tests"""),
"",_(u"""Tests can be excluded by adding the tag `excluded_from_build` EG:"""),
"",_(u"""```robot"""),
_(u"""checkbox labelled by inner element"""),
_(u"""	[Documentation]	A checkbox labelled by an inner element should not read the label element twice."""),
_(u"""	# Excluded due to intermittent failure."""),
_(u"""	[Tags]	excluded_from_build"""),
_(u"""	checkbox_labelled_by_inner_element"""),
_(u"""```"""),
"",_(u"""When the tests are run, the option `--exclude excluded_from_build` is given to Robot internally."""),
_(u"""See [description of test args](#test-args)"""),
"",_(u"""### Test args"""),
_(u"""Common arguments are kept in the `tests\\system\\robotArgs.robot` file."""),
"",_(u"""The `whichNVDA` argument allows the tests to be run against an installed copy"""),
_(u"""of NVDA (first ensure it is compatible with the tests). Note valid values are:"""),
_(u"""* \"installed\" - when running against the installed version of NVDA, you are likely to get errors in the log unless"""),
_(u"""the tests are run from an administrator command prompt."""),
_(u"""* \"source\""""),
"",_(u"""The `installDir` argument performs a smoke test on the installation process given a path to the installer exe. For example `--variable installDir:\".\\path\\to\\nvda_installer.exe\"`."""),
_(u"""This should be used with `--variable whichNVDA:installed --include installer`."""),
"",_(u"""### Overview"""),
"",_(u"""Robot Framework loads and parses the test files and their libraries."""),
_(u"""In our case, generally in the 'setup', NVDA is started as a new process."""),
_(u"""It uses a sand box profile, and communication with the test code occurs via a global plugin and synth driver."""),
_(u""" The system test should, as much as possible, interact like a user would."""),
_(u""" For example, wait for the speech to confirm that an expected dialog is open before taking the next action to interact."""),
"",_(u"""Test declarations go in robot files, these should just specify the name and metadata for the test."""),
_(u"""Several issues with the robot language mean it's easier to write the test logic in an accompanying python file."""),
"",_(u"""The `libraries` directory contains files providing \"robot keyword\" libraries."""),
_(u"""Most notably, the NvdaLib library contains methods for starting NVDA and speech can be retrieved via the `NVDASpyLib` returned by the module function `getSpyLib()` which is a remote library."""),
_(u"""The `nvdaSettingsFiles` directory contains various NVDA config files that are used to construct the NVDA profile in the `%TEMP%` directory."""),
"",_(u"""### How the test setup works"""),
"",_(u"""This section will not go into the details of robot framework, or robot remote server,"""),
_(u"""these have their own documentation."""),
_(u"""An overview of the files:"""),
_(u"""- The `SystemTestSpy` package is responsible for setting up the global plugin and synth driver."""),
_(u"""- `libraries/NvdaLib` abstracts the setup and running / exiting of NVDA."""),
_(u"""- `speechSpyGlobalPlugin` module creates a RobotFramework Remote Server which gets connected to via the `NvdaLib` library. To make running remote functions easier, methods are created on the remote spy instance which wrap calls to `run_keyword`."""),
"",_(u"""An NVDA sandbox profile is setup in the `%TEMP%` directory like so:"""),
_(u"""- `nvdaProfile/`"""),
_(u"""  - `nvda.ini` copied from `nvdaSettingsFiles`"""),
_(u"""  - `scratchpad/`"""),
_(u"""    - `globalPlugins/speechSpyGlobalPlugin/`"""),
_(u"""      - `__init__.py` copied from `speechSpyGlobalPlugin.py`"""),
_(u"""      - `blockUntilConditionMet.py`"""),
_(u"""      - `libs/`"""),
_(u"""        - `xmlrpc` from Python install"""),
_(u"""        - `robotRemoteServer.py` from Python install"""),
_(u"""        - Any other dependencies required."""),
_(u"""    - `synthDrivers/`"""),
_(u"""      - `speechSpySynthDriver.py`"""),
"",_(u"""For each test, the NVDA configuration file is overwritten."""),
_(u"""NVDA is started with the `-c` option to specify this profile directory to be used for config."""),
"",_(u"""### Logs"""),
_(u"""Both Robot Framework and NVDA logs are captured in the `testOutput` directory in the repo root."""),
_(u"""NVDA logs (NVDA log, stdOut, and stdErr for each test) are under the `nvdaTestRunLogs` directory. """),
_(u"""The log files are named by suite and test name."""),
"",_(u"""### Comparing changes to NVDA Settings"""),
_(u"""`.\\runsettingsdiff.bat` is a tool used to compare the settings dialog by reading text and generating screenshots for comparison.  The default behaviour is to run using the source code and output to `.\\tests\\system\\settingsCache\\source`. """),
"","",_(u"""#### Usage"""),
_(u"""To check for unreleased changes to the settings dialogs, one can use this tool to compare against two copies of NVDA. """),
"",_(u"""The following arguments should be used with the script."""),
"",_(u"""Default arguments used are stored  in `.\\tests\\system\\guiDiff.robot`"""),
"",_(u"""- `--variable whichNVDA:[installed|source]` to decide where to run NVDA from"""),
_(u"""- `--variable cacheFolder:[filePath]` screenshots and text files of each settings panel are generated in `$cacheFolder\\$currentVersion`"""),
_(u"""- `--variable currentVersion:[nvdaVersion]` where `[nvdaVersion]` is used to name the generated screenshot and cache folder"""),
_(u"""- `--variable compareVersion:[nvdaVersion]` using a `$nvdaVersion` that this script has already been run against, run the system tests and fail if there are differences between the read text. This generates a multiline diff. """),
"",_(u"""#### Example usage to compare settings between NVDA 2020.4 and the current source"""),
"",_(u"""1. Install NVDA 2020.4"""),
_(u"""1. Run `.\\runsettingsdiff.bat -v whichNVDA:installed -v currentVersion:2020.4`"""),
_(u"""1. Run `.\\runsettingsdiff.bat -v whichNVDA:source -v currentVersion:source -v compareVersion:2020.4`"""),
_(u"""   - The test will fail and display a diff of any read changes"""),
_(u"""1. Use a diff tool to compare folders:"""),
_(u"""   - `diff ./tests/system/settingsCache/2020.4 ./tests/system/settingsCache/source`"""),
_(u"""   - [ImageMagick Compare](https://imagemagick.org/script/compare.php) can be used to compare images"""),
]