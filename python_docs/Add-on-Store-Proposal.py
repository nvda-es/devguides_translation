# -*- coding: utf-8 -*-
documentation = [
_(u"""# Add on Store"""),
"",_(u"""The intention the add-on store is to improve the end-to-end process and supporting infrastructure for hosting Addons."""),
_(u"""This is the current plan from NV Access, work is ongoing."""),
_(u"""Inspiration has been taken from [Windows Package Manager Community repo](https://github.com/microsoft/winget-pkgs)"""),
_(u"""A highly automated process would be ideal, and we can keep the ideas in mind to work in that direction."""),
"",_(u"""Goal: enable an \"NVDA addon store\" accessible from within NVDA itself."""),
_(u"""In this proposal the word \"store\" is used to refer to the system used to store metadata about add-on releases and APIs to access this data."""),
_(u"""Aims:"""),
_(u"""- Enable any necessary, API, process, or infrastructure to support users to browse, search, install and update Addons for NVDA."""),
_(u"""- A secure and robust provision of addon-metadata."""),
_(u"""- No intention of supporting paid addons at this stage."""),
_(u"""- Transparent process, to make it simple (for developers) to understand the current state of the"""),
_(u"""  Add-on Store, or the state of a submission of a new / updated addon."""),
_(u"""- Faster release process for add-ons, by-passing human review."""),
_(u"""- Non-subjective review process for add-ons."""),
"",_(u"""### About security """),
_(u"""Ensuring that an add-on is safe to run is a difficult challenge that isn't addressed here."""),
_(u"""However, the metadata for a new submission (add-on release) can be confirmed to match its manifest"""),
_(u"""description."""),
_(u"""Additionally, add-on file integrity can be enforced via a Sha256 checksum."""),
_(u"""The checksum allows NVDA to ensure that addon releases are immutable."""),
"",_(u"""### Human review process / code audit"""),
_(u"""- NV Access doesn't require a manual review of the add-on (code or user experience) itself"""),
_(u"""  before the add-on submission."""),
_(u"""- Source code reviews or audits could exist outside the store."""),
_(u"""  The Sha256 checksum of the `nvda-addon` prevents undetected changes."""),
_(u"""- User reviews/rating of add-ons are currently out of scope."""),
"",_(u"""### Non-exclusivity"""),
_(u"""This proposal does not intend to restrict add-on authors from developing, publishing, and distributing an add-on outside this store."""),
_(u"""NVDA will still allow local installation from a `*.nvda-addon` file."""),
"",_(u"""## Too Long; Didn't Read for Addon authors"""),
_(u"""With this proposal if an addon author wishes to submit their addon to be visible in this addon store they will need to:"""),
_(u"""- Copy and file out the metadata template"""),
_(u"""- Create a pull request to merge the branch to master of this repository."""),
"",_(u"""## Too Long; Didn't Read for Addon reviewers"""),
_(u"""Reviews of metadata will be automated."""),
_(u"""You are welcome to review code / UX of addons and provide that feedback directly to addon authors."""),
"",_(u"""## Considerations"""),
"",_(u"""- Submissions and automated checks should be easy to find and get the status of."""),
_(u"""- Make it possible to automate many steps in the process."""),
_(u"""- The `.nvda-addon` file accessible via the download URL must continue to match the SHA."""),
_(u"""  NVDA will verify the file has not changed by comparing the checksum (SHA256)."""),
_(u"""  This gives users certainty when installing a \"known version\" of an addon."""),
_(u"""  To update or make changes to an add-on, a new unique URL should be used, and a new add-on"""),
_(u"""  submission made to the Add-on Store."""),
_(u"""- Allow addon authors to easily revoke a version if it is buggy / no longer supported."""),
_(u"""  Removed releases are no longer presented in the store, halting new installations."""),
_(u"""- Enable support in the store for multiple versions of an Addon, based on NVDA API version."""),
_(u"""  - EG addon version 1.2.5 for NVDA 2019.3 and addon version 1.3.2 for NVDA 2020.1"""),
_(u"""- Enable support in the store for 'beta' Addons, for instance:"""),
_(u"""  - Addons being developed against alpha / beta NVDA."""),
_(u"""  - Addons that want early feedback from end users."""),
_(u"""  - End users can choose \"show me beta addons\""""),
"",_(u"""## Overview"""),
"",_(u"""- Use GitHub pull requests for store submissions."""),
_(u"""- Use GitHub for storage of meta-data for addons available from the store."""),
_(u"""- Use GitHub actions (or other integrations) to automate construction of the data store, and as many of the metadata checks as possible."""),
_(u"""  This will all be open source and extensible by the community."""),
"",_(u"""### Why GitHub Pull Requests?"""),
_(u"""- GitHub is where much of the NVDA development ecosystem is already based."""),
_(u"""- Handles all the of the CRUD ([create, read, update, delete](https://en.wikipedia.org/wiki/CRUD))"""),
_(u"""  for users, authentication is handled, and we can determine how a user relates to an addon"""),
_(u"""  repository and what their permissions are for that repository."""),
_(u"""- GitHub PR's keep a record of the outcomes of automated checks."""),
_(u"""  They also facilitate discussion should there be any confusion or disagreement with the outcome."""),
_(u"""- GitHub PR's provided an atomic view of a store submission."""),
_(u"""- The status (open / merged / closed) of the PR is clear."""),
"",_(u"""## Infrastructure"""),
"",_(u"""- `addon-store-submission` GitHub Repository"""),
_(u"""  - Authors submit new add-on versions."""),
_(u"""  - The \"source of truth\" for add-on releases."""),
_(u"""  - This repository acts as a back-end database, it is open and easy to inspect."""),
_(u"""  - Since our needs are simple, preconfigured \"views\" of the data will suffice."""),
_(u"""- `nvaccess/validateNvdaAddonMetadata` GitHub Repository"""),
_(u"""  - Metadata / submission schema."""),
_(u"""  - Tools used to validate the submission."""),
_(u"""- NV Access server - To provide the endpoint for \"available Addons\" meta-data"""),
_(u"""  - While this is technically not necessary, it provides a good separation from implementation."""),
_(u"""    If we wished to change our storage mechanism, we would not be breaking old versions of NVDA."""),
"",_(u"""## `addon-store-submission` GitHub Repository"""),
"",_(u"""Essentially this repository holds metadata about all the accepted versions of Addons which are included in the store."""),
_(u"""Metadata about old versions of an addon remains until it is explicitly removed or becomes invalid."""),
_(u"""This allows delivery to older versions of NVDA."""),
_(u"""If a newer add-on release is removed (in response to a critical bug being found) NVDA can fall back"""),
_(u"""on a prior add-on release."""),
_(u"""Addons versions are submitted by submitting a pull request, adding a file for that version of the addon."""),
"",_(u"""### Layout"""),
"",_(u"""Root directory of repository:"""),
_(u""" - `readme.md` - A guide for submission"""),
_(u""" - `addons/addon1/majorVersion.minorVersion.patch.json`"""),
_(u""" - `addons/addon2/majorVersion.minorVersion.patch.json`"""),
_(u""" - `addons/addon3/majorVersion.minorVersion.patch.json`"""),
"",_(u"""Note: `addonName` is the add-on ID, and must be unique and match the add-on ID from the addon manifest."""),
"",_(u"""Example for the NV Access addon, 'NVDA - OCR':"""),
_(u"""- Filename: `addons/nvda-ocr/1.6.0.json`"""),
_(u"""- add-on ID `nvda-ocr`"""),
"",_(u"""### Metadata format"""),
_(u"""For a full description of the schema see the"""),
_(u"""[_validate/addonVersion_schema.json file](https://github.com/nvaccess/validateNvdaAddonMetadata/blob/main/_validate/addonVersion_schema.json)."""),
_(u"""It includes an example of the file contents."""),
"",_(u"""### Submitting an Addon version"""),
"",_(u"""#### Pre-requisites:"""),
_(u"""- Familiarity with GitHub"""),
_(u"""- Familiarity with Git, including working with branches."""),
"",_(u"""Process to add a new NVDA-addon version:"""),
_(u"""1. Fork the `addon-store-submission` repository"""),
_(u"""1. On a new branch, copy the `_template_addon_release.json` file. """),
_(u"""   - Rename / move the file to `addons/<addonID>/<version>.json`"""),
_(u"""   - `<addonID>` is the ID of the add-on. This should match the `name` field in the add-on manifest, E.G. \"nv-speech-player\""""),
_(u"""   - `<version>` is the add-on version in the form: `Major.Minor.Patch` E.G. \"2.4.1\""""),
_(u"""1. Fill out the template."""),
_(u"""1. Create a PR to merge your branch into master on the `addon-store-submission` repository"""),
_(u"""1. Automated checks for common issues will complete. Either giving feedback or merging the PR."""),
_(u"""3. When the PR is merged the add-on becomes available in the store."""),
"","",_(u"""### Automated checks"""),
_(u"""See https://github.com/nvaccess/validateNvdaAddonMetadata"""),
"",_(u"""### Other notes"""),
_(u"""- By using a git repository and PR process, `git blame` and `git log` can be used to get more"""),
_(u"""  context about addons listed in the store."""),
_(u"""  For instance:"""),
_(u"""  - When was the addon accepted?"""),
_(u"""  - What did the review look like?"""),
_(u"""  - How often is the add-on updated?"""),
_(u"""- GitHub allows assigning reviews to reviewers"""),
"",_(u"""## API data generation details"""),
"",_(u"""Triggered by a new commit, a GitHub workflow transforms the data into the required views."""),
_(u"""These views of the data will be committed by the GitHub Action to a `views` branch."""),
"",_(u"""### Overview"""),
"",_(u"""For each version of NVDA, the meta-data of the most recent (the highest version number) of each Addon is automatically"""),
_(u"""added, based on the data in 'addon-store-submission'."""),
"",_(u"""Code for this will be stored in the `_tools` folder."""),
_(u"""This will enable interested parties to generate the same view of the data locally."""),
_(u"""This code will have automated tests."""),
"",_(u"""### Data views"""),
_(u"""The following views will only be available on a `views` branch, and located in a `views` folder."""),
_(u"""Required transformations of the data:"""),
_(u"""- `/NVDA API Version/addon-1-ID/stable.json`"""),
_(u"""- `/NVDA API Version/addon-1-ID/beta.json`"""),
_(u"""- `/NVDA API Version/addon-2-ID/stable.json`"""),
"",_(u"""Notes:"""),
_(u"""- 'NVDA API Version' will be something like '2019.3', there will be one folder for each NVDA API Version."""),
_(u"""- The `beta.json` and `stable.json` contain the information necessary for a store entry."""),
_(u"""- The contents for each addon will include all the technical details required for NVDA to download, verify file integrity, and install."""),
_(u"""- The file will include translations (if available) for the displayable metadata."""),
"",_(u"""The simplicity of this is that the NV Access server can just forward these files on directly when asked"""),
_(u"""\"what are the latest Addons for NVDA API Version X\" or \"What is the latest version of Addon-ID for NVDA API Version X\"."""),
_(u"""Using the NV Access server as the endpoint for this is important in case the implementation has to change or be migrated"""),
_(u"""away from GitHub for some reason."""),
"",_(u"""## Suffix"""),
"",_(u"""### Terminology: Addon version vs Addon release"""),
"",_(u"""Since this proposal supports beta addons, I have tried to avoid using the term \"addon release\", instead favouring \"addon version\"."""),
]