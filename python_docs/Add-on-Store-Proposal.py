# -*- coding: utf-8 -*-
documentation = [
_(u"""# Add on Store Proposal"""),
"",_(u"""The intention of this proposal is to improve the end-to-end process and supporting infrastructure for hosting Addons."""),
_(u"""This is the current plan from NV Access, it is a simplification of a [more complicated and highly automated plan](https://github.com/nvaccess/addon-store-submission/blob/c7d6f4fd9187fd0112de66b00caa62d774430d09/README.md). """),
_(u"""Inspiration has been taken from [Windows Package Manager Community repo](https://github.com/microsoft/winget-pkgs)"""),
_(u"""A highly automated process would be ideal, and we can keep the ideas in mind to work in that direction."""),
"",_(u"""The main goal of this is to enable an \"NVDA addon store\" accessible from within NVDA itself."""),
_(u"""In this proposal the word \"store\" is used to refer to the system used to store metadata about add-on releases and APIs to access this data."""),
_(u"""Aims:"""),
_(u"""- Enable any necessary, API, process, or infrastructure to support users to browse, search, install and update Addons for NVDA."""),
_(u"""- A secure and robust provision of addon-metadata."""),
_(u"""- There is no intention of supporting paid addons at this stage."""),
_(u"""- The process is intended to be as transparent as possible to make it simple (for developers) to understand the current state of the store or the state of a submission of a new / updated addon pending review."""),
_(u"""The process should enable authors and reviewers to learn about and improve the addon-review process."""),
"",_(u"""### About security """),
_(u"""Ensure that an add-on itself is safe to run, is a challenge that won't be addressed by this proposal."""),
_(u"""Instead, this system can ensure that all updates to the metadata for add-on versions are reviewed, and allows clients of the system (website, NVDA) to verify that the addon package still matches what was reviewed."""),
"",_(u"""### Past discussions"""),
_(u"""- About review process [conversation on the addons mailing list](https://nvda-addons.groups.io/g/nvda-addons/topic/69393202#10878) has been about reviewing Addons."""),
_(u"""- While NV Access has some opinions on the review process, this proposal will first concern itself with the mechanics of the system rather than the considerations for a reviewer when looking at an addon."""),
_(u"""For now, this step will just be referred to as 'review of addon performed'."""),
_(u"""Later a \"addon review check list\" will be created."""),
"",_(u"""### Non-exclusivity"""),
_(u"""This proposal does not intend to restrict Addon authors from developing, publishing, and distributing Addons outside of this store."""),
_(u"""NVDA will still allow local installation from a `*.nvda-addon` file."""),
"",_(u"""## Too Long; Didn't Read for Addon authors"""),
_(u"""With this proposal if an addon author wishes to submit their addon to be visible in this addon store they will need to:"""),
_(u"""- Add a file to this repo (via a pull request) containing metadata about published addons, including a download URL and hash of the addon package."""),
_(u"""- To facilitate reviews, store their addon in an open (not private) repository."""),
_(u"""- Get an \"add-on reviewer\" to review your addon and metadata submission, when this is approved it will be merged making it available."""),
"",_(u"""## Too Long; Didn't Read for Addon reviewers"""),
_(u"""As an Addon reviewer you will:"""),
_(u"""- Look at pending PR's on the `addon-store-submission` repository."""),
_(u"""- Follow the review process (yet to be documented)."""),
_(u"""- Either 'approve' the PR, or 'request changes' while providing feedback."""),
"",_(u"""## Considerations"""),
"",_(u"""- Submissions and reviews should be easy to find and get the status of."""),
_(u"""- Make it possible to automate many steps in the process, saving reviewers time."""),
_(u"""- Once submitted an addon version should be immutable. No changing the addon on an external server, it must be updated in the store via the submission process."""),
_(u"""- Allow addon authors to easily revoke a version if it is buggy / no longer supported. It should no longer be presented in the store, halting installation by new users."""),
_(u"""- Enable support in the store for multiple versions of an Addon, based on NVDA version."""),
_(u"""  - EG addon version 1.2.5 for NVDA 2019.3 and addon version 1.3.2 for NVDA 2020.1"""),
_(u"""- Enable support in the store for 'pre-release' Addons, for instance:"""),
_(u"""  - Addons being developed against alpha / beta NVDA."""),
_(u"""  - Addons that want early feedback from end users."""),
_(u"""  - End users can choose \"show me pre-release addons\""""),
"",_(u"""## Overview"""),
"",_(u"""- Use GitHub reviews for store submissions."""),
_(u"""- Use GitHub for storage of meta-data for addons available from the store."""),
_(u"""- Use GitHub actions (or other integrations) to automate construction of the data store, and as many of the review checks as possible."""),
_(u"""  This will all be open source and extensible by the community."""),
"",_(u"""### Why GitHub reviews?"""),
_(u"""- GitHub is where much of the NVDA development ecosystem is already based."""),
_(u"""- Handles all the of the CRUD ([create, read, update, delete](https://en.wikipedia.org/wiki/CRUD)) for users, authentication is handled, and we can determine how a user relates to an addon repository and what their permissions are for that repository. Are they actually an owner / maintainer?"""),
_(u"""- GitHub has a review system that allows for proposing changes and discussing these changes. We can leverage this for a store submission and review process."""),
_(u"""- GitHub PR's provided an atomic view of a store submission."""),
_(u"""- Interested parties can 'watch' PR's they care about without being subjected to the noise from PR's they don't care about."""),
_(u"""- The result (open / merged / closed) of the PR is clear."""),
_(u"""- GitHub allows us to manage permissions for accepting reviews more easily."""),
"",_(u"""## Infrastructure"""),
"",_(u"""- `addon-store-submission` GitHub Repository"""),
_(u"""  - For Addon authors / reviewers."""),
_(u"""  - Where new Addon versions are submitted"""),
_(u"""  - Where reviews of Addon submissions happen"""),
_(u"""  - For storage of meta-data about addons \"in the store\""""),
_(u"""  - This repository acts as a back-end database, but is more transparent."""),
_(u"""  - Since our needs are simple, preconfigured \"views\" of the data will suffice."""),
_(u"""- NV Access server - To provide the endpoint for \"available Addons\" meta-data"""),
_(u"""  - While this is technically not necessary, it provides a good separation from implementation."""),
_(u"""    If we wished to change our storage mechanism, we would not be breaking old versions of NVDA."""),
"",_(u"""## `addon-store-submission` GitHub Repository"""),
"",_(u"""Essentially this repository holds metadata about all the accepted versions of Addons which are included in the store."""),
_(u"""Metadata about old versions of an addon remains until it is explicitly removed or becomes invalid, allowing delivery to older versions of NVDA, or as a fall back in case the newer version is revoked after a critical bug is found."""),
_(u"""Addons versions are submitted by submitting a pull request, adding a file for that version of the addon."""),
"",_(u"""### Layout"""),
"",_(u"""Root directory of repository:"""),
_(u""" - `readme.md` - A guide for submission"""),
_(u""" - `addons/publisher1/addon1/majorVersion.minorVersion.patch.json`"""),
_(u""" - `addons/publisher1/addon2/majorVersion.minorVersion.patch.json`"""),
_(u""" - `addons/publisher2/addon3/majorVersion.minorVersion.patch.json`"""),
"",_(u"""Note: `publisher.addonName` will become the addon ID, and must be unique and match the addon ID from the addon manifest."""),
"",_(u"""Example for the NV Access addon, 'NVDA - OCR': `addons/nvaccess/nvda-ocr/1.6.0.json`"""),
"",_(u"""### Metadata format"""),
_(u"""For a full description of the schema see:` _tools/addonVersion_schema.json`"""),
_(u"""- This includes an example of the file contents."""),
"",_(u"""### Submitting an Addon version"""),
"",_(u"""#### Pre-requisites:"""),
_(u"""- Familiarity with GitHub"""),
_(u"""- Familiarity with Git, including working with branches."""),
"",_(u"""Process to add a new NVDA-addon version:"""),
_(u"""1. Fork the `addon-store-submission` repository"""),
_(u"""1. On a new branch, copy the `_template_addon_release.json` file. """),
_(u"""   - Rename / move the file to `<publisher>/<addonName>/<version>.json`"""),
_(u"""   - `<publisher>` is the name of the add-on developer, E.G. \"nvaccess\""""),
_(u"""   - `<addonName>` is the name of the add-on, E.G. \"nv-speech-player\""""),
_(u"""   - `<version>` is the add-on version in the form: `Major.Minor.Patch` E.G. \"2.4.1\""""),
_(u"""1. Create a PR on `addon-store-submission` repository"""),
_(u"""1. Automated checks for common issues will complete."""),
_(u"""1. A review is performed (resulting in: request changes, approval)"""),
_(u"""   - Conducted by an NVDA add-on reviewer."""),
_(u"""   - Manual review is done according to some published review check list (so that everyone knows what to expect)"""),
_(u"""1. The PR is merged, the add-on becomes available in the store."""),
"","",_(u"""### Checked during review"""),
_(u"""Many of these can be automated."""),
_(u"""- Each modified file conforms to the schema"""),
_(u"""- Download URL is valid"""),
_(u"""- File from URL matches Sha256"""),
_(u"""- Version number matches add-on manifest."""),
_(u"""- The file ID (`<publisher>.<addonName>`) matches the manifest 'name' field"""),
_(u"""- The version number from the file name is valid and matches the version in the manifest."""),
"",_(u"""### Concerns"""),
_(u"""- With this ID scheme many add-ons will need to change their ID. Will this require previously saved user config to be moved to a new section of the config file?"""),
"",_(u"""### Other notes"""),
_(u"""- By using a git repository and and PR process, `git blame` and `git log` can be used to get more context about addons listed in the store. For instance:"""),
_(u"""  - When was the addon accepted"""),
_(u"""  - What did the review look like"""),
_(u"""  - How often does this addon have updates accepted"""),
_(u"""- GitHub allows assigning reviews to reviewers"""),
"",_(u"""## API data generation details"""),
"",_(u"""The NV Access server will be configured to respond to a Webhook to pull from this repository and run code to transform"""),
_(u"""the data."""),
_(u"""This can regenerate the required views of the data for the exposed API's"""),
"",_(u"""### Overview"""),
"",_(u"""For each version of NVDA, the meta-data of the most recent (the highest version number) of each Addon is automatically"""),
_(u"""added, based on the data in 'addon-store-submission'."""),
"",_(u"""Code for this will be stored in the `_tools` folder. This will enable interested parties to generate the same view of"""),
_(u"""the data locally."""),
"",_(u"""### Data views"""),
"",_(u"""Required transformations of the data:"""),
_(u"""- `/NVDA API Version/addon-1-ID/release.json`"""),
_(u"""- `/NVDA API Version/addon-1-ID/pre-rel.json`"""),
_(u"""- `/NVDA API Version/addon-2-ID/release.json`"""),
_(u"""- `/NVDA API Version/all.json`"""),
"",_(u"""Notes:"""),
_(u"""- 'NVDA API Version' will be something like '2019.3', there will be one folder for each NVDA API Version."""),
_(u"""- The `pre-rel.json` and `release.json` contain the information necessary for a store entry."""),
_(u"""- The contents of `all.data` is all (pre-release and release) data for this NVDA API version together."""),
_(u"""- The contents for each addon will include all the technical details required for NVDA to download, verify file integrity, and install."""),
_(u"""- The file will include translations (if available) for the displayable metadata."""),
"",_(u"""The simplicity of this is that the NV Access server can just forward these files on directly when asked"""),
_(u"""\"what are the latest Addons for NVDA API Version X\" or \"What is the latest version of Addon-ID for NVDA API Version X\"."""),
_(u"""Using the NV Access server as the endpoint for this is important in case the implementation has to change or be migrated"""),
_(u"""away from GitHub for some reason."""),
"",_(u"""## Suffix"""),
"",_(u"""### Terminology: Addon version vs Addon release"""),
"",_(u"""Since this proposal supports pre-release addons, I have tried to avoid using the term \"addon release\", instead favouring \"addon version\"."""),
]