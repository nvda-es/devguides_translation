# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-04 17:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\python_docs\w10addoninternals.py:3
msgid "# NVDA Add-on internals: Windows App Essentials"
msgstr ""

#: ..\python_docs\w10addoninternals.py:4
msgid "Author: Joseph Lee"
msgstr ""

#: ..\python_docs\w10addoninternals.py:5
msgid "Revision: July 2021"
msgstr ""

#: ..\python_docs\w10addoninternals.py:6
msgid ""
"Note: originally called Windows 10 App Essentials, the add-on was renamed to "
"Windows App Essentials in 2021 with the introduction of Windows 11. Parts of "
"this document will refer to the original add-on name or Windows 10."
msgstr ""

#: ..\python_docs\w10addoninternals.py:7
msgid "## Introduction"
msgstr ""

#: ..\python_docs\w10addoninternals.py:8
msgid ""
"Supporting new technologies can be fun and challenging, especially a new "
"operating system version that changes how people perform certain tasks and "
"introduces new ways of keeping up with changes. This is more so when it "
"comes to letting screen readers support new operating systems such as "
"Windows 10 and 11, which brings new ways of interacting with a computer, new "
"set of apps and technologies, and accessibility improvements and challenges. "
"NVDA includes solid support for Windows 10 (support may vary on newer "
"releases), including Microsoft Edge, the new Start menu, navigation in "
"universal apps, emoji panel and so on, all made possible thanks to "
"collaboration between users, Microsoft, NV Access and others, part of which "
"involves the add-on we will meet in this article."
msgstr ""

#: ..\python_docs\w10addoninternals.py:9
msgid ""
"In NVDA Add-on Internals: Windows App Essentials, we'll look at how this add-"
"on came about, how it works, its development, and go over recommendations "
"from the add-on author (me) regarding accessibility practices. You'll also "
"glimpse how UI Automation works at a high level, how features start out as "
"an add-on component and end up as an NVDA feature and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:10
msgid ""
"To download the add-on, visit https://addons.nvda-project.org/addons/"
"wintenApps.en.html. The source code for this add-on can be found at https://"
"github.com/josephsl/wintenApps. As Windows (10 and later, more so for "
"Windows 11) and universal apps are UI Automation universes, it is essential "
"that you know some things about UIA, which are covered later."
msgstr ""

#: ..\python_docs\w10addoninternals.py:11
msgid ""
"Disclaimer: Despite the article text and knowledge that's contained within, "
"I (Joseph Lee, the add-on author) do not work for NV Access nor Microsoft."
msgstr ""

#: ..\python_docs\w10addoninternals.py:12
msgid ""
"Note: some of the features described may change as Windows and NVDA "
"development progresses. As of July 2021 revision, features from NVDA 2021.1 "
"release and recent Windows Insider Preview builds are documented for "
"reference purposes. Also, when refering to Windows releases (in "
"particularly, Windows 10 feature updates), release Id (YYMM/YYHn) is used "
"instead of using marketing label unless specified (for example, 1709 instead "
"of Fall Creators Update, or 20H2 instead of 2009). To account for Windows "
"11, releases will be denoted as \"Windows release YYMM/YYHn\" e.g. Windows "
"10 21H1 for Windows 10 May 2021 Update or Windows 11 21H2 for first Windows "
"11 release."
msgstr ""

#: ..\python_docs\w10addoninternals.py:13
msgid ""
"Copyright: Microsoft Windows, Windows API, UI Automation, Microsoft Edge, "
"Universal Windows Platform (UWP) and related technologies are copyright "
"Microsoft Corporation. NVDA is copyright NV Access. Windows App Essentials "
"add-on is copyright 2015-2021 Joseph Lee and contributors, released under "
"GPL 2."
msgstr ""

#: ..\python_docs\w10addoninternals.py:14
msgid "## Windows releases and Windows App Essentials"
msgstr ""

#: ..\python_docs\w10addoninternals.py:15
msgid ""
"The first version of Windows was 1.01, released in 1985. Over time, "
"Microsoft released familiar Windows releases such as 95, 2000, XP, Vista, 7, "
"8, 10, 11, and so on. Each release took years to develop - five years for "
"Windows Vista, three years for Windows 7, and almost two years for initial "
"Windows 11 version (21H2)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:16
msgid ""
"What I would call the modern Windows began with Windows 10 with the "
"introduction of Windows as a Service (WaaS) where major updates are "
"developed months at a time in collaboration with Windows Insiders. For "
"example, it took Microsoft about five months (June to October 2015) to "
"develop Windows 10 1511 (November Update). Internally, a given Windows "
"release takes more time to develop (up to a year or more), with quality "
"checks done by Microsoft and feedback from Windows Insiders deciding which "
"features will appear for the general public. This practice continues in "
"Windows 11, and so does my work on championing accessibility, especially "
"when it comes to making sure third-party universal apps are usable by many, "
"supporting features such as modern input facility and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:17
msgid ""
"Originally, Windows App Essentials supported Windows 10 only, hence the "
"original name (Windows 10 App Essentials). This became an issue in June 2021 "
"when Microsoft introduced Windows 11. Despite being called Windows 11, it is "
"still powered by Windows 10 technologies, as evidenced by the system version "
"being 10.0, the same as Windows 10 releases. As a result, the need to expand "
"the add-on to support Windows 11 and future Windows releases became a high "
"priority, and as part of this change, \"10\" was dropped from add-on name in "
"June 2021. To acknowledge its origins and since Windows system version is "
"10.0 across Windows releases from 10 onwards (unless this changes), parts of "
"the add-on and this internal article will refer to Windows 10 App Essentials "
"(WinTenApps for short) where context matters."
msgstr ""

#: ..\python_docs\w10addoninternals.py:18
msgid "### Windows 10"
msgstr ""

#: ..\python_docs\w10addoninternals.py:19
msgid ""
"Windows 10 is the \"last major\" version of Windows... or was promoted as "
"such until Windows 11 debuted in 2021. It introduced a completely new way of "
"keeping track of changes through Windows Insider Program and Windows as a "
"Service (WaaS, a fancy term for continuous delivery), new application "
"development framework, unification strategy in terms of user experience "
"across devices and a new web browser. In addition, it featured the return of "
"an older style of Start menu, virtual desktops, Action Center to centralize "
"notifications, a way to run command-line Linux utilities, and refinements to "
"Narrator, the built-in screen reader."
msgstr ""

#: ..\python_docs\w10addoninternals.py:20
msgid ""
"Windows 10 made its maiden flight in October 2014. Back then, it was called "
"Windows Technical Preview, and after several weeks, it was renamed to "
"Windows Insider Preview. Between October 2014 and July 2015 when Windows 10 "
"Version 1507 (build 10240) shipped, more than five million users became "
"Insiders, testing new builds and apps, submitting feedback and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:21
msgid ""
"I call the October 2014 preview (build 9841) a maiden flight for several "
"reasons. First, this is the first time where Microsoft did show interest in "
"user-level feedback. Although betas existed for earlier versions such as "
"Windows 7 and 8.1, Windows 10 is the first attempt from Microsoft at "
"connecting with users and taking comments seriously. Second, build 9841 (the "
"first Insider Preview build) hailed the start of Windows as a Service, a "
"completely different approach to upgrading Windows where Microsoft wanted to "
"provide two things: continuous delivery and feedback loop, and a unified "
"configuration that works well with most devices. There were setbacks such as "
"privacy concerns due to telemetry and data losses in October 2018 Update, "
"but for the most part, Windows 10 was received positively."
msgstr ""

#: ..\python_docs\w10addoninternals.py:22
msgid ""
"There is another, more personal reason for calling October 2014 release a "
"maiden flight: I became one of the first Windows Insiders, and due to my "
"work on NVDA, I have decided to make sure screen reader users were treated "
"with respect. This included sending accessibility-related feedback, getting "
"other screen reader users onboard as Insiders, and releasing NVDA try builds "
"that resolved important issues for Windows Insiders. This culminated in the "
"release of Windows 10 App Essentials add-on in November 2015 (in time for "
"Windows 10 Version 1511/build 10586 release) that provided basic support for "
"Insider Hub (now Feedback Hub) and other workarounds, which translated to "
"superb user experience for NVDA users when it comes to using Windows 10 and "
"various universal apps."
msgstr ""

#: ..\python_docs\w10addoninternals.py:23
msgid "### Windows 11"
msgstr ""

#: ..\python_docs\w10addoninternals.py:24
msgid ""
"Windows 11 is described as the next generation of Windows. It introduced "
"user interface tweaks, combined input experience panel where users can "
"select from emojis and clipboard history, a revamped Store, support for "
"Android apps distributed through Amazon App Store, and other under the hood "
"system tweaks. Despite its name, Windows 11's internal system version is "
"10.0."
msgstr ""

#: ..\python_docs\w10addoninternals.py:25
msgid ""
"Windows 11 development could be best described as a reaction to changes to "
"Windows ecosystem around 2020. First, Microsoft announced in December 2019 "
"that Windows Insiders on fast ring (now dev channel) wil receive builds that "
"are not tied to upcoming Windows releases. Six months later, Windows "
"Insiders were notified that the \"Insider ring\" model was being replaced by "
"\"Insider channels\" that clarified the quality of a Windows build. For "
"example, people subscribed to slow ring were redirected to beta channel "
"where the next feature update build was released for testing in advance."
msgstr ""

#: ..\python_docs\w10addoninternals.py:26
msgid ""
"At the same tine, Microsoft was working on Windows 10 X, an operating system "
"designed for dual screen devices. Windows 10 X was designed to be \"secure "
"by default\", meaning that it will let go of legacy components that could "
"compromise operating system security such as running classic desktop apps "
"locally. Because Windows 10 X downplayed classic desktop apps, I and others "
"were wondering as to how would desktop apps (in my case, screen readers) "
"would work in this environment, with Microsoft noting that an app container "
"will be used to run classic apps securely. But by 2021, it was clear that "
"Windows 10 X was not ready for the world (originally designed for dual "
"screen devices, later becoming a single screen environment), and the world "
"was a different place than 2019 when Windows 10 X was first announced."
msgstr ""

#: ..\python_docs\w10addoninternals.py:27
msgid ""
"Most significantly, the COVID-19 (Coronavirus Disease 2019) pandemic brought "
"changes to lives of billions. Schools shifted to remote learning, and "
"businesses accelerated adoption of hybrid and remote work. Responding to the "
"pandemic and its impact, coupled with the state of Windows 10 X, Microsoft "
"suspended Windows 10 X development in early 2021 and refined it as Sun "
"Valley, a project to improve the user interface and related tweaks. This "
"culminated in Sun Valley being revealed as Windows 11."
msgstr ""

#: ..\python_docs\w10addoninternals.py:28
msgid ""
"The first Windows 11 Insider Preview build (22000.51) was released on June "
"28, 2021. The biggest difference from Windows 10 era was how the user "
"interface was presented and coded. For example, Settings app was "
"reorganized, and many File Explorer controls and Shell elements such as "
"buttons on the taskbar are UIA controls. Just like old Windows 10 Insider "
"Preview builds, accessibility regressions were found, the most significant "
"being inability to activate items with shortcut keys in quick menu (Windows"
"+X)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:29
msgid ""
"Just like first Windows 10 Insider Preview build (9841), build 22000 is "
"personal. Although I was disappointed that the main add-on development "
"machine isn't compatible with Windows 11, Windows 11 preview ran well as a "
"virtual machine. At least this gave me a head start on bringing experimental "
"support for Windows 11 user interface through Windows App Essentials, made "
"easier as I have learned a lot during Windows 10 era. Many add-on snapshots "
"were released days following the availability of the first preview build, "
"and as of time of this writing (July 2021), Windows 11 is usable with NVDA."
msgstr ""

#: ..\python_docs\w10addoninternals.py:30
msgid "## Purposes of Windows App Essentials"
msgstr ""

#: ..\python_docs\w10addoninternals.py:31
msgid "Windows App Essentials add-on is built on top of four pillars:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:32
msgid ""
"* New features support: part of making sure screen reader users were treated "
"with respect was showcasing new Windows features early through this NVDA add-"
"on, particularly on Windows 10. These include support for really old "
"versions of Feedback Hub app, emoji panel in Windows 10 Fall Creators Update "
"and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:33
msgid ""
"* Essential features and announcements: Until early 2017, NVDA did not "
"announce important information such as status of Windows Update "
"installations in Settings app. This has changed significantly in 2017 (see "
"notes on live region change event for details)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:34
msgid ""
"* UI Automation and accessibility workarounds: every day, new features and "
"bug fixes are added to various universal apps or Windows itself. At the same "
"time, there is at least one app where accessibility, particularly UI "
"Automation, gets broken, especially during development of Windows 11. Some "
"of the add-on code is devoted to providing workarounds for odd UIA "
"implementations."
msgstr ""

#: ..\python_docs\w10addoninternals.py:35
msgid ""
"* Demonstrating commitment to accessibility advocacy: some accessibility "
"champions, including I, have recently stressed that accessibility is "
"important in app designs, and that developers should take accessibility "
"feedback seriously. Through workarounds and features, the add-on provides a "
"way to demonstrate this commitment and advocacy."
msgstr ""

#: ..\python_docs\w10addoninternals.py:36
msgid ""
"There is a fifth pillar that has emerged in recent years: providing a "
"testing ground for potential NVDA features dealing with Windows and apps. "
"Recently, parts of this add-on have made their way to NVDA screen reader, "
"including emoji panel support, suggestion sounds, dialog detection and "
"others."
msgstr ""

#: ..\python_docs\w10addoninternals.py:37
msgid "## Add-on contents"
msgstr ""

#: ..\python_docs\w10addoninternals.py:38
msgid ""
"The Windows App Essentials add-on consists of a global plugin and app "
"modules for various universal apps included with Windows 10 and later. The "
"Windows App Objects (shortened to WinAppObjs), the global plugin portion of "
"this add-on, provides foundations such as overlay classes for frequently "
"encountered controls in Windows an universal apps, along with UIA event "
"tracking and logger facility. Until 2018, the global plugin was also "
"responsible for add-on update feature, documented here for sake of "
"completeness."
msgstr ""

#: ..\python_docs\w10addoninternals.py:39
msgid ""
"In regards to app modules, these were included to either provide workarounds "
"or enhance the user experience. For example, the app module for Settings app "
"(systemsettings) allows NVDA to announce Windows Update download and "
"installation progress, and app module for modern keyboard "
"(windowsinternal_composableshell_experiences_textinput_inputapp) provides "
"support for more modern input facilities such as enhanced dictation and "
"clipboard history. We'll meet some of these app modules in subsequent "
"sections."
msgstr ""

#: ..\python_docs\w10addoninternals.py:40
msgid "### A note on feature parity with NVDA screen reader"
msgstr ""

#: ..\python_docs\w10addoninternals.py:41
msgid ""
"As noted above, some features discussed in this article (such as suggestion "
"sound playback and UIA notification event handler) were integrated into "
"recent NVDA releases. I will point out some of these, as well as provide how "
"these were integrated, including planning involved and some tips on "
"modifying add-on features to fit into NVDA's code base."
msgstr ""

#: ..\python_docs\w10addoninternals.py:42
msgid "### Information on add-on update feature"
msgstr ""

#: ..\python_docs\w10addoninternals.py:43
msgid ""
"This article will sometimes reference add-on update feature, which is gone "
"in 2019. Information about it is kept here for reference purposes. An add-on "
"appropriately named \"Add-on Updater\" is used to update windows App "
"Essentials and other add-ons."
msgstr ""

#: ..\python_docs\w10addoninternals.py:44
msgid "### Special note on feature updates support on Windows 10 and later"
msgstr ""

#: ..\python_docs\w10addoninternals.py:45
msgid ""
"Windows App Essentials add-on supports a given Windows feature update "
"(release) for at least one year. In addition, it comes with support for "
"features found in Windows Insider Preview (WIP) builds, including features "
"that may not appear in subsequent feature updates."
msgstr ""

#: ..\python_docs\w10addoninternals.py:46
msgid "## Fun with UI Automation"
msgstr ""

#: ..\python_docs\w10addoninternals.py:47
msgid ""
"Before we dive into how the add-on works, it is helpful to understand what "
"UIA is and wy it is important. Only then the rest of the article makes "
"sense, as Windows (10 and later) and universal apps are UIA universes "
"(exceptions exist, including desktop apps submitted (either converted "
"(Windows 10) or installer (Windows 11) for distribution in Microsoft Store)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:48
msgid ""
"UI Automation (UIA), released in 2007, is an accessibility API based on "
"Component Object Model (COM) that allows assistive technologies and other "
"programs to communicate with each other regarding accessibility information "
"about a control. In some respects, this API is a replacement for Microsoft "
"Active Accessibility (MSAA), sometimes called IAccessible that was released "
"in the 1990's. Being a COM-based API set, it allows programs and objects to "
"expose essential information regardless of programming language in use as "
"long as an object exposes documented routines that other programs can use."
msgstr ""

#: ..\python_docs\w10addoninternals.py:49
msgid ""
"In UIA world, an object on screen is termed an \"element\". Just like any "
"accessibility API's, UIA exposes various elements to assistive technologies, "
"which are termed \"clients\", with programs with the set elements termed "
"\"servers\". These elements are organized into a UI tree, with the Windows "
"Shell (desktop) object being the root, with tree being pruned and new leafs "
"springing constantly whenever apps are started and closed, elements are "
"created and destroyed, controls are shown and hidden on screen and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:50
msgid ""
"Although UIA is meant to replace MSAA due to modernized accessibility "
"information that can be gathered, screen reader vendors such as NV Access "
"publishes workarounds for poor or odd UIA implementations. One such case is "
"UIA issues in older versions of Microsoft Office, such as label problem in "
"various combo boxes. Certain areas in Windows and universal apps still have "
"UIA issues, such as odd or badly applied control labels, generic XAML "
"(eXtensible Application Markup Language)/UI labels, expected events not "
"being fired and so on. This is one of the reasons for creating Windows App "
"Essentials add-on: to provide workarounds for issues like these."
msgstr ""

#: ..\python_docs\w10addoninternals.py:51
msgid "### Automation Id and other interfaces and properties"
msgstr ""

#: ..\python_docs\w10addoninternals.py:52
msgid ""
"A key piece of information UIA exposes (or attempts to gather) is Automation "
"Identifier (Id), a string that uniquely identifies an element. For example, "
"some search fields expose \"SearchEditBox\" as Automation Id, which allows "
"screen readers such as NVDA to detect these controls. Although most controls "
"do expose unique Automation Id's, some uses generic or auto-generated "
"identifiers (such as update history in Settings app)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:53
msgid "Other useful information exposed by UIA elements are:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:54
msgid ""
"* Class name: the class name for this control, a string that denotes the "
"class of this element (not to be confused with Automation Id that uniquely "
"identifies an element)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:55
msgid ""
"* Framework: the underlying framework used to create a given control such as "
"XAML, Direct UI and others."
msgstr ""

#: ..\python_docs\w10addoninternals.py:56
msgid ""
"* Localized control type: a role type text that should be spoken by screen "
"readers in different languages."
msgstr ""

#: ..\python_docs\w10addoninternals.py:57
msgid ""
"* Controller for: a list (array) of controls that this element manipulates "
"when performing actions such as search suggestions (explained below)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:58
msgid ""
"* ARIA properties: a map of ARIA properties such as role description, mostly "
"encountered in Microsoft Edge elements."
msgstr ""

#: ..\python_docs\w10addoninternals.py:59
msgid "### UIA events"
msgstr ""

#: ..\python_docs\w10addoninternals.py:60
msgid ""
"In addition to standard events expected from accessibility API's such as "
"focus manipulation and object property (such as name and state) changes, UIA "
"comes with some interesting events, including controller for, live region "
"changed, notification and many others. Due to performance reasons, NVDA "
"ignores certain events such as structure change and others. How NVDA and "
"Windows App Essentials add-on deals with certain UIA events is covered later "
"in this article."
msgstr ""

#: ..\python_docs\w10addoninternals.py:61
msgid "### UIA-related additions, fixes and workarounds"
msgstr ""

#: ..\python_docs\w10addoninternals.py:62
msgid ""
"The Windows App Essentials add-on includes the following additions, fixes "
"and workarounds for UIA issues and control problems:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:63
msgid ""
"* Search suggestions: NVDA now plays a sound to indicate appearance of "
"search suggestions, incorporated into NVDA 2017.3. More on this below."
msgstr ""

#: ..\python_docs\w10addoninternals.py:64
msgid ""
"* Live region change announcements in various apps. In the global plugin "
"portion, a way to define and track this event is included."
msgstr ""

#: ..\python_docs\w10addoninternals.py:65
msgid ""
"* Floating suggestions such as Emoji panel in Windows 10 1709 (Fall Creators "
"Update) and hardware keyboard suggestions in 1803 (April 2018 Update). This "
"has been incorporated into NVDA 2018.3 release, but more recent changes do "
"require support from this add-on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:66
msgid ""
"* Support for UIA notification event introduced in Windows 10 1709. This "
"became part of NVDA in 2018.2, and refined in 2019.2 to interupt users when "
"important notifications are pending."
msgstr ""

#: ..\python_docs\w10addoninternals.py:67
msgid ""
"* Providing more meaningful labels for certain controls such as update "
"history in Settings/Update and Security/Windows Update, sensitive to changes "
"in Insider Preview builds."
msgstr ""

#: ..\python_docs\w10addoninternals.py:68
msgid ""
"* Announcing tooltips from universal apps, incorporated into NVDA 2019.3."
msgstr ""

#: ..\python_docs\w10addoninternals.py:69
msgid ""
"* Recognizing dialogs powered by XAML and various frameworks. Since NVDA "
"2018.3, NVDA itself takes care of this in most situations."
msgstr ""

#: ..\python_docs\w10addoninternals.py:70
msgid ""
"We'll meet various UIA controls and workarounds throughout this article."
msgstr ""

#: ..\python_docs\w10addoninternals.py:71
msgid "## Windows App Objects"
msgstr ""

#: ..\python_docs\w10addoninternals.py:72
msgid ""
"Windows App Essentials add-on comes with Windows App Objects (formerly "
"Windows 10 Objects or WinTenObjs for short), a global plugin that contains "
"definitions of common controls encountered in Windows and various universal "
"apps. These include search suggestion handling, tool tips for universal apps "
"and so on. It also includes additional UIA handling routines and "
"configuration and update facility for the add-on (the latter was removed in "
"2019)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:73
msgid "### Source code layout"
msgstr ""

#: ..\python_docs\w10addoninternals.py:74
msgid ""
"The main global plugin is housed inside winappObjs.py and is laid out thus:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:75
msgid "1. Usual add-on header such as copyright information."
msgstr ""

#: ..\python_docs\w10addoninternals.py:76
msgid ""
"2. UIA constants not included in NVDA, including property ID's such as "
"controller for event. Most are now part of NVDA itself."
msgstr ""

#: ..\python_docs\w10addoninternals.py:77
msgid ""
"3. Classes defining various Windows and universal app controls, including "
"search suggestions, looping selectors and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:78
msgid ""
"4. The actual global plugin class, consisting of overlay class finder and "
"tracking routines for various UIA events (only available if NVDA is "
"restarted with debug logging enabled)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:79
msgid "### Startup and shutdown"
msgstr ""

#: ..\python_docs\w10addoninternals.py:80
msgid ""
"At startup, along with checking to see if a compatible version of Windows "
"(10 and later, not all feature updates are supported) is in use, the add-on "
"enables tracking of missing UIA events. For example, until May 2017, "
"controller for event (an event fired by a control that depends on another "
"control such as an edit field with search suggestions) wasn't available in "
"NVDA screen reader, but search suggestion announcement was made possible as "
"this add-on added this event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:81
msgid ""
"Until 2019, the add-on was also responsible for extending UIA interface, "
"adding settings dialogs, and checking for updates. These took the bulk of "
"startup and shutdown routines which were removed with the removal of add-on "
"update check facility."
msgstr ""

#: ..\python_docs\w10addoninternals.py:82
msgid "### Notable Windows app objects and features"
msgstr ""

#: ..\python_docs\w10addoninternals.py:83
msgid "#### Sounds to indicate appearance of search suggestions"
msgstr ""

#: ..\python_docs\w10addoninternals.py:84
msgid ""
"In some edit fields such as search box in Start menu, a list of suggestions "
"will appear while entering text. for newer implementations, UIA controller "
"for event is raised if this happens, with different screen readers reacting "
"differently. For example, when typing something into Start search box while "
"using Narrator, Narrator will play a sound to indicate appearance of "
"suggestions, while old NVDA releases will announce top suggestion."
msgstr ""

#: ..\python_docs\w10addoninternals.py:85
msgid ""
"Because I felt it would be best to let users be notified when suggestions "
"appear and disappear (and in some respects, follow Narrator's footsteps), I "
"have implemented code to handle search suggestions. This is divided into "
"four components:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:86
msgid ""
"* One or more classes used to identify edit fields that does raise UIA "
"controller for event and ways to identify them. The reason for using several "
"classes for the same object is due to compatibility reasons, as older NVDA "
"releases does not come with a search field class. These classes include two "
"events related to controller for event:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:87
msgid ""
"\t* `event_suggestionsOpened`: called when suggestions appear. Some "
"controls, notably embedded Cortana search box when opening a new Sets tab, "
"does not fire this event properly."
msgstr ""

#: ..\python_docs\w10addoninternals.py:88
msgid ""
"\t* `event_suggestionsClosed`: called when suggestions disappear. There are "
"controls that does not raise this, including Edge's address omnibar."
msgstr ""

#: ..\python_docs\w10addoninternals.py:89
msgid "* A class representing the suggestion items themselves."
msgstr ""

#: ..\python_docs\w10addoninternals.py:90
msgid "* A set of sounds to indicate appearance/disappearance of suggestions."
msgstr ""

#: ..\python_docs\w10addoninternals.py:91
msgid ""
"* A compatibility layer for old and upcoming NVDA releases as noted above."
msgstr ""

#: ..\python_docs\w10addoninternals.py:92
msgid ""
"In addition, in some cases, it is helpful to announce how many suggestions "
"have appeared, thus a routine has been added to announce this. With this "
"added, the complete picture is as follows:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:93
msgid "1. User types text into a search field."
msgstr ""

#: ..\python_docs\w10addoninternals.py:94
msgid ""
"2. NVDA will notice controller for event and will look for suggestions list. "
"If such a list is found, NVDA will play the suggestion sound by raising "
"suggestions opened event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:95
msgid ""
"3. If suggestions are found, it'll announce the top suggestion or suggestion "
"count. The former is for Start menu, while the latter is for other edit "
"fields."
msgstr ""

#: ..\python_docs\w10addoninternals.py:96
msgid ""
"4. One can then use up or down arrow keys to move through suggestions, then "
"press Enter to select or Escape to close suggestions list. When closing "
"suggestions list, NVDA will play suggestions close sound."
msgstr ""

#: ..\python_docs\w10addoninternals.py:97
msgid ""
"Since NVDA 2017.3, suggestion announcement (not the count) is part of the "
"screen reader."
msgstr ""

#: ..\python_docs\w10addoninternals.py:98
msgid ""
"Note that the routines described above was done at a time when it was "
"desirable to detect all possible search fields. However, it was found that "
"some workarounds were app specific, thus in June 2019, it was decided to "
"transfer some search field handling to app modules. This is especially the "
"case with address omnibar in legacy Microsoft Edge (EdgeHTML version) where "
"the global plugin’s suggestions closed event handler did not apply if Edge "
"is in use. Along the way, handling rarely used search fields that appeared "
"in one or two apps (such as People app search field in old app releases) "
"were dropped."
msgstr ""

#: ..\python_docs\w10addoninternals.py:99
msgid "#### Announcing notifications"
msgstr ""

#: ..\python_docs\w10addoninternals.py:100
msgid ""
"Windows 10 1709 (Fall Creators Update) introduces a new event to let apps "
"send text to be announced by UIA clients such as NVDA. One of the jobs of "
"Windows App Objects is to catch this and announce notifications for NVDA "
"releases which does not support this natively."
msgstr ""

#: ..\python_docs\w10addoninternals.py:101
msgid ""
"Because old NVDA releases do not support the new notification event "
"natively, a trick is included with the add-on to allow NVDA to detect and "
"handle notifications. This is done by extending UIA support subsystem "
"through an internal module that takes over the NVDA's own routines. Among "
"other things, this extended subsystem includes definitions for UIA "
"notification event handler, and this subsystem takes over if NVDA 2018.1.x "
"is running on Windows 10 1709 and later."
msgstr ""

#: ..\python_docs\w10addoninternals.py:102
msgid "The notification event handler takes five keyword arguments:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:103
msgid "* Sender: the UIA element that raised the event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:104
msgid "* Notification kind: the kind of notification."
msgstr ""

#: ..\python_docs\w10addoninternals.py:105
msgid ""
"* Notification processing: how NVDA should process incoming notification."
msgstr ""

#: ..\python_docs\w10addoninternals.py:106
msgid "* Display string: notification text."
msgstr ""

#: ..\python_docs\w10addoninternals.py:107
msgid "* Activity Id: the unique identifier for the notification."
msgstr ""

#: ..\python_docs\w10addoninternals.py:108
msgid ""
"As of October 2018, NVDA itself announces notifications for all apps "
"(especially for the currently active app) except one or two apps where this "
"would cause issues, thus the add-on is no longer involved in announcing many "
"notifications except those that could cause issues."
msgstr ""

#: ..\python_docs\w10addoninternals.py:109
msgid "#### Tracking UIA events for controls"
msgstr ""

#: ..\python_docs\w10addoninternals.py:110
msgid ""
"The Windows App Objects global plugin also has ability to track UIA events "
"for controls and log info  about them, executed via `uiaDebugLogging` "
"function that takes an object and the event name. This function records the "
"following if NVDA is started with debug logging enabled or told to monitor "
"specific events and/or events from specific apps:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:111
msgid "* What the object actually is."
msgstr ""

#: ..\python_docs\w10addoninternals.py:112
msgid "* Object name."
msgstr ""

#: ..\python_docs\w10addoninternals.py:113
msgid "* Name of the event being logged."
msgstr ""

#: ..\python_docs\w10addoninternals.py:114
msgid "* App where the control can be found (specifically, the app module)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:115
msgid "* Automation Id if possible."
msgstr ""

#: ..\python_docs\w10addoninternals.py:116
msgid "* UIA class name."
msgstr ""

#: ..\python_docs\w10addoninternals.py:117
msgid ""
"* For controller for event, the list of objects the given control depends on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:118
msgid "* For tooltip open event, the GUI framework that powers the element."
msgstr ""

#: ..\python_docs\w10addoninternals.py:119
msgid "* For item status event, new item status text."
msgstr ""

#: ..\python_docs\w10addoninternals.py:120
msgid "* For state change event, current element state."
msgstr ""

#: ..\python_docs\w10addoninternals.py:121
msgid ""
"For notification events, NVDA records event parameters from the event "
"handler method itself."
msgstr ""

#: ..\python_docs\w10addoninternals.py:122
msgid "#### Looping selectors"
msgstr ""

#: ..\python_docs\w10addoninternals.py:123
msgid ""
"A looping selector is a combo box-like control where the selection loops "
"around. This is employed in places such as Alarms and Clock, Settings/Update "
"and Security/Windows Update/active hours and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:124
msgid ""
"In older Windows 10 and universal app releases, when changing selector "
"values, item selected UIA event wasn't fired. To get around this, the add-on "
"will examine states for each item and announce if an item has selected "
"state. This isn't the case for newer implementations, but for backward "
"compatibility, the old routines are kept. This has been enhanced in NVDA "
"2019.1, and since June 2019, the add-on is no longer involved in keeping an "
"eye on this control as NVDA supports it natively."
msgstr ""

#: ..\python_docs\w10addoninternals.py:125
msgid "#### Live region change events"
msgstr ""

#: ..\python_docs\w10addoninternals.py:126
msgid ""
"Some controls are live regions - that is, a control whose content denotes "
"live text, such as progress of something, alerts and so on. Because of odd "
"live region change event implementations, older NVDA releases does not "
"support this event natively, but NVDA 2017.3 and later includes a trivial "
"implementation where NVDA will announce the live region text i.e. object "
"name."
msgstr ""

#: ..\python_docs\w10addoninternals.py:127
msgid ""
"The Windows App Objects goes one step further by recording instances of this "
"event and providing workarounds for specific cases. These include announcing "
"correct text for Edge alerts (see below), preventing repeat announcements in "
"some apps and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:128
msgid "#### Recognizing various dialogs"
msgstr ""

#: ..\python_docs\w10addoninternals.py:129
msgid ""
"Despite not being identified as such, some windows are actually dialogs. "
"These include pop-up dialog for uninstaling apps, various dialogs found in "
"Settings app and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:130
msgid ""
"In old add-on releases, NVDA would consult a list of known dialog class "
"names in hopes of catching a dialog. In newer releases, especially if run on "
"Windows 10 1809 and later, UIA IsDialog property is used to catch dialog "
"elements. Once dialogs are recognized, NVDA will read contents of these "
"dialogs automatically when they appear. This has been simplified in NVDA "
"2018.3 as NVDA itself will try its best to recognize more dialogs, including "
"those marked as a dialog via UIA in Windows 10 1809. However, there are "
"windows that are actually dialogs, so the add-on still ships with a list of "
"known dialog classes to be consulted by NVDA."
msgstr ""

#: ..\python_docs\w10addoninternals.py:131
msgid "#### Drag and drop events"
msgstr ""

#: ..\python_docs\w10addoninternals.py:132
msgid ""
"Some controls allow draggin and dropping items using keyboard commands. This "
"is used when rearranging Start menu tiles, moving Action Center items "
"around, and reordering virtual desktops in Windows 11. This is done by "
"pressing Alt+Shift+left or right arrow keys."
msgstr ""

#: ..\python_docs\w10addoninternals.py:133
msgid ""
"The controls listed above raise UIA drag and drop events, equivalent to "
"mouse drag/drop events. Up to six UIA events are defined to notify UIA "
"clients such as NVDA when drag or drop operation starts, is happening, or "
"items were dragged or dropped. Of these, NVDA listens to the following "
"events to announce new location of the just dragged item:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:134
msgid ""
"* Drag complete: raised by the item itself when it is dragged somewhere."
msgstr ""

#: ..\python_docs\w10addoninternals.py:135
msgid ""
"* Drop target dropped: a container such as a list notifies UIA clients if an "
"item inside it is dragged to a new position."
msgstr ""

#: ..\python_docs\w10addoninternals.py:136
msgid "## App modules for universal apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:137
msgid ""
"In addition to Windows App Objects global plugin, the add-on comes with app "
"modules designed to provide extra support for various universal apps "
"included in Windows 10 and later. These modules include enhancers and/or "
"fixers, broadly divided into five categories:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:138
msgid "1. Adding extra features."
msgstr ""

#: ..\python_docs\w10addoninternals.py:139
msgid "2. Supporting new technologies."
msgstr ""

#: ..\python_docs\w10addoninternals.py:140
msgid ""
"3. Announcing (or, more recently, suppressing extraneous announcement of) "
"information in various situations."
msgstr ""

#: ..\python_docs\w10addoninternals.py:141
msgid "4. Workarounds for UIA issues."
msgstr ""

#: ..\python_docs\w10addoninternals.py:142
msgid ""
"5. Respond to changes in apps, and in at least four occasions, adding "
"aliases due to renamed executable names."
msgstr ""

#: ..\python_docs\w10addoninternals.py:143
msgid "The modules and enhancers/fixers applied are:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:144
msgid "* Calculator: selectively announce calculator display."
msgstr ""

#: ..\python_docs\w10addoninternals.py:145
msgid "* Calendar: suppress read-only state announcement in various controls."
msgstr ""

#: ..\python_docs\w10addoninternals.py:146
msgid ""
"* Cortana/Start menu/Windows Search (classic Cortana): suppress double "
"announcement of suggestion result item in some cases, staying silent when "
"user is dictating to Cortana, handling bad UIA implementations."
msgstr ""

#: ..\python_docs\w10addoninternals.py:147
msgid "* Cortana/conversations (new Cortana): announcing Cortana's responses."
msgstr ""

#: ..\python_docs\w10addoninternals.py:148
msgid ""
"* Mail: table navigation commands in message list, suppress read-only "
"announcement in email content, app alias for hxmail.exe and hxoutlook.exe "
"(the latter for updates released in May 2017)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:149
msgid ""
"* Maps: play location coordinates for map items, suppress repeated live "
"region announcements, aliases to support old and new Maps releases (the old "
"alias, maps_windows, is gone)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:150
msgid ""
"* Microsoft Store: announce needed information when live region changed "
"event is fired by some controls, aliases to support old and new Store "
"versions (the old alias, winstore_mobile, is no more)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:151
msgid ""
"* Modern keyboard/text input host: support for emoji panel, dictation, "
"hardware input suggestions, pasting clipboard items (Version 1809), and "
"modern IME's, part of NVDA since 2018.3."
msgstr ""

#: ..\python_docs\w10addoninternals.py:152
msgid "* MSN Weather: use up or down arrow keys to read forecast information."
msgstr ""

#: ..\python_docs\w10addoninternals.py:153
msgid "* People: announcing first suggestion when looking for a contact."
msgstr ""

#: ..\python_docs\w10addoninternals.py:154
msgid ""
"* Settings: selectively announce various status information, provide correct "
"labels for certain controls."
msgstr ""

#: ..\python_docs\w10addoninternals.py:155
msgid "### Adding useful features in apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:156
msgid ""
"The following app modules add functionality unique to NVDA and/or commands "
"that are used to improve user experience when using apps:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:157
msgid ""
"* Maps (maps.py): when using object navigation to examine a map, a tone will "
"be played to indicate where things are located on the map. This is achieved "
"by defining a custom handler for `event_becomeNavigatorObject` that'll take "
"the coordinates of the object (in pixels) and play a tone, essentially "
"emulating mouse coordinate beeps in NVDA. The app module also allows users "
"to hear new locations when using street view to navigate the map, and this "
"is done through handlers for live region changed event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:158
msgid ""
"* Mail (hxoutlook.py): when focused on messages list, one can use table "
"navigation commands (Control+Alt+arrow keys) to review message headers. This "
"is possible thanks to two things: headers are child objects of the message "
"item, and because of this, `NVDAObjects.behaviors.RowWithFakeNavigation` "
"class can be employed to add this functionality."
msgstr ""

#: ..\python_docs\w10addoninternals.py:159
msgid ""
"* MSN Weather (microsoft_msn_weather.py): this app module, contributed by "
"Derek Riemer, allows users to use up and down arrow keys to read forecast "
"information, achieved by calling corresponding review cursor movement "
"commands to move by line."
msgstr ""

#: ..\python_docs\w10addoninternals.py:160
msgid "#### A note about modern keyboard"
msgstr ""

#: ..\python_docs\w10addoninternals.py:161
msgid ""
"Modern keyboard, sometimes called Composable Shell "
"(windowsinternal_composableshell_experiences_textinput_inputapp.py) and "
"nowadays called Text Input Host, is the name of the app that provides "
"various features, including emoji panel, dictation, hardware input "
"suggestions, listing items to be pasted from cloud clipboard and many other "
"input related features. This is not exactly an app, but more towards a "
"floating overlay, much akin to touch keyboard on touchscreen devices. "
"Powering these is a redesigned touch keyboard where XAML-based touch panel "
"(with its own process) is used."
msgstr ""

#: ..\python_docs\w10addoninternals.py:162
msgid ""
"In Windows 10 Insider Preview build 16215 and later, it is possible for "
"users to browse and select emojis to insert in an edit field. This is done "
"by pressing Windows+period (.) or Windows+semicolon (;). A floating panel of "
"emoji categories and emojis will appear. One can then use arrow keys to move "
"through emojis or Tab and Shift+Tab to cycle through categories. In build "
"16226, one can type emoji descriptions to narrow the emoji field."
msgstr ""

#: ..\python_docs\w10addoninternals.py:163
msgid ""
"In build 17666 and later, this panel has been redesigned. Instead of using "
"Tab key to move between categories, one would press Tab to move between "
"emoji grid and categories. In case of People category, pressing Tab will let "
"you move to skin tones list where you can use arrow keys to select a skin "
"tone, then press Tab to move to emoji grid."
msgstr ""

#: ..\python_docs\w10addoninternals.py:164
msgid ""
"Build 18305 and later brought another design change to this panel. In "
"addition to selecting emojis, it also hosts two new grand categories named "
"kaomoji (\"face characters\" in Japanese) and symbols. When one presses Tab, "
"one will eventually reach category list with three items: emoji, kaomoji, "
"and symbols. Just like selecting emoji categories, pressing Enter will "
"switch the panel among these modes."
msgstr ""

#: ..\python_docs\w10addoninternals.py:165
msgid ""
"Build 18963 renamed Modern Keyboard to Text Input Host, along with bringing "
"refined version of Input Method Editor (IME) for certain languages. For "
"languages such as Japanese, the modern IME hosted by Text Input Host is used."
msgstr ""

#: ..\python_docs\w10addoninternals.py:166
msgid ""
"Build 20206 brought redesigned modern keyboard. Emoji panel and clipboard "
"history were combined, along with searching for GIF's (animated images). "
"Instead of element selected event, notification event is used to announce "
"selected emoji and clipboard history item. It will not be until build 21296 "
"that the redesigned emoji panel became usable, and as things can change, "
"support for redesigned modern keyboard is not part of NVDA screen reader at "
"this time (support is provided through this add-on)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:167
msgid ""
"When this panel opens, a menu open event is fired by the emoji panel (File "
"Explorer in build 18305 and later), an event NVDA does not detect for "
"performance reasons. As items are selected, an item selected event "
"(notification event in build 21296 and later) is fired, to which NVDA "
"responds by walking the panel in a tree-like fashion in order to locate the "
"item selected. The actual announcement of emoji characters depends on "
"synthesizers; currently, recent SAPI5 and OneCore (aka SAPI Mobile) voices "
"and Espeak nG ships with definitions of emoji characters, expanded to cover "
"other synthesizers in NVDA 2018.4"
msgstr ""

#: ..\python_docs\w10addoninternals.py:168
msgid ""
"Similar to emoji panel (or expanded input panel in build 18305 and later), "
"in build 17025 and later, modern keyboard can also provide input "
"suggestions. This is done by checking a new option in Settings/Devices/"
"Typing, and activated when one presses up arrow while typing (only United "
"States English keyboard layout is supported). Just like emoji panel, a "
"floating window appears, and in this case, one can press left or right arrow "
"to navigate between suggestions and press Enter to accept the offered item."
msgstr ""

#: ..\python_docs\w10addoninternals.py:169
msgid ""
"The above mechanism for selecting input suggestions is also employed when "
"pasting items from cloud clipboard. In build 17666 and later, one can copy "
"text and small images to the clipboard to be pasted later, and Windows will "
"keep a history of items copied to the clipboard. When Windows+V is pressed, "
"a list of clipboard items will be displayed, and one can use left or right "
"arrows to select the desired item."
msgstr ""

#: ..\python_docs\w10addoninternals.py:170
msgid ""
"In NVDA 2018.3, support for all of these (modern keyboard features) plus "
"dictation window (also part of modern keyboard) have become part of NVDA, "
"with modern IME support coming with NVDA 2020.4. The add-on is still "
"required in order to support more recent panel redesigns (see above), in "
"particular redesigned emoji panel in build 21296."
msgstr ""

#: ..\python_docs\w10addoninternals.py:171
msgid "### What to announce, what not to announce"
msgstr ""

#: ..\python_docs\w10addoninternals.py:172
msgid ""
"It is sometimes helpful to let users know what's going on by announcing "
"various status information, while at other times it is equally important to "
"not announce extraneous messages. The former was the case for majority of "
"app modules below in the past, but since mid-2017, reverse is happening more "
"frequently."
msgstr ""

#: ..\python_docs\w10addoninternals.py:173
msgid ""
"The app modules (and for one in particular, more than an app module) in "
"question are:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:174
msgid ""
"* Calculator (calculator.py): while entering calculations, entered "
"expression will be announced via name change handler. Because this may "
"interfere with typed character announcement in NVDA, the calculator display "
"will be announced only when actual results appear or when the display is "
"cleared."
msgstr ""

#: ..\python_docs\w10addoninternals.py:175
msgid ""
"* People (peopleapp.py): NVDA will announce first suggestion when looking "
"for a contact. Unlike other search fields, there is no controller for event. "
"However, the suggestion raises item selected event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:176
msgid ""
"* Cortana (searchui.py)/new Start menu and Windows Search experience "
"(searchapp.py in Windows 10, searchhost.py in Windows 11): classic Cortana "
"uses name change events and specific Automation Id's to convey text "
"messages. Name change event is also employed when Cortana tries to "
"understand the text a user is dictating, which in old releases of the add-on "
"meant NVDA would announce gibberish, subsequently resolved in later add-on "
"releases. In recent Windows 10 releases, due to Windows Search redesign "
"(which also involve changing executable for Windows Search to searchapp), "
"search box content instead of result details is announced, or if results are "
"announced, they are announced twice."
msgstr ""

#: ..\python_docs\w10addoninternals.py:177
msgid ""
"* Cortana conversations (cortana.py): similar to classic Cortana, Cortana's "
"responses are announced."
msgstr ""

#: ..\python_docs\w10addoninternals.py:178
msgid ""
"* Settings (systemsettings.py): NVDA will announce messages such as Windows "
"Update notifications, and this is done through live region changed event "
"(name change event in older add-on releases)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:179
msgid ""
"* Microsoft Store (winstore_app.py): just like Settings app, status messages "
"are announced, this time dealing with product downloads such as apps and "
"multimedia content."
msgstr ""

#: ..\python_docs\w10addoninternals.py:180
msgid "### Hunting for UIA implementation issues"
msgstr ""

#: ..\python_docs\w10addoninternals.py:181
msgid ""
"As noted above, some controls ship with odd or bad UIA implementations, and "
"universal apps are no exception (at least for app modules included with the "
"add-on). Because of this, the following app modules (and in case of two, "
"taken care of by Windows App Objects global plugin itself) include "
"workarounds for various UIA problems:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:182
msgid ""
"* Calendar (hxcalendarappimm.py) and Mail (hxoutlook.py): some edit fields, "
"such as appointment title and others are shown as read-only when they are "
"not, and removing this state from states set for these controls resolved "
"this problem."
msgstr ""

#: ..\python_docs\w10addoninternals.py:183
msgid ""
"* Cortana: some search suggestions expose same text for name and "
"description, which results in repeats for suggestion result text. This was "
"corrected by comparing name and description and nullifying the description "
"(obj.description = None). This workaround is no longer applicable due to "
"Windows Search redesign in Version 1903. Also, when opening Sets version of "
"Cortana search box (builds 17666 and 17692), wrong controller for event is "
"fired, which prevents NVDA from announcing suggestions, and this has been "
"corrected."
msgstr ""

#: ..\python_docs\w10addoninternals.py:184
msgid ""
"* Maps: despite no changes to the app, live region changed event is fired by "
"map title control, so NVDA includes a way to suppress repetitions."
msgstr ""

#: ..\python_docs\w10addoninternals.py:185
msgid ""
"* Settings and Store: for some controls (such as when downloading content "
"from Store), a specific status control fires live region changed event. "
"Unfortunately, the text for them are generic (for example, \"downloading "
"some percent\" as opposed to announcing the product one is downloading), "
"thus NVDA will locate information such as product names when this happens to "
"make this easier to follow. Also, in Settings app, some controls in older "
"versions of this app have no label, thus NVDA is told to look for labels to "
"traversing sibling (next/previous) objects, and in case of certain Windows "
"10 1809 installations, the correct label is the name of the first child."
msgstr ""

#: ..\python_docs\w10addoninternals.py:186
msgid "### A tale on app module and executable names"
msgstr ""

#: ..\python_docs\w10addoninternals.py:187
msgid ""
"One of the side-effects of continuous delivery is appearance of "
"unanticipated changes. This is more so when a workaround for an app broke "
"simply because the name of the executable or the app has changed. In "
"addition, some apps shipped with an executable whose name broke Python's "
"module name and import routines."
msgstr ""

#: ..\python_docs\w10addoninternals.py:188
msgid "The specific issues encountered were:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:189
msgid ""
"* Mail and Calendar, Maps, Modern Keyboard, Start menu, Windows Search and "
"Store: executable names have changed throughout development of Windows 10 "
"and later. For example, in May 2017, workarounds in place for Mail app broke "
"when Microsoft renamed hxmail to hxoutlook, and in July 2019, Modern "
"Keyboard was renamed to textinputhost. Windows 11 is no exception, bringing "
"with it renamed Windows Search executable (searchhost). Due to this, "
"aliasing (a new app module importing everything from an old version) is "
"common."
msgstr ""

#: ..\python_docs\w10addoninternals.py:190
msgid ""
"* MSN Weather, Store, modern keyboard and others: some executable names have "
"a dot (.) in the middle, which breaks app module import routines. This is "
"countered by replacing dots with underscores (_). For example, for Store, "
"the actual executable name is winstore.app.exe, while the app module for "
"this app is named winstore_app.py. This fix is now part of recent NVDA "
"releases."
msgstr ""

#: ..\python_docs\w10addoninternals.py:191
msgid "## Few remarks"
msgstr ""

#: ..\python_docs\w10addoninternals.py:192
msgid "### UIA performance"
msgstr ""

#: ..\python_docs\w10addoninternals.py:193
msgid ""
"Numerous issues were filed on NVDA's GitHub page regarding UIA performnace "
"issues. These include issues in early days of Edge support where navigating "
"the document was slow (resolved in NVDA 2017.2), list view issues in File "
"Explorer while using a program with high CPU usage (GoldWave, for example, "
"resolved in NVDA 2018.4) and so on. While some are specific to NVDA, others "
"are reproducible while using Narrator, hence NV Access and Microsoft are "
"actively collaborating on identifying and writing fixes for performance and "
"control implementation problems (such as some of the ones listed above)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:194
msgid ""
"### Narrator is the new reference in screen reading in Windows 10 (and "
"later) and universal apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:195
msgid ""
"Until a few years ago, any screen reader wishing to support an app or add "
"features would look up to JAWS for Windows for guidance. This is no longer "
"the case with Windows 10 (and later) and universal apps, as Narrator "
"provides a useful yardstick (at least a base implementation other screen "
"reader vendors should respond to) when it comes to reading text on screen, "
"feature set for supporting universal apps, and investigate UIA issues. Some "
"of the features discussed above, such as search suggestion notification, "
"were inspired by Narrator's handling of various UIA events, and because "
"Narrator reads what is told to read, NVDA ships with workarounds for odd UIA "
"implementations to get around some poblems."
msgstr ""

#: ..\python_docs\w10addoninternals.py:196
msgid "### Add-on development and testing"
msgstr ""

#: ..\python_docs\w10addoninternals.py:197
msgid ""
"The add-on employs iterative development cycle where features are "
"continuously refined. Refinements can be driven by user feedback, changes "
"from Windows Insider Preview builds and apps, or changes were made to NVDA "
"that requires the add-on to support old and new code paths. Because the add-"
"on employs continuous delivery model (stable versions can be released at any "
"time), a stable version may contain features in various stages of "
"development."
msgstr ""

#: ..\python_docs\w10addoninternals.py:198
msgid ""
"As part of add-on development and testing, one activity I perform is keep up "
"with changes in Insider Preview builds, specifically changes in dev channel "
"(formerly Windows Insider fast ring). Whenever new builds are released, I "
"analyze new features described in release notes and see if user-visible "
"changes are present. If so, I test new features and see how usable the "
"feature is while using Narrator and NVDA. If I notice things are not working "
"with NVDA, I perform debugging procedures such as analyzing UIA events to "
"figure out how NVDA can better support a feature. This is done repeatedly "
"until I'm satisfied that NVDA supports a given feature well. Examples of "
"features that followed this route include emoji panel support, changes to "
"Settings app interface, and reporting virtual desktop reordering operation. "
"Note that even if a build does not come with spectacular changes, I still "
"use it to look for small changes and fixes."
msgstr ""

#: ..\python_docs\w10addoninternals.py:199
msgid ""
"Because Windows ships with apps that can change without notice, apps can "
"become another source of feature development. To support app changes, I note "
"down differences between app releases and come up with a plan to support old "
"and new releases. This becomes important if executables were renamed, in "
"which case app aliasing is used to support old and new app releases. "
"Examples include Mail and Calendar, modern keyboard, and Cortana."
msgstr ""

#: ..\python_docs\w10addoninternals.py:200
msgid ""
"Besides Windows and app changes, changes to NVDA such as incorporating "
"support for a new Windows feature (scenario 1) or changes to apps (scenario "
"2) can contribute to feature changes. As described below, some add-on "
"features became part of NVDA. If NV Access and contributors plan to "
"incorporate features from this add-on, I assume it has been integrated and I "
"edit the add-on source code to support old (not integrated) and new "
"(integrated) code paths. These rely on presence of specific module "
"attributes and do my best to let the add-on emulate features being reviewed. "
"Once a version of NVDA with new features is released, the add-on is told to "
"drop support for old NVDA versions with just integrated features not "
"present. This route was taken to incorporate features such as emoji panel, "
"search suggestions, Calculator support, and handling notification event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:201
msgid ""
"From time to time, these changes are released as development snapshots. This "
"is so that I can gather feedback from testers in hopes of refining changes. "
"At least once a month, changes in development snapshots are sent to a branch "
"used to prepare stable add-on releases, and a stable version is tagged a few "
"days later once final changes such as latest localizations are integrated. "
"The cycle then repeats."
msgstr ""

#: ..\python_docs\w10addoninternals.py:202
msgid "#### Changes in 2021"
msgstr ""

#: ..\python_docs\w10addoninternals.py:203
msgid ""
"One big change in 2021 is milestone-based development. It is still an "
"iterative development process, but I decided to use a quarterly development "
"cycle to isolate long-running features and to focus on other priorities. "
"This is a result of life changes that will reduce add-on development "
"commitments - to reduce focus on add-on maintenance in favor of early "
"planning and initial development, focus on other priorities, and refine the "
"add-on when I have time."
msgstr ""

#: ..\python_docs\w10addoninternals.py:204
msgid ""
"The quarterly milestone process derives from Windows development milestones. "
"As part of Windows development, Microsoft divides development phases into "
"semesters. Each development semester is named according to a chemical "
"element, specifically named after elements in the periodic table. This is "
"done for Microsoft Azure, but also was adopted for Windows development "
"recently and is designed to set milestones for long-running features. Near "
"the end of a semester, Microsoft chooses features that will be part of the "
"next release (either a full build or an enablement package) and creates a "
"maintenance branch from these features, with others pushed to the next "
"development semester for further refinements."
msgstr ""

#: ..\python_docs\w10addoninternals.py:205
msgid ""
"The quarterly development cycle for Windows App Essentials (adopted in June "
"2021) is named after Windows development semesters, divided into two "
"quarters or halves. For example, as of August 2021, the latest development "
"cycle inside Microsoft is \"nickel\", and the internal development cycle for "
"Windows App Essentials is \"nickel1\", scheduled for completion in "
"September. Each quarter is dedicated to one or more long-running features or "
"themes - for example, \"nickel1\" is dedicated to refining Windows 11 "
"support and preparing the add-on for control types refactor from NVDA "
"2021.2. I tend to do a code sprint early and refine code as time goes on - "
"as of August 2021, NVDA 2021.2 changes are housed inside a dedicated "
"\"prerelease\" branch, which will become part of 'nickel1\" proper once "
"2021.2 beta 1 is released and refined afterwards. Add-on feature evaluation "
"such as removing redundant code paths is the tentative theme for \"nickel2\" "
"which will run from September to December 2021, but as of August 2021, it is "
"low in my priority compared to more immediate concerns, namely graduate "
"school."
msgstr ""

#: ..\python_docs\w10addoninternals.py:206
msgid ""
"In between milestone releases, a dedicated branch is used to backport key "
"changes from the upcoming quarter. These are initially named after a "
"chemical compound or an alloy involving the base element which is the base "
"for the backport branch. For example, a branch named \"alnico\" (an alloy of "
"aluminum, nickel, and cobalt) is used to backport key changes from "
"\"nickel2\" to \"nickel1\" branch. These serve not only as maintenance "
"branches, but also introduce features that will be part of the next "
"milestone release provided that they do not involve massive rewrites such as "
"requiring newer NVDA or Windows releases. Eventually the \"alloy\" branches "
"are merged into milestone branches such as \"nickel1\"."
msgstr ""

#: ..\python_docs\w10addoninternals.py:207
msgid ""
"The whole point of development milestone/quarter process is to remind me of "
"life priorities. In the past, I was able to dedicate more time to add-on "
"development and maintenance. As time went on, it became important to think "
"about my immediate life concerns such as focusing more on advanced "
"education. Besides, I have been looking for a way to reimagine add-on "
"development cycles, so in June 2021, I decided to switch stable version "
"development from more of a continuous delivery to quarterly releases with "
"periodic backports, similar how recent features such as News and Interests "
"(part of widgets in Windows 11) were developed (continuous development, "
"followed by backports to stable releases). This change should have minimal "
"impact on development snapshots, which are released continuously as add-on "
"code changes. Overall, milestone development is still an iterative process "
"just like previous releases."
msgstr ""

#: ..\python_docs\w10addoninternals.py:208
msgid "### Integrating features from this add-on to NVDA screen reader"
msgstr ""

#: ..\python_docs\w10addoninternals.py:209
msgid ""
"As noted above, some add-on features are being (or have been) integrated "
"into NVDA. These include search suggestion notification, modern keyboard "
"support, live region changed event tracking and announcement and so on. As "
"described above, these changes can come from Windows, apps, and other "
"sources such as internal NVDA changes."
msgstr ""

#: ..\python_docs\w10addoninternals.py:210
msgid ""
"Typically, when a feature from an add-on is integrated into NVDA, it goes "
"through a typical issue-prototype-review-test-documentation cycle. To "
"illustrate this, let us go through steps involved in getting search "
"suggestions into NVDA:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:211
msgid "1. Issue: an issue regarding search suggestions was filed in 2016."
msgstr ""

#: ..\python_docs\w10addoninternals.py:212
msgid ""
"2. Prototype: support for search suggestions was included in the add-on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:213
msgid ""
"3. Review: while transforming the prototype into an NVDA pull request, I and "
"NV Access went through a review phase where implementation detail were "
"discussed and test cases written."
msgstr ""

#: ..\python_docs\w10addoninternals.py:214
msgid ""
"4. Test: in 2017, search suggestion feature made its debut in an NVDA next "
"snapshod. This resulted in feedback from users regarding braille support, "
"sounds and others. After several weeks, this feature was made available to "
"master snapshot users, thus ready for NVDA 2017.3."
msgstr ""

#: ..\python_docs\w10addoninternals.py:215
msgid ""
"5. Documentation: the search suggestion feature was documented in the user "
"guide. Discussion of this feature in this article is a special case of "
"documentation step."
msgstr ""

#: ..\python_docs\w10addoninternals.py:216
msgid ""
"After search suggestions support became part of NVDA, I edited the add-on to "
"assume this feature was always available."
msgstr ""

#: ..\python_docs\w10addoninternals.py:217
msgid ""
"Due to changes to release process in 2018, testing occurs via pull requests."
msgstr ""

#: ..\python_docs\w10addoninternals.py:218
msgid ""
"In addition, when a feature from an add-on is under consideration for "
"inclusion in NVDA, I modify the add-on source code to make it compliant with "
"NVDA source code guidelines, such as commenting style, copyright header and "
"so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:219
msgid "### Giving feedback to app developers"
msgstr ""

#: ..\python_docs\w10addoninternals.py:220
msgid ""
"Feedback drives Windows and universal apps. one of the reasons for "
"instituting Windows Insider Program, as noted by Microsoft and others, is to "
"gather feedback from millions of users in hopes of making Windows better in "
"the long run. As such, sending feedback regarding Windows and preinstalled "
"universal apps, as well as third-party apps is crucial at the age of "
"feedback-driven development."
msgstr ""

#: ..\python_docs\w10addoninternals.py:221
msgid "Here are some tips regarding sending feedback to app writers:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:222
msgid ""
"1. Embrace: have willingness to embrace (use and test) the app in question."
msgstr ""

#: ..\python_docs\w10addoninternals.py:223
msgid ""
"2. Document: if something happens, document what happened, steps to "
"reproduce, and possible workarounds."
msgstr ""

#: ..\python_docs\w10addoninternals.py:224
msgid ""
"3. Send: send feedback to developers (Feedback Hub, contacting developers of "
"third-party universal apps, screen reader vendors and so on)."
msgstr ""

#: ..\python_docs\w10addoninternals.py:225
msgid ""
"4. Follow-up: follow-up with developers if they have questions for you or "
"you want to know what's going on with your feedback."
msgstr ""

#: ..\python_docs\w10addoninternals.py:226
msgid "### Accessibility best practices for universal apps"
msgstr ""

#: ..\python_docs\w10addoninternals.py:227
msgid ""
"As a Windows Insider, a screen reader contributor and the author of a screen "
"reader add-on for Windows 10 and later and universal apps, I came across "
"numerous examples where apps were inaccessible at first, or usability was "
"overshadowed by issues when working with controls, navigation and so on."
msgstr ""

#: ..\python_docs\w10addoninternals.py:228
msgid ""
"Here are some tips in hopes of making universal apps truly universally "
"accessible and usable:"
msgstr ""

#: ..\python_docs\w10addoninternals.py:229
msgid ""
"* Listen to feedback, especially feedback coming from users with "
"disabilities such as screen reader users."
msgstr ""

#: ..\python_docs\w10addoninternals.py:230
msgid ""
"* Do not put accessibility as an afterthought, nor something you want to "
"work in the future (say, version 3). Proactive accessibility and "
"investigations into issues is something app developers should learn as they "
"develop apps."
msgstr ""

#: ..\python_docs\w10addoninternals.py:231
msgid ""
"* Test with screen readers and other assistive technologies: one way to "
"validate accessibility issues raised by users with disabilities is using "
"assistive technologies in real life. Use facilities offered by screen "
"readers such as Python console in NVDA, developer mode in Narator and so on "
"in hopes of locating where the root of the issue lies."
msgstr ""

#: ..\python_docs\w10addoninternals.py:232
msgid ""
"* Try using keyboards and other input methods offered by various assistive "
"technologies: touchscreen isn't the only input method used in universal "
"apps. Many screen reader users use a keyboard to interact with apps, and "
"some use touchscreen gestures offered by screen readers to navigate an app "
"and respond to changes. Try using them to make sure app features are working "
"as advertised when using keyboards and other input methods."
msgstr ""

#: ..\python_docs\w10addoninternals.py:233
msgid ""
"* Use useful labels: in case the control has no label as reported by screen "
"readers, be sure to provide labels. A good historical case is Windows "
"Defender Security Center where there was no label for various buttons in "
"2016, which was fixed in 2017 with Creators Update. Also, avoid generic XAML "
"labels such as someclass.someotherclass.such (especialy lists and list "
"items), as it does not provide an accurate picture as to where one is "
"located. A classic case is Feedback Hub app where generic labels for lists "
"were presnet in older versions, subsequently fixed in recent updates."
msgstr ""

#: ..\python_docs\w10addoninternals.py:234
msgid ""
"* Raise appropriate UIA events: screen readers listen to UIA events to "
"detect what's happening with apps. For example, if there's a need to anounce "
"suggestions, controller for event should be fired. An example is Store where "
"old releases did not raise controller for event when content suggestions "
"appeared, with recent versions raising this event."
msgstr ""

#: ..\python_docs\w10addoninternals.py:235
msgid "## Conclusion"
msgstr ""

#: ..\python_docs\w10addoninternals.py:236
msgid ""
"With the introduction of Windows 10 and Universal Windows Platform, a new "
"way of connecting users and developers has emerged: feedback-driven "
"development. This allows users to send feedback regarding features and bugs, "
"including that of accessibility feedback. Although accessibility of Windows "
"and universal apps were spotty at first, this situation is improving, driven "
"by Microsoft's commitment to accessibility, continued feedback, and "
"collaboration between Microsoft and assistive technology vendors. This trend "
"continues in Windows 11."
msgstr ""

#: ..\python_docs\w10addoninternals.py:237
msgid ""
"In terms of NVDA, what made usability of Windows 10 and later better was not "
"only changes made from within Windows and universal apps, but also proactive "
"investigations into making sure NVDA users have a great time with Windows. "
"Windows App Essentials add-on is part of that work, as discussed throughout "
"this article when talking about UIA workarounds, improving support for apps "
"and controls and others. But there are limits as to what the add-on can do, "
"as the other puzzle pieces are willingness from developers (especially third-"
"party UWP developers) to embrace accessibility as a pillar in their apps, "
"and willingness from users to send accessibility feedback. Although some add-"
"on features are being integrated into NVDA, there are some areas where the "
"add-on is needed (especially when supporting features introduced in Windows "
"Insider Preview builds), and until the day accessibility is everywhere in "
"modern Windows ecosystem and universal apps, the add-on will still be here."
msgstr ""

#: ..\python_docs\w10addoninternals.py:238
msgid "## References"
msgstr ""

#: ..\python_docs\w10addoninternals.py:239
msgid "* Windows 10 (Wikipedia): https://en.wikipedia.org/wiki/Windows_10"
msgstr ""

#: ..\python_docs\w10addoninternals.py:240
msgid "* Windows 11 (Wikipedia): https://en.wikipedia.org/wiki/Windows_11"
msgstr ""

#: ..\python_docs\w10addoninternals.py:241
msgid "* Windows Insider Program (Microsoft): https://insider.windows.com/"
msgstr ""

#: ..\python_docs\w10addoninternals.py:242
msgid ""
"* Windows as a Service Overview (Microsoft Docs): https://docs.microsoft.com/"
"en-us/windows/deployment/update/waas-overview"
msgstr ""

#: ..\python_docs\w10addoninternals.py:243
msgid ""
"* What's a Universal Windows Platform (UWP) App (Microsoft UWP App "
"Developer): https://docs.microsoft.com/en-us/windows/uwp/get-started/whats-a-"
"uwp"
msgstr ""

#: ..\python_docs\w10addoninternals.py:244
msgid ""
"* UI Automation Overview (MSDN): https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ee684076(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:245
msgid ""
"* MSAA overview (MSDN): https://msdn.microsoft.com/en-us/library/windows/"
"desktop/dd373592(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:246
msgid ""
"* UI Automation and Active Accessibility (MSDN): https://msdn.microsoft.com/"
"en-us/library/windows/desktop/ee671585(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:247
msgid ""
"* Component Object Model Overview (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ms680573(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:248
msgid ""
"* IUIAutomationElement interface (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671425(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:249
msgid ""
"* cachedAutomationId (MSDN): https://msdn.microsoft.com/en-us/library/"
"windows/desktop/ee671434(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:250
msgid ""
"* UI Automation Properties Overview (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671594(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:251
msgid ""
"* UI Automation Events Overview (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671221(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:252
msgid ""
"* UI Automation Event Identifiers (MSDN): https://msdn.microsoft.com/en-us/"
"library/windows/desktop/ee671223(v=vs.85).aspx"
msgstr ""

#: ..\python_docs\w10addoninternals.py:253
msgid ""
"* Auto-suggest accessibility, part of Accessible Text Requirements "
"(Microsoft Docs): https://docs.microsoft.com/en-us/windows/uwp/accessibility/"
"accessible-text-requirements"
msgstr ""

#: ..\python_docs\w10addoninternals.py:254
msgid ""
"* IUIAutomationNotificationEventHandler::HandleNotificationEvent (MSDN): "
"https://msdn.microsoft.com/en-us/library/windows/desktop/mt814955(v=vs.85)."
"aspx"
msgstr ""
