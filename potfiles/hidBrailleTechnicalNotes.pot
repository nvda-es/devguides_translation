# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-04 17:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\python_docs\hidBrailleTechnicalNotes.py:3
msgid "HID Braille Developer Notes"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:4
msgid "## HID (Human Interface Device)"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:5
msgid ""
"The HID specification standardizes the low-level communication with a USB or "
"Bluetooth device, plus the types of input and output controls on the device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:6
msgid ""
"Example devices being keyboards, mice, screens, and now Braille Displays."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:7
msgid "### Definitions"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:8
msgid ""
"In this document, device means a piece of hardware that connects to a "
"computer via a connection such as USB or Bluetooth."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:9
msgid ""
"The device may contain one or more Controls for a human to physically "
"communicate with the device, such as buttons or keys for input, or LEDs or "
"cells of raised Braille pins for output."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:10
msgid ""
"There are also several terms in HID which may be confusing to those just "
"beginning to familiarise themselves with this technology."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:11
msgid "* Descriptors"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:12
msgid "* Usage pages"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:13
msgid "* Usages"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:14
msgid "* Reports"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:15
msgid "* Collections"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:16
msgid "* Caps (Capabilities)"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:17
msgid "These terms are described in the subsections below. "
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:18
msgid "#### HID descriptors"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:19
msgid ""
"At connection time, a HID device must expose a block of data over the "
"connection called a descriptor."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:20
msgid ""
"This is machine-readable data that describes all the input and output "
"controls supported by the device, including their type and number of "
"elements etc."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:21
msgid ""
"It also defines the size of data blocks (or reports) that can be written to "
"and read from the device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:22
msgid ""
"A descriptor can be read by a human (either as raw values or with some kind "
"of decompiler) but from the point of view of Windows, the descriptor is "
"opaque, and other more high-level Windows APIs should be used to communicate "
"with the device, which will do all the type checking for you."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:23
msgid "#### HID Usage Pages"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:24
msgid ""
"The HID specification groups controls into categories which it refers to as "
"pages."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:25
msgid ""
"Each page has its own unique number, and is referred to as a usage Page."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:26
msgid ""
"A Usage Page may represent a specific device type such as a keyboard, "
"joystick or Braille display, or may be more general such as a generic "
"Buttons page."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:27
msgid "#### HID Usages"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:28
msgid "A Usage represents a type of control (key, button, braille cell, LED)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:29
msgid ""
"The Usage is assigned its own constant name, and a unique number relative to "
"the particular Usage Page in the standard it is found on."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:30
msgid ""
"A Usage defines information about the control such as whether it is a "
"boolean button, static or dynamic value, flag, or selector (1 of many)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:31
msgid ""
"For further information on what these types (sel, dv, nary etc) actually "
"mean, refer to the first few pages of the HID Usage Tables 1.22 "
"specification referenced at the bottom of this document."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:32
msgid ""
"The specification itself may or may not define other aspects of the data "
"type such as its size or number of elements, though the HID descriptor the "
"device makes available at runtime must contain all this information."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:33
msgid ""
"Usage IDs are also used to uniquely identify collections of controls or "
"values."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:34
msgid "#### HID reports"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:35
msgid ""
"A report is a block of data that is read from or written to the HID device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:36
msgid ""
"It has a size specified by the HID descriptor, and contains a report ID as "
"the first byte."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:37
msgid ""
"On Windows, when fetching a new report with `ReadFile`, the report ID is "
"automatically written into the data block by Windows, and most likely never "
"needs to be known by the developer user as other high-level Windows APIs "
"that can extract data from reports will use this report ID byte internally."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:38
msgid ""
"When writing reports with `WriteFile` however, the developer user must set "
"the appropriate report ID byte in the report specific to the value/s the "
"developer user includes in the report."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:39
msgid ""
"On Windows the report ID can be found in the `HIDP_VALUE_CAPS` (value "
"capabilities) structure for that value, fetched from the HID descriptor with "
"`HidP_GetValueCaps`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:40
msgid "#### HID collections"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:41
msgid "HID controls are grouped into collections."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:42
msgid ""
"Some examples might be all the keys on a keyboard, or all the cells in a "
"line of Braille. "
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:43
msgid ""
"Each defined collection has a Usage Page and a Usage ID so it can be "
"uniquely identified."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:44
msgid ""
"All HID devices have a top-level collection, which is the main point of "
"entry for gathering information about the device, including fetching other "
"collections."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:45
msgid "These other collections are known as Linked collections."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:46
msgid "#### Caps"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:47
msgid ""
"A shortening of the word Capabilities used by particular Windows APIs and "
"structures for HID."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:48
msgid "E.g. `HidP_GetCaps` gets the capabilities of the HID device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:49
msgid ""
"These include things like the number of input buttons or output values on "
"the device, the size of reports, and the Usage and Usage Page for the device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:50
msgid ""
"Similarly `HidP_GetButtonCaps` gets the capabilities of all buttons on the "
"device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:51
msgid ""
"Capabilities of buttons and values include such things as their Usage and "
"Usage Page, whether they represent a range of Usages, and whether they have "
"a NULL state etc."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:52
#: ..\python_docs\hidBrailleTechnicalNotes.py:77
#: ..\python_docs\hidBrailleTechnicalNotes.py:86
msgid " "
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:53
msgid "### General pattern for supporting HID on Windows"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:54
msgid "#### Enumerating HID devices"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:55
msgid "* Fetch the class guid for HID devices with `HidD_GetHidGuid`"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:56
msgid ""
"* Fetch the device information set for the local machine with "
"`SetupDiGetClassDevs`, specifying the HID class guid as the class guid."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:57
msgid ""
" * Keep calling `SetupDiEnumDeviceInterfaces`, increasing memberIndex each "
"time, to enumerate over all available devices fetching a "
"`SP_DEVICE_INTERFACE_DATA` structure for each, until the function returns "
"false, which means there are no more devices left to enumerate."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:58
msgid ""
"* For each data structure fetched, call `SetupDiGetDeviceInterfaceDetail` to "
"get a `SP_DEVICE_INTERFACE_DETAIL_DATA` structure."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:59
msgid ""
"* The `SP_DEVICE_INTERFACE_DETAIL_DATA` structure's devicePath member  is "
"the path that should be used to open the device for reading / writing later."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:60
msgid ""
"* Some other properties such as hardwareID may be required to further "
"identify the device, these can be fetched with "
"`SetupDiGetDeviceRegistryProperty`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:61
msgid ""
"* For an implementation see `listHidDevices` in NVDA's source/hwPortUtils.py "
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:62
msgid "#### Opening a HID device"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:63
msgid ""
"* Use `CreateFile` to open a HID device, giving it the DevicePath as the "
"file path."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:64
msgid " Note overlapped IO is possible; See `CreateFile` documentation."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:65
msgid ""
" * If this device may need to be opened by other processes at the same time, "
"you will want to specify `FILE_SHARE_READ | FILE_SHARE_WRITE` as well."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:66
msgid ""
"* Once the open device handle is no longer needed, it can be closed with "
"`CloseHandle`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:67
msgid ""
"* For an implementation see the `Hid` class in NVDA's source/hwIo/base.py "
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:68
msgid "#### Fetching device attributes"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:69
msgid ""
"* To fetch info such as vendorID, productID and versionNumber, call "
"`HidD_GetAttributes` on the open device handle."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:70
msgid ""
"* To fetch the manufacturer string, use `HidD_GetManufacturerString` giving "
"the open device handle."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:71
msgid ""
"* To fetch the product string, use `HidD_GetProductString` giving the open "
"device handle."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:72
msgid "#### Fetching the HID descriptor"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:73
msgid ""
"Fetching device capabilities, getting data from reports and setting data in "
"reports all requires the device's HID descriptor."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:74
msgid ""
"Windows represents the HID descriptor as an opaque value referred to as the "
"preparsed data."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:75
msgid ""
"* Fetch the device's preparsed data with `HidD_GetPreparsedData`, giving it "
"the open device handle."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:76
msgid ""
"Note this must be freed once it is no longer needed with "
"`HidD_FreePreparsedData`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:78
msgid "#### Fetching device capabilities"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:79
msgid ""
"* To find out a top-level collection's Usage Page, Usage, number of input "
"and output values, and report sizes, fetch a `HIDP_CAPS` structure for the "
"device with `HidP_GetCaps`, giving the open device handle and the preparsed "
"data."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:80
msgid "#### Fetching value / button capabilities"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:81
msgid ""
"type information of input buttons and values and output values on a device "
"(such as their Usage ID, size and number of items) can be found out through "
"a `HIDP_VALUE_CAPS` structure for each."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:82
msgid ""
"An array of these structures can be fetched with `HidP_GetValueCaps` for "
"input or output values, and `HidP_GetButtonCaps` for buttons."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:83
msgid ""
"Sometimes a `HIDP_VALUE_CAPS` structure can represent a range of buttons or "
"values, where minimum and maximum Usage IDs and Data indices are exposed, "
"rather than a specific value."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:84
msgid ""
"Examples of these might be the way that Braille dot input keys are exposed."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:85
msgid ""
"There is only one `HIDP_VALUE_CAPS` structure, covering values from dot1 to "
"dot8."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:87
msgid "#### Reading data from the device"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:88
msgid ""
"* Use `ReadFile` to read the next available input report from the device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:89
msgid ""
"The size of data to read in bytes must be equal to the "
"`InputReportByteLength` member of the device's `HIDP_CAPS` structure."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:90
msgid ""
" * Use functions such as `HidP_GetData` and `HidP_GetUsages` to extract the "
"current value of buttons and other values set in the report."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:91
msgid "#### Writing data to the device"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:92
msgid "To set the value of particular controls on the device:"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:93
msgid ""
"* Create an output report by allocating a block of memory of size "
"OutputReportByteLength from the device's HIDP_CAPS structure, using "
"something like `malloc`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:94
msgid ""
"* Set the report ID (the first byte) to the report ID found in the "
"`HIDP_VALUE_CAPS` structure for the value/s you want to set."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:95
msgid ""
"This obviously means you can only set values who share the same report ID in "
"a single report."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:96
msgid ""
"* Set the data for the values using functions such as `HidP_SetUsageValue` "
"or `HidP_SetUsageValuesArray`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:97
msgid "* Send the report to the device using `WriteFile`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:98
msgid ""
"The size in bytes sent must be equal to the `OutputReportByteLength` of the "
"device's `HIDP_CAPS` structure."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:99
msgid "## HID Braille specification"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:100
msgid "### Background"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:101
msgid ""
"Braille Display devices allow being controlled by Screen Readers using a "
"variety of connections such as Serial, USB and Bluetooth."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:102
msgid ""
"The protocols used over these channels have traditionally been Braille "
"Display manufacturer specific."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:103
msgid ""
"This has meant that in order for a Screen Reader to support a particular "
"Braille display, it must have specific logic in the Screen Reader that knows "
"how to speak the required device-specific protocol."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:104
msgid ""
"Further to this, On Windows at least, an OS-level driver provided by the "
"Braille Display manufacturer must also be installed by the user in order for "
"the computer to detect and communicate with the device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:105
msgid ""
"With the introduction of the HID (Human Interface Device) standard for USB "
"(and later Bluetooth), it became possible to remove the need for the "
"required OS-level device driver on Windows if the Braille Display "
"manufacturer exposed the device as a custom HID device, however the Screen "
"Reader still needed device-specific code, as being custom HID only "
"simplified the low-level bytes communication, but did not standardise what "
"those bytes actually meant."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:106
msgid ""
"In 2018, The HID specification was extended to define the concept of a "
"Braille Display device, including setting of braille cells, and the "
"standardizing of common buttons found on Braille displays such as routing "
"keys, Braille dot input keys, braille space and panning keys."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:107
msgid ""
"A new Usage Page was added to the HID specification: HID_USAGE_PAGE_BRAILLE "
"(0x41)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:108
msgid "This page contains new Usage IDs such as:"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:109
msgid ""
"* BRAILLE_DISPLAY (0x1): the usage ID for the HID device's top-level "
"collection."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:110
msgid "* Collections such as BRAILLE_ROW (for containing braille cells)"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:111
msgid ""
"* 8_dot_BRAILLE_CELL (0x3) and 6_dot_braille_cell (0x4), which is an output "
"value that represents a physical braille cell on a the device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:112
msgid ""
"* BRAILLE_KEYBOARD_DOT_1 through BRAILLE_KEYBOARD_DOT_8: the Braille dot "
"input buttons for typing braille characters."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:113
msgid "* left, right and centre braille space keys (for typing a space)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:114
msgid "* Joystick and dpad buttons"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:115
msgid "* Panning buttons for scrolling the braille display."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:116
msgid ""
"details for the number of collections, usages, and reports must be queried "
"at run time and may vary between devices and even with device firmware "
"updates."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:117
msgid "### Pattern for talking with a HID braille device"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:118
msgid "#### Initialization"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:119
msgid ""
"* Follow the general instructions for enumerating and opening a HID device,  "
"plus fetching device and value capabilities as mentioned earlier in this "
"document."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:120
msgid ""
"* Ensure the Hid device is truly a Braille display by checking that the "
"`HIDP_CAPS.UsagePage` of the HID device's top-level collection is set to "
"`HID_USAGE_PAGE_BRAILLE` (0x41)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:121
msgid ""
" * Find the correct output `HIDP_VALUE_CAPS` structure which represents the "
"array of braille cells."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:122
msgid "I.e."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:123
msgid "the Usage ID is either EIGHT_DOT_BRAILLE_CELL or six_dot_braille_cell."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:124
msgid ""
"The `ReportCount` member of this struct states the number of cells for the "
"device."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:125
msgid ""
"This structure should also be saved off as it is later needed when writing "
"braille to the display."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:126
msgid ""
"* Collect all the `HIDP_VALUE_CAPS` structures for input buttons / values "
"and store them in a mapping keyed by their `DataIndex` member (or a "
"calculated data index offset from the `DataIndexMin` member if the "
"`HIDP_VALUE_CAPS` represents a range of values)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:127
msgid ""
"* It may also be useful to store an index of each `HIDP_VALUE_CAPS` "
"structure relative to the first `HIDP_VALUE_CAPS` structure in the current "
"collection (I.e."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:128
msgid ""
"when the `LinkCollection` member last differed from the previous structure)."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:129
msgid "In other words, the index within its collection."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:130
msgid ""
"this is needed in some implementations to work out which routing key a value "
"represents, as the Usage ID for the value will be just ROUTING_KEY and the "
"collection will be one of the ROUTER_SET_* collection Usage IDs."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:131
msgid "#### Writing cells to the device"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:132
msgid ""
"* Create a HID output report (block of memory), setting the report ID (first "
"byte) to the value of the ReportID member of the Braille cell "
"`HIDP_VALUE_CAPS` structure found at construction time. "
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:133
msgid ""
"* Call `HidP_SetUsageValueArray` to place the data (braille cell dot "
"patterns) into the report at the appropriate place, Using the Usage ID and "
"collection number etc from the cell `HIDP_VALUE_CAPS` structure."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:134
msgid "* Send the report to the Braille display using `WriteFile`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:135
msgid ""
"The number of bytes written will be the value of `HIDP_CAPS."
"OutputReportByteLength`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:136
msgid "#### Receive input (key / button presses)"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:137
msgid ""
"* Read an input report of size `InputReportByteLength` with `ReadFile` (or "
"an overlapped IO callback)"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:138
msgid ""
" * `HidP_GetData` can be used to extract all `HIDP_DATA` structures from the "
"report."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:139
msgid "these represent the state of all input buttons and other controls."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:140
msgid ""
"* Using the `DataIndex` member of each retrieved data item, lookup the "
"original `HIDP_VALUE_CAPS` structure for that data index to find out its "
"Usage Page and Usage ID."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:141
msgid "This will denote the actual button pressed or changed value."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:142
msgid ""
"If you only need to find out what buttons are pressed, but not any further "
"data such as the actual set value or data index, you could call "
"`HidP_GetButtons`."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:143
msgid ""
"But this would not be useful for buttons such as routing keys as you need to "
"know specifically which routing key was pressed."
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:144
msgid "## References:"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:145
msgid ""
"* USB HID article on wikipedia: https://en.wikipedia.org/wiki/"
"USB_human_interface_device_class"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:146
msgid ""
"* Introduction to Human Interface Devices (HID), Windows Driver docs: "
"https://docs.microsoft.com/en-us/windows-hardware/drivers/hid/"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:147
msgid ""
"* Interpreting HID Reports, Windows driver docs: https://docs.microsoft.com/"
"en-us/windows-hardware/drivers/hid/interpreting-hid-reports"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:148
msgid ""
"* HID Usages, Windows driver docs: https://docs.microsoft.com/en-us/windows-"
"hardware/drivers/hid/hid-usages"
msgstr ""

#: ..\python_docs\hidBrailleTechnicalNotes.py:149
msgid ""
"* HID Usage Tables 1.22 (Contains HID Braille page): https://www.usb.org/"
"document-library/hid-usage-tables-122"
msgstr ""
