# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 09:10+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\python_docs\technicalDesignOverview.py:3
msgid "# Design Overview"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:4
msgid ""
"This article attempts to provide an overview of NVDA's technical design and "
"architecture."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:5
msgid "It is necessarily somewhat technical in nature."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:6
msgid ""
"You should have a reasonable knowledge of programming and object oriented "
"programming concepts in particular, as well as at least a basic knowledge of "
"Python, before attempting to understand NVDA's design "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:7
msgid ""
"Please see the code documentation for the relevant classes for more "
"information."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:8
msgid "## Terminology"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:9
msgid "### Abbreviations"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:10
msgid " * API: Application programming interface"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:11
msgid " * GUI: Graphical user interface"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:12
msgid "### Definitions"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:13
msgid " * Caret: The system cursor; i.e."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:14
msgid "the cursor generally moved when you use the normal cursor keys."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:15
msgid ""
" * Script: A function which is executed in response to input from the user "
"such  as key presses from the keyboard, manipulating braille display "
"controls and taps on touchscreens."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:16
msgid "Also known as a command."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:17
msgid ""
" * Widget: An individual component in a GUI with which a user can interact;"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:18
msgid " e.g. a button, an editable text field, a list box, etc."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:19
msgid "Also known as a control or object."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:20
msgid "## General"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:21
msgid "### Programming Languages"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:22
msgid ""
"NVDA is primarily written in the [Python programming language](http://www."
"python.org/), which allows for rapid development among other benefits."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:23
msgid ""
"Code that needs to be [injected into other processes](#in-process-code) is "
"written in C++ for high performance."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:24
msgid "### Accessibility APIs"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:25
msgid ""
"In order to make graphical widgets accessible to assistive technologies, "
"operating systems and applications can use special purpose accessibility "
"APIs."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:26
msgid ""
"These APIs provide information about the widget such as its name, type/role "
"(button, check box, editable text field, etc.), description, value, states "
"(checked, unavailable, invisible, etc.) and keyboard shortcut."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:27
msgid ""
"Accessibility APIs also provide events to allow assistive technologies to "
"monitor changes, such as when the focus changes, properties of an object "
"(such as name, description, value, and state) change, etc."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:28
msgid ""
"Rich accessibility APIs provide additional information, including the "
"ability to access detailed information about and track the cursor in "
"editable text controls, and table information such as row and column "
"coordinates."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:29
msgid "NVDA relies heavily on accessibility APIs to gather information."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:30
msgid ""
"Several accessibility APIs are used, including Microsoft Active "
"Accessibility (MSAA) (also known as IAccessible), [IAccessible2](http://www."
"linuxfoundation.org/en/Accessibility/IAccessible2), Java Access Bridge and "
"UI Automation."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:31
msgid "### Native APIs"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:32
msgid ""
"Some widgets do not expose sufficient information via accessibility APIs to "
"make them fully accessible."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:33
msgid ""
"For example, MSAA, which is the accessibility API used by most standard "
"Windows controls, does not provide the ability to obtain the location of the "
"cursor or retrieve individual units of text in editable text fields."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:34
msgid ""
"However, some widgets provide their own native APIs (not specific to "
"accessibility) which can be used to obtain this information."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:35
msgid ""
"NVDA makes use of these APIs where possible; e.g. in standard edit controls."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:36
msgid "### Operating System Functions"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:37
msgid ""
"Aside from accessibility and native APIs, Windows provides many functions "
"which can be used to obtain information and perform tasks."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:38
msgid ""
"Information that can be obtained includes the class name of a window, the "
"current foreground window and system battery status."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:39
msgid ""
"Tasks that can be performed include moving/clicking the mouse and sending "
"key presses."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:40
msgid "## NVDA Components"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:41
msgid ""
"NVDA is built with an extensible, modular, object oriented, abstract design."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:42
msgid "It is divided into several distinct components."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:43
msgid "### Launcher"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:44
msgid "The launcher is the module which the user executes to start NVDA."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:45
msgid "It is contained in the file `nvda.pyw`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:46
msgid ""
"It handles command line arguments, performs some basic initialisation and "
"starts the [core](#core) (unless NVDA is already running or a command line "
"option specifies otherwise)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:47
msgid "### Core"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:48
msgid ""
"The core (in the function `core.main`) loads the configuration, initialises "
"all other components and then enters the main loop."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:49
msgid ""
"In each iteration of the main loop, the core pumps the [API](#api-handlers) "
"and [input](#input-handlers) handlers, [registered generators](#registered-"
"generators) and the main queue."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:50
msgid ""
"All events, scripts, etc. are indirectly queued to this main queue by API "
"and input handlers, so pumping the main queue causes these to be executed."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:51
msgid ""
"At the end of the iteration, the core then goes to sleep until more work is "
"added to the main queue, at which point the core will again wake and perform "
"another iteration. "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:52
msgid ""
"The main loop continues to iterate / sleep until NVDA is instructed to exit "
"either by the user or a newly started copy of NVDA."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:53
msgid ""
"Once NVDA is instructed to exit, the core terminates all other components, "
"saves the configuration if appropriate and then exits."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:54
msgid "#### Event and Script Handling"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:55
msgid ""
"Rather than queuing scripts and events directly to the main queue, this is "
"abstracted using the `eventHandler` and `scriptHandler` modules."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:56
msgid ""
"Input and API handlers use these modules to queue or directly execute "
"scripts and events."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:57
msgid "#### Registered Generators"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:58
msgid ""
"Some tasks need to run in the background without causing NVDA to block "
"(freeze) while waiting for them to complete."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:59
msgid "They need to execute code regularly, but at no specific time interval."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:60
msgid ""
"NVDA allows Python generator functions to be registered for this purpose."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:61
msgid ""
"Once registered, the generator will be pumped once for each iteration/tick "
"of the main loop."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:62
msgid "Examples of this include the say all and speak spelling functionality."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:63
msgid "They are registered using `queueHandler.registerGeneratorObject`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:64
msgid "### Input Handlers"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:65
msgid "The input handlers handle input from various sources."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:66
msgid ""
"Currently, there are three main input handler modules: `keyboardHandler`, "
"`mouseHandler` and `touchHandler`. [Braille display drivers](#output-"
"drivers) can also handle input."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:67
msgid ""
"These handlers listen for input and generate appropriate [input gestures]"
"(#input-gestures) and events."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:68
msgid "### Input Gestures"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:69
msgid ""
"An input gesture is an abstract representation of a single piece of input "
"from the user; e.g. a key press."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:70
msgid "All input gestures derive from the base `inputCore.InputGesture` class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:71
msgid "This allows all input to be handled in a consistent, unified way."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:72
msgid ""
"For example, any input gesture can be bound to any script, both in code and "
"by the user."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:73
msgid "### API Handlers"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:74
msgid ""
"These handle initialisation, listening for events and termination for "
"specific accessibility and native APIs."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:75
msgid "They also contain utility functions useful for working with their API."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:76
msgid ""
"When an event is received for a widget, an appropriate [NVDA object](#nvda-"
"objects) is fetched or constructed and an event is then queued for that NVDA "
"object."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:77
msgid ""
"Together with [NVDA objects](#nvda-objects), they abstract the handling of "
"queries and events for specific APIs so that the bulk of NVDA need not be "
"concerned with specific APIs."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:78
msgid ""
"To introduce support for a new API, a developer just creates another API "
"handler and appropriate NVDA objects without needing to change the majority "
"of the code."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:79
msgid ""
"API handler modules include `IAccessibleHandler` for MSAA/IAccessible and "
"IAccessible2, `JABHandler` for Java Access Bridge and `UIAHandler` for UI "
"Automation."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:80
msgid "### Output Modules"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:81
msgid "Separate modules encapsulate the handling of output functionality."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:82
msgid "Currently, there are two main output modules: `speech` and `braille`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:83
msgid ""
"There is also the `tones` module, which is used to output tones/beeps, and "
"`nvWave` module used to play wave files indicating specific events."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:84
msgid "### Output Drivers"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:85
msgid ""
"Synth drivers are drivers to allow NVDA to utilise particular speech "
"synthesisers."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:86
msgid "They are derived from the `synthDriverHandler.SynthDriver` base class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:87
msgid ""
"Braille display drivers are drivers to allow NVDA to utilise particular "
"braille displays."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:88
msgid "They are derived from the `braille.BrailleDisplayDriver` base class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:89
msgid "### NVDA Objects"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:90
msgid ""
"An NVDA object (NVDAObject) is an abstract representation of a single widget "
"in NVDA."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:91
msgid "All NVDA objects derive from the base `NVDAObjects.NVDAObject` class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:92
msgid ""
"Methods and properties are used to query information about, handle events "
"from and execute actions on the widget represented by the NVDA object in an "
"abstract way."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:93
msgid ""
"This means that the bulk of NVDA need not be concerned with specific "
"accessibility or native APIs, but can instead work with a single, abstract "
"representation."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:94
msgid ""
"This allows for the seamless support and integration of many vastly "
"different APIs."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:95
msgid "It is here that the full power of object oriented programming is used."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:96
msgid ""
"Many methods are implemented on the base `NVDAObject` class and only need to "
"be overridden if specific functionality is required."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:97
msgid ""
"Similarly, if a particular widget is non-standard, problematic, provides "
"additional information using other mechanisms, etc., it can simply subclass "
"another NVDA object and override methods as appropriate."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:98
msgid ""
"NVDA objects that might be used in any application are contained in the "
"NVDAObjects package. [App modules](#app-modules) may also define NVDA "
"objects specific to an application."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:99
msgid ""
"A part from properties such as a widget's name, role, states etc, NVDA "
"objects also include relational properties such as parent, next, previous "
"and first child."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:100
msgid ""
"These allow both the user and code to navigate the entire Operating System "
"and its applications in a tree-like structure."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:101
msgid ""
"The root of the tree being the Desktop, whos children is all the top-level "
"windows for all open applications, each containing further subtrees of more "
"widgets representing an application's user interface."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:102
#: ..\python_docs\technicalDesignOverview.py:114
#: ..\python_docs\technicalDesignOverview.py:116
#: ..\python_docs\technicalDesignOverview.py:188
#: ..\python_docs\technicalDesignOverview.py:198
msgid " "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:103
msgid "### Text Ranges"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:104
msgid ""
"When working with editable text controls, NVDA needs to be able to obtain "
"information about the text in the widget."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:105
msgid ""
"Aside from just retrieving the entire text, proper navigation requires "
"retrieval of specific units of text (e.g. paragraphs, lines, words and "
"characters), as well as the ability to find and set the location of the "
"caret and selection."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:106
msgid ""
"Also, if the widget supports formatting, NVDA should be able to retrieve "
"text attributes such as font name, size, bold, italic, underline and whether "
"there is a spelling error."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:107
msgid "Each API provides a different way of querying and manipulating text."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:108
msgid ""
"Just as NVDA objects provide an abstract representation of a widget, "
"TextInfo objects provide an abstract representation of a range of text."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:109
msgid "These objects are derived from the `textInfos.TextInfo` base class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:110
msgid "TextInfo objects contain properties and methods to:"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:111
msgid ""
"* Move or expand the range by units such as character, word, line and "
"paragraph"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:112
msgid "* compare the start and end of a range with itself or another range"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:113
msgid "* Fetch the text and formatting of the range"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:115
msgid ""
" You can fetch a TextInfo object from an NVDA object via its `makeTextInfo` "
"method, passing in the particular `textInfos.POSITION_*` constant depending "
"on whether you want to fetch a range representing the position of the caret, "
"selection, start or end of the text, or the entire text."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:117
msgid "### Global Commands"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:118
msgid ""
"The global commands object (`globalCommands.GlobalCommands`) contains built-"
"in global scripts; i.e."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:119
msgid "they can be executed everywhere."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:120
msgid ""
"For example, the review, report current focus and date/time scripts are all "
"located in global commands."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:121
msgid "### Plugins"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:122
msgid ""
"NVDA allows third-parties to extend NVDA's functionality through plugins and "
"add-ons."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:123
msgid ""
"These may define custom NVDA objects for specific applications, add global "
"features and add support for new braille displays and speech synthesizers."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:124
msgid ""
"There are three plugin types: appModules, globalPlugins and drivers, with "
"drivers further divided between speech synthesizer and braille display "
"support."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:125
msgid "#### App Modules"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:126
msgid ""
"Generally, most widgets may appear in any application and an [NVDA object]"
"(#nvda-objects) should therefore be included in the main `NVDAObjects` "
"package."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:127
msgid ""
"However, there are sometimes cases where a widget is implemented "
"specifically for one application, as well as cases where a single event must "
"be overridden or a script must be provided only in one application."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:128
msgid ""
"An app module provides support specific to an application for these cases."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:129
msgid ""
"An app module is derived from the `appModuleHandler.AppModule` base class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:130
msgid ""
"App modules receive events for all [NVDA objects](#nvda-objects) in the "
"application and can bind scripts which can be executed anywhere in that "
"application."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:131
msgid ""
"They can also implement their own NVDA objects for use within the "
"application."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:132
msgid "#### Global Plugins"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:133
msgid ""
"Aside from application specific customisation using [app modules](#app-"
"modules), it is also possible to extend NVDA on a global level."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:134
msgid ""
"For example, new global commands can be added, behaviour can be changed and "
"new GUI toolkits can be supported."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:135
msgid "This can be done using global plugins."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:136
msgid ""
"A global plugin is derived from the `globalPluginHandler.GlobalPlugin` base "
"class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:137
msgid ""
"Similar to [global commands](#global-commands), they can bind scripts which "
"can be executed everywhere."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:138
msgid ""
"More specifically, global plugins receive events for all [NVDA objects]"
"(#nvda-objects) in the Operating System and can bind scripts which can be "
"executed anywhere."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:139
msgid "They can also implement their own global [NVDA Objects](#nvda-objects)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:140
msgid "### Tree Interceptors"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:141
msgid ""
"Sometimes, it is necessary to intercept events and scripts for an entire "
"hierarchy (or tree) of [NVDA objects](#nvda-objects)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:142
msgid ""
"For example, this is necessary to seamlessly handle complex documents which "
"consist of many objects."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:143
msgid "This can be done using a tree interceptor."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:144
msgid ""
"A tree interceptor (TreeInterceptor) is derived from the "
"`treeInterceptorHandler.TreeInterceptor` base class."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:145
msgid ""
"It receives events and scripts for all [NVDA objects](#nvda-objects) beneath "
"and including the root NVDA object of the tree interceptor."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:146
msgid ""
"Tree interceptors are created when a TreeInterceptor class is returned from "
"the `treeInterceptorClass` property of an NVDA object."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:147
msgid ""
"Tree interceptors are used mostly for web documents, where all events and "
"scripts for NVDA objects within a document need to be handled by the "
"document (root NVDA object) itself."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:148
msgid "#### Browse mode documents"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:149
msgid ""
"Complex documents such as web pages are very often not flat; i.e. "
"information does not simply run from top to bottom."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:150
msgid ""
"Because of this, complex document browsers often do not provide a way to "
"navigate documents using the caret, and even when they do, it is often "
"problematic."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:151
msgid ""
"Therefore, screen readers need to create their own flat representation of a "
"document from the object hierarchy provided by the browser and allow the "
"user to navigate this flat representation."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:152
msgid ""
"Browse mode documents are a subclass of `TreeInterceptor` that provide "
"scripts that allow navigating the document in a linear fashion."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:153
msgid "##### Virtual buffers"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:154
msgid ""
"Due to the extreme slowness of performing large numbers of [out-of-process]"
"(#out-of-process-code) queries, some complex documents are accessed by NVDA "
"by using [in-process code](#in-process-code), which collects all the content "
"of a document in one go, and allows NVDA to search and fetch parts of this "
"cached content on demand."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:155
msgid "These are known as virtual buffers."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:156
msgid ""
"A virtual buffer (VirtualBuffer) in NVDA is derived from the `virtualBuffers."
"VirtualBuffer` base class and is a type of [browse mode document](##browse-"
"mode-documents)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:157
msgid "### GUI"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:158
msgid ""
"NVDA has its own graphical user interface to allow for easy configuration "
"and other user interaction."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:159
msgid ""
"This code is primarily contained in the `gui` package. [wxPython](http://www."
"wxpython.org/) is used as the GUI toolkit."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:160
msgid "### Configuration management"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:161
msgid ""
"NVDA includes an extensive configuration management facility including "
"various preferences dialogs, ability to apply a given configuration in apps "
"and so forth."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:162
msgid ""
"The base configuration options, as well as routines that manage "
"configuration profiles and other management routines are housed in the "
"`config` package, and NVDA uses [ConfigObj](http://www.voidspace.org.uk/"
"python/configobj.html) to store configuration options."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:163
msgid "## Special Object Functions"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:164
msgid "### Events"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:165
msgid ""
"NVDA object, global plugin, app module and tree interceptor instances can "
"all contain special methods which handle events for NVDA Objects."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:166
msgid ""
"These methods are all named beginning with \"event_\"; e.g. "
"`event_gainFocus` and `event_nameChange`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:167
msgid ""
"These events are generally executed by a call to `eventHandler."
"executeEvent`, which is in turn generally called resultant to events queued "
"by [API Handlers](#api-handlers)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:168
msgid "Most events do not take any additional arguments."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:169
msgid ""
"Global plugins, app modules and tree interceptors are passed a handler "
"function which should be called if the event should be handled by the next "
"handler;"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:170
msgid "e.g. the object itself."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:171
msgid ""
"Although an event is always for a particular NVDA object, it first has a "
"chance of being handled by global plugins, app modules or tree interceptors."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:172
msgid ""
"If an event is handled by one of these, meaning that an `event_*` method was "
"found and executed, the event stops there and does not go further, unless "
"the method that handled it specifically calls the `nextHandler` function "
"object passed to it. "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:173
msgid "The chain of handlers is as follows:"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:174
msgid "* The first found global plugin"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:175
#: ..\python_docs\technicalDesignOverview.py:191
msgid "* The next found global plugin (until no more are found)"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:176
msgid ""
"* The app module containing the NVDA object the event is for, I.e. fetched "
"from the NVDA object's `appModule` property. "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:177
msgid ""
"* The tree interceptor containing the NVDA object the event is for. I.e. "
"fetched from the NVDA object's `treeInterceptor` property if the property is "
"not `None`"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:178
msgid "* The NVDA object itself."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:179
msgid "### Scripts"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:180
msgid ""
"NVDA object, global plugin, app module and tree interceptor instances can "
"all contain special methods called scripts which are executed in response to "
"[input gestures](#input-gestures) from the user."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:181
msgid ""
"These methods are all named beginning with \"script_\"; e.g. "
"`script_reportCurrentFocus` and `script_dateTime`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:182
msgid "Script methods are passed the input gesture that triggered them."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:183
msgid ""
"Input gestures are bound to scripts in the class using a `scriptHandler."
"script` function decorator."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:184
msgid "They can also be bound at runtime using `bindGesture`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:185
msgid "These are inherited from `baseObject.ScriptableObject`."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:186
msgid ""
"Similar to events, input gestures have a chance to be handled by a script at "
"one of many levels."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:187
msgid ""
"But unlike events, once an input gesture finds and executes a script, there "
"is no clean way to have the input gesture handled by a subsequent level."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:189
msgid " The chain of handlers is as follows:"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:190
msgid "* The first found global plugin "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:192
msgid ""
"* The app module containing the currently focused NVDA object, I.e. fetched "
"from the NVDA object's `appModule` property "
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:193
msgid ""
"* The tree interceptor containing the currently focused NVDA object, I.e. "
"fetched from the NVDA object's `treeInterceptor` property if the property is "
"not `None`"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:194
msgid "* The currently focused NVDA object"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:195
msgid ""
"* the first ancestor (parent) of the currently focused NVDAObject, if the "
"found script's `canPropagate` property is True"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:196
msgid ""
"* the next ancestor of the currently focused NVDAObject, if the found "
"script's `canPropagate` property is True..."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:197
msgid " * Global commands"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:199
msgid "## Inter-process Communication"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:200
msgid ""
"In general terms, every running application or service on a computer, "
"including NVDA, is a separate process."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:201
msgid ""
"No process can access data in another process except via special operating "
"system mechanisms."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:202
msgid "This is called inter-process communication (IPC)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:203
msgid "### Out-of-process Code"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:204
msgid "NVDA functions primarily out-of-process."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:205
msgid ""
"That is, events and queries for information from other processes must be "
"marshalled (communicated) between NVDA and the process in question using IPC."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:206
msgid ""
"This is many times slower than queries and events managed in the same "
"process."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:207
msgid ""
"However, for the majority of screen reader functionality, this performance "
"hit is insignificant."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:208
msgid "### In-process Code"
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:209
msgid ""
"When large numbers of queries need to be made in one hit, working [out-of-"
"process](#out-of-process-code) is far too slow."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:210
msgid ""
"A noteworthy example is rendering a web page into a flat representation, as "
"is done by [virtual buffers](#virtual-buffers)."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:211
msgid "In these cases, code can be \"injected\" into the remote process."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:212
msgid ""
"Because this code is running in the same process, queries and events are "
"much faster, as they do not have to be marshalled between processes, which "
"means that large numbers of queries are quite fast."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:213
msgid ""
"NVDA can then perform single out-of-process queries for relevant information."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:214
msgid ""
"In-process code must be small and light-weight, as it is being injected into "
"other processes."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:215
msgid "It must also be as fast as possible to allow for maximum performance."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:216
msgid "Python is unsuitable for this task."
msgstr ""

#: ..\python_docs\technicalDesignOverview.py:217
msgid ""
"All of NVDA's in-process code is written in C++, which allows for maximum "
"performance and minimal overhead."
msgstr ""
