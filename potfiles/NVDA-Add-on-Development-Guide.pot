# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-22 09:10+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:3
msgid "<!-- A note to translators:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:4
msgid ""
"If you are publishing a translated version of this file off-github, the "
"current table of contents likely won't work."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:5
msgid ""
"It includes \"user-content-\" at the start of each relative link, because of "
"Github's processing."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:6
msgid "You will have to remove all of those."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:7
msgid ""
"It may be better to delete this table of contents entirely, and generate a "
"clean one, either by:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:8
msgid ""
"Deleting everything between the TOC start and end comments, and replacing "
"the whole thing with:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:9
msgid "[TOC]"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:10
msgid "Assuming your translation tool supports that markdown extension; or:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:11
msgid ""
"downloading the PERL script we use to generate the table of contents, and "
"running it with the "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:12
msgid ""
"$relativeLinkPreface variable in the CONFIGURATION section set to the empty "
"string \"\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:13
msgid "You can download the PERL script at:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:14
msgid "https://github.com/XLTechie/pubtools/raw/master/markdowntoc.pl"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:15
msgid ""
"If you take this latter option, you may consider generating the table of "
"contents after the translation, instead of before. This may or may not work."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:16
msgid ""
"Please report your experiences with translations, and we will do our best to "
"adjust things to make it easier."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:17
msgid "-->"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:18
msgid "[//]: # (Links for use elsewhere in the document)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:19
msgid "[Git]: https://www.git-scm.com"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:20
msgid "[GitHub]: https://www.github.com/"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:21
msgid "[BitBucket]: https://bitbucket.org/"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:22
msgid "[NVDA GitHub page]: https://github.com/nvaccess/nvda"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:23
msgid ""
"[NVDA Developer Guide]: https://www.nvaccess.org/files/nvda/documentation/"
"developerGuide.html"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:24
msgid "[Design Overview]: https://github.com/nvaccess/nvda/wiki/DesignOverview"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:25
msgid "[NVDA Community Add-ons web site]: https://addons.nvda-project.org"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:26
msgid ""
"[add-on template]: https://github.com/nvdaaddons/AddonTemplate/archive/"
"master.zip"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:27
msgid ""
"[Python Console]: <https://www.nvaccess.org/files/nvda/documentation/"
"developerGuide.html#PythonConsole> (Python Console in NVDA Developer Guide)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:28
msgid ""
"[Using Win32 API]: http://www.zlotowicz.pl/nvda/winapi.mdwn (Using Win32 API "
"in your add-on)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:29
msgid "[Git Bash]: https://www.atlassian.com/git/tutorials/git-bash"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:30
msgid ""
"[Git for Cygwin]: https://stackoverflow.com/questions/33006007/how-to-"
"install-git-for-cygwin"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:31
msgid "[TortoiseGit]: https://tortoisegit.org/"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:32
msgid ""
"[WSL]: https://docs.microsoft.com/en-us/windows/wsl/install-win10 (Windows "
"Subsystem for Linux)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:33
msgid "# NVDA Add-on Development Guide"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:34
msgid "Latest version: August 2021 for NVDA 2021.2"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:35
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:149
msgid "---"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:36
msgid "[//]: # (Place this line where you want the table of contents to start)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:37
msgid "[Table Of Contents]: <#user-content-table-of-contents> (TOC)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:38
msgid "# **TABLE OF CONTENTS**"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:39
msgid ""
"*A note to screen reader users:* to return to this table of contents, use "
"your heading level 1 browse mode command in the reverse direction."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:40
msgid ""
"- [Authors, Contributions, and Copyright](#user-content-authors-"
"contributions-and-copyright)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:41
msgid "- [Introduction](#user-content-introduction)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:42
msgid "- [Audience](#user-content-audience)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:43
msgid ""
"    - [Special note on Python version](#user-content-special-note-on-python-"
"version)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:44
msgid ""
"    - [Special note on NVDA backward compatibility](#user-content-special-"
"note-on-nvda-backward-compatibility)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:45
msgid ""
"    - [A special note for scripters of other screen readers](#user-content-a-"
"special-note-for-scripters-of-other-screen-readers)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:46
msgid ""
"    - [A special note about Windows Store version of NVDA](#user-content-a-"
"special-note-about-windows-store-version-of-nvda)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:47
msgid ""
"    - [A very important note about migrating custom extension code to "
"development scratchpad](#user-content-a-very-important-note-about-migrating-"
"custom-extension-code-to-development-scratchpad)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:48
msgid ""
"    - [A very important note about control types module changes in NVDA "
"2021.2](#user-content-a-very-important-note-about-control-types-changes-in-"
"nvda-2021.2)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:49
msgid "- [Add-on Basics](#user-content-add-on-basics)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:50
msgid "    - [What are Add-ons?](#user-content-what-are-add-ons)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:51
msgid "    - [What Are Add-on Modules?](#user-content-what-are-add-on-modules)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:52
msgid ""
"    - [What Are Add-on Packages?](#user-content-what-are-add-on-packages)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:53
msgid "    - [Installing NVDA Add-ons](#user-content-installing-nvda-add-ons)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:54
msgid ""
"- [Setting Up Your Add-on Development Environment](#user-content-setting-up-"
"your-add-on-development-environment)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:55
msgid "    - [System Requirements](#user-content-system-requirements)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:56
msgid ""
"    - [Add-on Development Folder Structure](#user-content-add-on-development-"
"folder-structure)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:57
msgid "    - [Add-on folder structure](#user-content-add-on-folder-structure)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:58
msgid "    - [Packaging add-ons](#user-content-packaging-add-ons)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:59
msgid ""
"- [Getting started: Hands-on examples](#user-content-getting-started-hands-"
"on-examples)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:60
msgid ""
"    - [How add-on code is organized](#user-content-how-add-on-code-is-"
"organized)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:61
msgid ""
"    - [Running your add-on in this example chapter](#user-content-running-"
"your-add-on-in-this-example-chapter)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:62
msgid ""
"    - [Example 1: Hear a tone when pressing NVDA+A](#user-content-example-1-"
"hear-a-tone-when-pressing-nvdaa)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:63
msgid ""
"    - [Example 1 code explanation](#user-content-example-1-code-explanation)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:64
msgid ""
"    - [I don't understand those above terms](#user-content-i-dont-understand-"
"those-above-terms)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:65
msgid ""
"    - [Example 2: Generate a tone when switching to Notepad](#user-content-"
"example-2-generate-a-tone-when-switching-to-notepad)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:66
msgid ""
"    - [Example 2 code explanation](#user-content-example-2-code-explanation)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:67
msgid "    - [More new terms please](#user-content-more-new-terms-please)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:68
msgid ""
"    - [A few tips for beginners](#user-content-a-few-tips-for-beginners)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:69
msgid ""
"- [Useful modules from NVDA core](#user-content-useful-modules-from-nvda-"
"core)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:70
msgid ""
"    - [List of useful NVDA core modules and methods](#user-content-list-of-"
"useful-nvda-core-modules-and-methods)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:71
msgid "    - [Some real-life examples](#user-content-some-real-life-examples)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:72
msgid ""
"        - [Example 1: am I on the right app where the focus is located?]"
"(#user-content-example-1-am-i-on-the-right-app-where-the-focus-is-located)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:73
msgid ""
"        - [Example 2: Display a message in a browse mode document](#user-"
"content-example-2-display-a-message-in-a-browse-mode-document)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:74
msgid ""
"        - [Example 3: Announce the automation ID of a UIA object](#user-"
"content-example-3-announce-the-automation-id-of-a-uia-object)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:75
msgid ""
"        - [Example 4: Send keystrokes](#user-content-example-4-send-"
"keystrokes)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:76
msgid ""
"        - [Example 5: Stop speech whenever screen content changes if dynamic "
"content change announcement is off](#user-content-example-5-stop-speech-"
"whenever-screen-content-changes-if-dynamic-content-change-announcement-is-"
"off)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:77
msgid ""
"        - [Example 6: using script decorator](#user-content-example-6-using-"
"script-decorator)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:78
msgid ""
"- [Add-on module components and development tips](#user-content-add-on-"
"module-components-and-development-tips)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:79
msgid "    - [The Python Console](#user-content-the-python-console)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:80
msgid ""
"    - [Working with objects on screen](#user-content-working-with-objects-on-"
"screen)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:81
msgid ""
"    - [Examining object hierarchy](#user-content-examining-object-hierarchy)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:82
msgid ""
"    - [Focus vs. navigator object](#user-content-focus-vs-navigator-object)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:83
msgid ""
"    - [Other useful object-related goodies](#user-content-other-useful-"
"object-related-goodies)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:84
msgid ""
"    - [Example 1: Finding the value of a slider in a program](#user-content-"
"example-1-finding-the-value-of-a-slider-in-a-program)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:85
msgid ""
"    - [Specialist objects and overriding object properties at runtime](#user-"
"content-specialist-objects-and-overriding-object-properties-at-runtime)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:86
msgid ""
"    - [Examples of overlay classes and modified roles](#user-content-"
"examples-of-overlay-classes-and-modified-roles)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:87
msgid ""
"    - [Input and output: scripts and UI messages](#user-content-input-and-"
"output-scripts-and-ui-messages)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:88
msgid ""
"    - [Example 2: A basic script dictionary and message output](#user-"
"content-example-2-a-basic-script-dictionary-and-message-output)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:89
msgid ""
"    - [Example 3: script information using script decorator](#user-content-"
"example-3-script-information-using-script-decorator)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:90
msgid ""
"        - [Script decorator arguments](#user-content-script-decorator-"
"arguments)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:91
msgid ""
"    - [Example 4: Scripts for specific objects](#user-content-example-4-"
"scripts-for-specific-objects)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:92
msgid ""
"    - [Script lookup order and command conflicts](#user-content-script-"
"lookup-order-and-command-conflicts)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:93
msgid ""
"    - [A few other remarks on scripts](#user-content-a-few-other-remarks-on-"
"scripts)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:94
msgid "    - [Events](#user-content-events)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:95
msgid ""
"    - [Example 5: Announcing the changed name of a control](#user-content-"
"example-5-announcing-the-changed-name-of-a-control)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:96
msgid "    - [List of possible events](#user-content-list-of-possible-events)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:97
msgid "    - [Events within objects](#user-content-events-within-objects)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:98
msgid "    - [Other components](#user-content-other-components)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:99
msgid "    - [Let's build an add-on](#user-content-lets-build-an-add-on)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:100
msgid ""
"    - [Add-on planning and development tips](#user-content-add-on-planning-"
"and-development-tips)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:101
msgid "    - [Do's and don'ts](#user-content-dos-and-donts)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:102
msgid ""
"    - [Frequently Asked Questions about add-on components and development]"
"(#user-content-frequently-asked-questions-about-add-on-components-and-"
"development)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:103
msgid ""
"- [Introduction to global plugins](#user-content-introduction-to-global-"
"plugins)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:104
msgid ""
"    - [Typical development plan for global plugins](#user-content-typical-"
"development-plan-for-global-plugins)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:105
msgid "    - [The global plugin code](#user-content-the-global-plugin-code)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:106
msgid ""
"    - [When to write or not write global plugins](#user-content-when-to-"
"write-or-not-write-global-plugins)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:107
msgid ""
"    - [A Few more things to remember about global plugins](#user-content-a-"
"few-more-things-to-remember-about-global-plugins)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:108
msgid ""
"    - [Example 1: Writing computer braille using QWERTY keyboard](#user-"
"content-example-1-writing-computer-braille-using-qwerty-keyboard)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:109
msgid "    - [Exercises](#user-content-exercises)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:110
msgid ""
"- [Introduction to app modules](#user-content-introduction-to-app-modules)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:111
msgid ""
"    - [Differences between app modules and global plugins](#user-content-"
"differences-between-app-modules-and-global-plugins)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:112
msgid ""
"    - [App module development process and strategies](#user-content-app-"
"module-development-process-and-strategies)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:113
msgid ""
"    - [Example 2: Simple app module in Notepad](#user-content-example-2-"
"simple-app-module-in-notepad)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:114
msgid ""
"    - [Example 3: Silencing NVDA in Openbook](#user-content-example-3-"
"silencing-nvda-in-openbook)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:115
msgid ""
"    - [Example 4: Announcing control property changes while using another "
"app](#user-content-example-4-announcing-control-property-changes-while-using-"
"another-app)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:116
msgid ""
"    - [Useful app module properties and methods](#user-content-useful-app-"
"module-properties-and-methods)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:117
msgid ""
"    - [Other remarks on app modules](#user-content-other-remarks-on-app-"
"modules)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:118
msgid "- [Drivers](#user-content-drivers)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:119
msgid "    - [Driver components](#user-content-driver-components)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:120
msgid ""
"    - [A Few important things to remember before, during and after driver "
"development](#user-content-a-few-important-things-to-remember-before-during-"
"and-after-driver-development)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:121
msgid ""
"    - [Typical driver development steps](#user-content-typical-driver-"
"development-steps)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:122
msgid "- [Enhancers](#user-content-enhancers)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:123
msgid "    - [Enhancer components](#user-content-enhancer-components)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:124
msgid ""
"    - [A Few important things to remember before, during and after enhancer "
"development](#user-content-a-few-important-things-to-remember-before-during-"
"and-after-enhancer-development)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:125
msgid ""
"    - [Typical enhancer development steps](#user-content-typical-enhancer-"
"development-steps)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:126
msgid ""
"- [Sharing your add-on and experience with others](#user-content-sharing-"
"your-add-on-and-experience-with-others)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:127
msgid "    - [The NVDA Add-ons list](#user-content-the-nvda-add-ons-list)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:128
msgid ""
"    - [The NVDA Community Add-ons web site and code repository](#user-"
"content-the-nvda-community-add-ons-web-site-and-code-repository)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:129
msgid ""
"    - [Submitting your add-on for review](#user-content-submitting-your-add-"
"on-for-review)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:130
msgid ""
"        - [Add-on review checklist](#user-content-add-on-review-checklist)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:131
msgid ""
"- [Advanced Code Examples and Features](#user-content-advanced-code-examples-"
"and-features)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:132
msgid "    - [Interactive Dialogs](#user-content-interactive-dialogs)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:133
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:138
msgid "        - [Introduction](#user-content-introduction)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:134
msgid ""
"        - [Example 1: A Basic Dialog](#user-content-example-1-a-basic-dialog)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:135
msgid ""
"        - [Example 2: A Three-Way Dialog](#user-content-example-2-a-three-"
"way-dialog)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:136
msgid "    - [Using The Log](#user-content-using-the-log)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:137
msgid "    - [Threading](#user-content-threading)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:139
msgid "        - [Threading scenarios](#user-content-threading-scenarios)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:140
msgid "        - [Threading examples](#user-content-threading-examples)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:141
msgid ""
"    - [Storing and Using Persistent Information Outside Your Add-on](#user-"
"content-storing-and-using-persistent-information-outside-your-add-on)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:142
msgid "- [Miscellaneous information](#user-content-miscellaneous-information)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:143
msgid "- [Appendices](#user-content-appendices)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:144
msgid ""
"    - [Appendix A: add-on terms dictionary](#user-content-appendix-a-add-on-"
"terms-dictionary)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:145
msgid ""
"    - [Appendix B: Programming and Python concepts every add-on developer "
"needs to know](#user-content-appendix-b-programming-and-python-concepts-"
"every-add-on-developer-needs-to-know)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:146
msgid ""
"    - [Appendix C: Add-on type comparison](#user-content-appendix-c-add-on-"
"type-comparison)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:147
msgid ""
"    - [Appendix D: notes and references for scripters of other screen "
"readers](#user-content-appendix-d-notes-and-references-for-scripters-of-"
"other-screen-readers)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:148
msgid ""
"    - [Appendix E: Python 2 versus 3](#user-content-appendix-e-python-2-"
"versus-3)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:150
msgid "[//]: # (End of TOC)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:151
msgid "## Authors, Contributions, and Copyright"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:152
msgid ""
"This guide is primarily maintained, and was originally written, by Joseph "
"Lee ([@josephsl](https://github.com/josephsl)), and is shaped by the NVDA "
"user and developer community. Luke Davis ([@XLTechie](https://github.com/"
"XLTechie)) sometimes serves as editor."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:153
msgid "Valuable contributions and corrections from the community are welcome."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:154
msgid ""
"NVDA is copyright 2006-2021 NV Access Limited. Microsoft Windows, Microsoft "
"Office, Win32 API, and other Microsoft  products are copyright Microsoft "
"Corporation. the IAccessible package is copyright by IBM and the Linux "
"Foundation. Python is copyright by Python Software Foundation. Other "
"products mentioned are copyrighted by their respective copyright holders."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:155
msgid "## Introduction"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:156
msgid ""
"Welcome to the NVDA Add-on Development Guide. This is the one-stop guide on "
"how to develop NVDA add-ons. This guide also  explains some useful code "
"segments from the NVDA core source code, which highlight concepts for you, "
"as you learn to write add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:157
msgid ""
"For more information on NVDA development, please visit the [NVDA GitHub "
"page]. Be sure to go over the [NVDA Developer Guide] to familiarize yourself "
"with key terms and basics on getting started with add-on development."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:158
msgid "## Audience"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:159
msgid "This guide is designed for: "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:160
msgid "* Python beginners"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:161
msgid "* beginners to NVDA development"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:162
msgid "* Expert Python developers"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:163
msgid "* Expert NVDA developers"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:164
msgid "* People familiar with programming languages other than Python."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:165
msgid "* Developers of scripts for other screen readers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:166
msgid ""
"If you are new to NVDA add-on or core development, we recommend that you get "
"to know [Python](https://python.org) first, as it gives the necessary "
"programming background for understanding the rest of the guide. If you are a "
"Python programmer but new to NVDA development, please checkout the [NVDA "
"Developer Guide] and [Design Overview] document."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:167
msgid "### Special note on Python version"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:168
msgid ""
"Until 2019, NVDA and add-ons were written primarily in Python 2, "
"specifically 2.7. As of July 2019, NVDA was transitioned to use Python 3.7, "
"with some add-on developers modifying their add-on source code to run on "
"Python 2 and 3. With the release of NVDA 2019.3 in February 2020, Python 3 "
"transition is complete. Be sure to keep an eye on NVDA development and add-"
"ons mailing lists, as well as relevant development documentation and notices "
"regarding news on Python 3 and NVDA. For more information on Python 2 versus "
"3, please read Appendix E."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:169
msgid "This guide will use strictly Python 3 code."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:170
msgid "### Special note on NVDA backward compatibility"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:171
msgid ""
"To modernize NVDA source code and to respond to screen reader usage changes, "
"NV Access has adopted an annual backward compatibility policy in 2020. For "
"each calendar year, the first major version (year.1) is designated "
"\"backwards incompatible\" release where changes affecting add-ons will be "
"incorporated. These include changes to names of functions and classes, as "
"well as removing deprecated code. Because these changes will affect many add-"
"ons, developers must test their add-ons for compatibility once the first "
"beta of the backwards incompatible version of NVDA is released."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:172
msgid "List of backwards incompatible NVDA releases and their highlights:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:173
msgid "* 2019.3: Python 3"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:174
msgid "* 2021.1: dependency updates"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:175
msgid "* 2022.1: control types refactor"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:176
msgid ""
"Unless otherwise stated, this guide will assume latest backwards "
"incompatible NVDA when giving code examples (as of August 2021, 2021.1 is "
"assumed). Exceptions will be documented in appropriate places."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:177
msgid "### A special note for scripters of other screen readers"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:178
msgid ""
"Some of the concepts described in this document are the same across "
"different screen readers, such as objects, windows, events, accessibility "
"API and so on. However, there are important things to be aware of when "
"writing or porting scripts:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:179
msgid ""
"* Unlike some screen readers, NVDA does not have a formal specification or "
"an object model as defined by documentation in other screen readers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:180
msgid ""
"* The code you write will run inside the same runtime environment as the "
"screen reader itself, thus you can perform things such as obtain focused "
"object directly, modify NVDA's functionality and even replace NVDA functions "
"and classes with your own."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:181
msgid ""
"* Python, and consequently, NVDA is an object-oriented system. In other "
"words, most of your code will consist of defining classes and objects which "
"are then picked up by NVDA at runtime."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:182
msgid ""
"* Unlike scripting engines for some screen readers, there is no special hack "
"involved when you wish to provide a feature that'll work in all applications."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:183
msgid ""
"* Unlike scripting engines for some screen readers, you are not limited to "
"libraries that come with screen readers; as a Python-based program, you can "
"use any python module(s) that fits your needs, including external modules. "
"For example, a popular module used to interface with web applications is "
"JSON (JavaScript Object Notation) module, which isn't bundled with NVDA "
"versions prior to 2017.3. You need to bundle external Python libraries "
"yourself if you choose to use these packages."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:184
msgid "### A special note about Windows Store version of NVDA"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:185
msgid ""
"As of NVDA 2018.1, foundation has been laid to let NVDA run as a Windows "
"Store application. Once the Windows Store version of NVDA is published to "
"Microsoft Store, users running Windows 10 can go to Store and obtain NVDA. "
"However, there are restrictions that come with this version of NVDA, notably "
"add-ons cannot run in this environment. Thus, if you need to run or write "
"NVDA add-ons, you need to use the classic desktop version of NVDA, available "
"from the [nvaccess.org website](https://www.nvaccess.org/)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:186
msgid ""
"### A very important note about migrating custom extension code to "
"development scratchpad"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:187
msgid ""
"If you are coming from NVDA 2018.4 or earlier, you may recall that you are "
"able to run extension modules (sometimes called \"plugins\") inside folders "
"stored in the user configuration directory (e.g. appModules). This "
"functionality has been revised in NVDA 2019.1 as follows:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:188
msgid ""
"1. NVDA will no longer load extension code stored in the following "
"subdirectories of the user configuration folder: appModules, "
"brailleDisplayDrivers, globalPlugins, synthDrivers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:189
msgid ""
"\t* If you find that code inside these folders is no longer working as of "
"NVDA 2019.1, the above reason is why."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:190
msgid ""
"2. You must enable development scratchpad functionality (reserved for "
"developers) if you wish to load custom extension code. To do so:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:191
msgid ""
"\t1. With NVDA 2019.1 (or later) running, go to NVDA menu/Preferences/"
"settings/Advanced."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:192
msgid ""
"\t2. You must check \"I understand that changing these settings may cause "
"NVDA to function incorrectly\" checkbox."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:193
msgid ""
"\t3. You must check \"Enable loading custom code from Developer Scratchpad "
"directory\" checkbox."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:194
msgid "\t4. Select OK."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:195
msgid ""
"3. You must store code that was formerly housed in the above list of "
"subdirectories inside corresponding subdirectories of the scratchpad folder."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:196
msgid ""
"4. If you need to use NVDA 2018.4 and would like to use custom code, you "
"must not remove the above listed subdirectories from the user configuration "
"directory. Otherwise go ahead and remove the folders listed in item 1."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:197
msgid ""
"### A very important note about control types module changes in NVDA 2021.2"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:198
msgid ""
"NVDA 2021.2 introduces control types refactor that changes how control roles "
"and sates are specified. In older NvDA releases, control roles are written "
"as controlTypes.ROLE_*, and states are written as controlTypes.STATE_*. With "
"control types refactor, roles and states must be written as controlTypes."
"Role.* and controlTypes.State.*, respectively. For example:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:199
msgid "* Editable text role:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:200
msgid "    * 2021.1 and earlier: controlTypes.ROLE_EDITABLETEXT"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:201
msgid "    * 2021.2 and later: controlTypes.Role.EDITABLETEXT"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:202
msgid "* Checkable state:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:203
msgid "    * 2021.1 and earlier: controlTypes.STATE_CHECKABLE"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:204
msgid "    * 2021.2 and later: controlTypes.State.CHECKABLE"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:205
msgid ""
"The older way of specifying control roles and states will be removed in NVDA "
"2022.1. Unless otherwise stated, this guide will use the newer style."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:206
msgid "## Add-on Basics"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:207
msgid "### What are Add-ons?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:208
msgid ""
"Add-ons are additional small programs that extend NVDA's functionality or "
"support for applications. This may include adding global features, enhancing "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:209
msgid ""
"support for an application, adding support for newer braille displays or "
"speech synthesizers, or enhancing visual usage of NVDA via vision enhancers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:210
msgid ""
"A fully constructed add-on will consist of the add-on Python code itself, "
"contained in one or more modules (more on that in the next section), and "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:211
msgid ""
"usually some documentation, and other support files. If that sounds "
"daunting: don't worry, we will start small, with examples, and only with "
"Python "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:212
msgid "code. The rest of the support structure for an add-on will come later."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:213
msgid ""
"Note: add-ons are sometimes called \"Plugins\", especially in the [NVDA "
"Developer Guide]. Although they may appear to be similar, these terms are "
"different:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:214
msgid ""
"* Add-on: one or more modules or components packaged as an archive for easy "
"installation."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:215
msgid ""
"* Plugin: a module or a collection of modules designed to modify NVDA's "
"behavior in various ways."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:216
msgid ""
"Throughout this guide, whenever we refer to \"add-ons\", you can assume that "
"they contain at least one plugin or component."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:217
msgid "### What Are Add-on Modules?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:218
msgid ""
"Add-ons can act globally (across all of NVDA), in a specific application or "
"program, behind the scenes (at the hardware or software level), or enhance "
"NVDA experience for visual audiences. We call these four "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:219
msgid ""
"major areas \"modules\". Every add-on contains at least one module, which is "
"just one or more Python files designed to act in one of those four specific "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:220
msgid ""
"areas. Additionally, if it makes sense for the add-on you are developing, "
"your add-on can include more than one module. For example, if your add-on "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:221
msgid ""
"provides better accessibility for a specific application, but also provides "
"global commands that work anywhere in NVDA, you would be using two modules."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:222
msgid "Currently, NVDA supports these add-on module types:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:223
msgid ""
"* Global plugin: A global plugin adds features for NVDA which can be used "
"anywhere, such as OCR capability."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:224
msgid ""
"* App module: An app module allows enhanced support for a specific program. "
"App modules only run as long as the program runs. They change how NVDA "
"reacts to the windows and controls in the running application. "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:225
msgid ""
"* Driver: A driver allows a program to talk to hardware, and in some cases, "
"other software. Currently you can write drivers for new braille displays or "
"speech synthesizers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:226
msgid ""
"* Enhancer: An enhancer is used to improve NVDA experience for different "
"groups of users as they use computers. Currently one enhancer type, \"vision "
"enhancement provider\", is supported."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:227
msgid "### What Are Add-on Packages?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:228
msgid ""
"A package is the single file which contains the code, documentation, and "
"other elements which make up a fully functioning add-on, which is "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:229
msgid ""
"intended to be robust enough to be distributed to the public. Each NVDA add-"
"on package is a normal zip file with a file extension of .nvda-addon instead "
"of .zip."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:230
msgid ""
"If making an add-on package sounds like a lot of work: don't worry, you "
"don't have to make a package just to start writing and testing your first "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:231
msgid "add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:232
msgid "### Installing NVDA Add-ons"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:233
msgid ""
"You can install NVDA-approved add-on packages via the Add-ons Manager, found "
"on NVDA's tools menu. Alternatively, you can open any .nvda-addon file "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:234
msgid ""
"you may have created or downloaded, by selecting it in your Windows file "
"manager, and it should launch the add-on install process."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:235
msgid "## Setting Up Your Add-on Development Environment"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:236
msgid "Follow these steps to prepare your computer for writing NVDA add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:237
msgid "### System Requirements"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:238
msgid ""
"To create an add-on for NVDA, please make sure your system meets the "
"following requirements:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:239
msgid "* NVDA:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:240
msgid ""
"    - A version of NVDA is available on your computer (either a portable or "
"installed version will work, but we strongly recommend that you install a "
"copy of NVDA on your development computer). Download NVDA from the [NV "
"Access download page](https://www.nvaccess.org/download/)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:241
msgid ""
"    - Even better: we recommend installing the latest master (alpha) or beta "
"development version to keep up to date with core API changes. You can "
"download the latest snapshots at https://www.nvaccess.org/files/nvda/"
"snapshots/."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:242
msgid "* Python:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:243
msgid ""
"    - Python 3.7 series, version 3.7.9 32-bit for Windows: https://www."
"python.org/downloads/release/python-379/"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:244
msgid ""
"    - Although the add-ons community do understand that Python 2 might be "
"required for backward compatibility, we do not recommend using it in "
"production environments."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:245
msgid ""
"* SCons 3, version 3.1.2 or later for generating add-on packages: http://www."
"scons.org/"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:246
msgid ""
"* Markdown 2.0.1 or later for generating add-on documentation: https://pypi."
"python.org/pypi/Markdown/2.0.1"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:247
msgid ""
"* The GNU Gettext package for Windows for message localization support. The "
"build can be found at: http://gnuwin32.sourceforge.net/downlinks/gettext.php"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:248
msgid ""
"    - Once downloaded, copy these two exe files to your add-on development "
"folder. See the next section for a description of the add-on folder "
"structure."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:249
msgid "        + msgfmt.exe"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:250
msgid "        + xgettext.exe"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:251
msgid ""
"* If you are developing support for a program, speech synthesizer, or "
"braille display, install the needed software and hardware."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:252
msgid "* Optional Items:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:253
msgid ""
"    - Git 2.25.0 or later if you wish to upload the add-on to a repository "
"such as [Bitbucket] or [Github] (optional. See below). You can use various "
"Git clients, such as [Git Bash], [Cygwin's Git][Git for Cygwin], and "
"[TortoiseGit]."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:254
msgid ""
"    - The [NVDA Community Add-on Template][add-on template] for ease of add-"
"on file and folder packaging and management (optional)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:255
msgid ""
"Note: if you're using Windows 10 Anniversary Update or later and wish to use "
"Ubuntu on Windows (AKA [Windows Subsystem for Linux][WSL]), Python is "
"already installed. You can then use Advanced Packaging Tool (APT) to obtain "
"SCons and Gettext. You can then use pip to download and install Markdown."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:256
msgid "### Add-on Development Folder Structure"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:257
msgid ""
"When writing add-ons, it is recommended that you store your add-on code in "
"separate folders, one per add-on. If you chose to download the add-on "
"template, the folder structure will be automatically created."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:258
msgid ""
"Once you install the needed dependencies (see above), paste the Gettext "
"package executables into this add-on folder. Skip this if you plan to build "
"your add-on using WSL Bash."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:259
msgid "### Add-on folder structure"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:260
msgid ""
"Each add-on folder, at a minimum, must contain the following files and "
"folders:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:261
msgid ""
"* manifest.ini to store manifest information such as add-on name, author, "
"and compatibility range (minimum version, last tested version)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:262
msgid ""
"* An \"addon\" subfolder with the add-on module directory underneath this "
"subfolder (appModules, globalPlugins, synthDrivers, brailleDisplays, "
"visionEnhancementProviders). One or more module folders can be specified."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:263
msgid ""
"If you are using the add-on template, the folder structure will "
"automatically be created, so you need to create only the addon subfolder and "
"the add-on module folder(s) and code inside this folder. See the readme file "
"in the template folder for more information on customizing your add-on "
"manifest using the template files."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:264
msgid "### Packaging add-ons"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:265
msgid "There are two ways of packaging add-ons:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:266
msgid ""
"1. To package your add-on manually, zip up (compress) your add-on folder as "
"a .zip file, then rename the file extension to .nvda-addon."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:267
msgid ""
"2. To use the add-on template with SCons, open Command Prompt with "
"administrator mode (Windows Vista or later) or Bash on Ubuntu on Windows "
"(Windows 10 Anniversary Update with WSL enabled), change to your add-on "
"folder and type `scons`."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:268
msgid ""
"For more information on add-on management, see the management chapter in "
"this guide."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:269
msgid "## Getting started: Hands-on examples"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:270
msgid ""
"So are you ready to start your adventure with add-ons, but not sure as to "
"how to bring it to life? If that is you, please go through this chapter, as "
"it gives you basic information to get you started with add-ons and give you "
"tips on writing code."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:271
msgid ""
"Note: for this chapter, we will not use the actual add-on packages. Instead, "
"we'll use scratchpad plugin folders - a number of subdirectories located in "
"a folder called \"scratchpad\", which in turn is a subfolder of your NVDA "
"user configuration folder (available from Start Menu/Screen if NVDA is "
"installed) to store our example Python files."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:272
msgid ""
"To edit .py files, you need a word processor which can handle .py files. The "
"best one we recommend is Notepad++."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:273
msgid "### How add-on code is organized"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:274
msgid ""
"Your add-on code is stored in one or more Python files (.py file). Despite "
"different kinds of add-ons out there, they all have similar layout."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:275
msgid ""
"First, you start by writing an optional header for your add-on, such as your "
"name, a brief sentence or two on what the add-on is for and so on. Although "
"this is optional, it is recommended that you write the header as a reminder "
"to keep track of what you are doing with your add-on. If you plan to "
"distribute your add-on, you must write a header with copyright and license "
"notices."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:276
msgid ""
"Next, you tell NVDA the modules you need for your add-on file. This is done "
"by writing `import module` where module is the name of the module you wish "
"to use in your code. For example, if you want to hear tones while writing "
"your add-on, write `import tones`. Typically you may need to import two or "
"more modules for your specific add-on (see below on list of modules you need "
"for the type of add-on module you are writing)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:277
msgid ""
"after declaring the modules you need or import, you write your add-on code "
"(defining classes, variables, methods and so on). The most important section "
"is the add-on class code, which will determine the type of add-on module "
"your code will be assigned to."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:278
msgid ""
"For instance, if you wish to add support for a program, after importing "
"appModuleHandler and other needed modules, you would write:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:279
msgid " `class appModule(appModuleHandler.AppModule):`"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:280
msgid ""
"After that, all you are writing is Python code (see the Python documentation "
"on how to write Python programs)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:281
msgid "### Running your add-on in this example chapter"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:282
msgid ""
"Before you can run example add-ons, you must enable development scratchpad "
"from NVDA's advanced settings. After doing so, a new folder named "
"\"scratchpad\" will appear in user configuration folder. See the section on "
"scratchpad above for details on how to do so."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:283
msgid ""
"To run your example add-ons from this chapter, open your NVDA user "
"configuration directory (from Start Menu/Screen, look for Explore NVDA user "
"configuration folder\" item). Then look for \"scratchpad\" folder (if "
"enabled), then paste your .py file to the appropriate folder inside this "
"subfolder: appModules folder for app module examples, and globalPlugins "
"folder for global plugins."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:284
msgid "### Example 1: Hear a tone when pressing NVDA+A"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:285
msgid ""
"Let us start with a simple example: if you press NVDA+A, you will hear a "
"tone for 1 second in any program. Since we want to use this everywhere, it "
"must be a global plugin."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:286
msgid ""
"First, if you haven't done so, enable development scratchpad. Then open your "
"user configuration folder, then open the scratchpad folder (if it exists--"
"create it if not), then select globalPlugins folder. Create a new .py file "
"and give it a descriptive name such as example1.py (it is strongly "
"recommended that when you name your global plugin file, give it a short "
"descriptive name). Then open the newly created .py file in the word "
"processor."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:287
msgid ""
"The below code implements our example. Put this in your .py file as exactly "
"as shown:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:288
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:321
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:420
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:430
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:437
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:447
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:454
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:467
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:511
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:524
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:547
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:555
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:578
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:594
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:619
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:657
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:663
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:671
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:807
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:850
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:867
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:877
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:991
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1015
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1041
msgid "```python"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:289
msgid "# Add-on development first example"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:290
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:469
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:810
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:994
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1018
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1042
msgid "import globalPluginHandler"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:291
msgid "import tones # We want to hear beeps."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:292
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:472
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:812
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:996
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1020
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1046
msgid "class GlobalPlugin(globalPluginHandler.GlobalPlugin):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:293
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:474
msgid "\tdef script_doBeep(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:294
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:475
msgid "\t\ttones.beep(440, 1000)  # Beep a standard middle A for 1 second."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:295
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:585
msgid "\t__gestures={"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:296
msgid "\t\t\"kb:NVDA+A\": \"doBeep\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:297
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:588
msgid "\t}"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:298
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:329
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:426
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:433
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:444
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:451
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:462
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:476
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:521
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:530
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:552
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:565
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:589
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:610
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:630
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:661
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:666
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:675
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:820
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:863
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:872
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:886
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1006
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1037
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1058
msgid "```"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:299
msgid ""
"In Python, you make comments by putting hash sign (#) at the start of the "
"comment line."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:300
msgid "### Example 1 code explanation"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:301
msgid ""
"Our first example lets us sound a beep for one second when we press NVDA+A. "
"But you might be wondering what that above code means, so let's step through "
"the code, one piece at a time."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:302
msgid ""
"1. At the top of the file, we wrote a header which tells us that this is an "
"example add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:303
msgid ""
"2. Since this is a global plugin, we need to import a crucial module: global "
"plugin handler, so we wrote `import globalPluginHandler`."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:304
msgid ""
"3. Then we wrote `import tones` to import (load, or include) the tones "
"module, a built-in module from NVDA. Whenever you wish to use a method from "
"a given module, import the needed module(s)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:305
msgid ""
"4. Next, we defined a class called GlobalPlugin. The text inside the "
"brackets tells us where this class is coming from (more on this concept in a "
"second). A class, in programming, describes an object, such as a person, a "
"desk, a program and others."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:306
msgid ""
"5. Inside the class, we wrote a method (function) called `script_doBeep`. "
"This is an example of a script, a method that'll be run or executed when you "
"press a command. Inside this script, we wrote `tones.beep(440, 1000)` to "
"tell NVDA to sound a middle A tone for 1 second. In programming, a function "
"can take arguments, or a set or parameters which tells the function what to "
"do based on the given values (we'll meet them later). In fact, many methods "
"you'll be writing, including our doBeep script takes one or more arguments. "
"More on scripts later as we journey through the guide."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:307
msgid ""
"6. Lastly, we wrote a simple dictionary (a collection) to store our command "
"(script) bindings for our doBeep script. Here, we told NVDA to assign NVDA+A "
"command for doBeep script. Later you will learn a handy trick that will let "
"you specify script bindings and other information at the same time as the "
"script itself."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:308
msgid ""
"Save this file, then restart NVDA. Now whenever you press NVDA+A, you'll "
"hear a middle A tone for 1 second. Once you are comfortable with the add-on "
"code and how it is laid out, you can delete the newly created .py file."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:309
msgid "### I don't understand those above terms"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:310
msgid ""
"For some, the terms \"class\", \"method\" and so on might be new. Let's go "
"over what these terms are, as they are fundamental for add-on development:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:311
msgid ""
"* Class: a class describes an object. It could describe anything, such as a "
"person, a desk, an NVDA add-on and others. Classes are fundamental to NVDA "
"and other programs - in fact, a number of programmers are skilled at coming "
"up with classes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:312
msgid ""
"* Method: A method is a short program or a routine that a program runs for "
"doing something, such as generating tones, calculating huge numbers, loading "
"NVDA add-ons and so on. Some people call them \"functions.\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:313
msgid ""
"* Script: A script is a method which runs when the user performs commands "
"such as pressing certain keys on a keyboard. For example, when you press NVDA"
"+F12, NVDA runs dateTime script, located in one of the NVDA core modules "
"named Global Commands. A script takes two arguments: where the script would "
"be executed (usually \"self\"; more on that later) and the gesture for the "
"script (see below)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:314
msgid ""
"* Variable: A variable is something that can change, such as name of a "
"person, name of the NVDA add-on we're running, version of NVDA you are using "
"and so on. An add-on file may define one or more variables (for example, to "
"store common constants such as strings)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:315
msgid ""
"* Module: A module is a collection of methods and variables in a file. When "
"we write add-ons, we are in fact writing additional modules that NVDA can "
"use while it is running."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:316
msgid "There are other terms that we'll get to know shortly."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:317
msgid "### Example 2: Generate a tone when switching to Notepad"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:318
msgid "Most of the below code comes from NVDA Developer Guide."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:319
msgid ""
"NVDA doesn't just let you add global commands, but it also allows writing "
"code to enhance usage of programs through app modules. An app module is also "
"a Python file except that, this time, the name of the .py file is the name "
"of the executable for a program. For example, an app module for Notepad "
"would be named notepad.py."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:320
msgid ""
"The below code, from NVDA developer Guide, gives a short example of a "
"typical app module: play a short beep when switching to Notepad. Put the "
"below code in notepad.py, which in turn should be placed in appModules "
"folder under scratchpad directory (if enabled) in your user configuration "
"folder in order for it to run."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:322
msgid "# An example app module."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:323
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:455
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:514
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:852
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:869
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:880
msgid "import appModuleHandler"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:324
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:471
msgid "import tones"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:325
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:458
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:515
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:856
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:870
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:882
msgid "class AppModule(appModuleHandler.AppModule):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:326
msgid "\tdef event_gainFocus(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:327
msgid "\t\ttones.beep(256, 200)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:328
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:660
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:674
msgid "\t\tnextHandler()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:330
msgid "### Example 2 code explanation"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:331
msgid ""
"We're seeing more new code here. Let's go over this, again piece by piece:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:332
msgid ""
"1. Unlike the first example, the crucial module we need is appModuleHandler."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:333
msgid "2. The class that we are using is AppModule."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:334
msgid ""
"3. Unlike last time, we're using events, a method run when certain events "
"occur such as when names of controls change. Events take an object as one of "
"its arguments, the object for which the event needs to be dealt with, or, as "
"many people say, \"fired.\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:335
msgid ""
"4. Inside the event method, we're also seeing a call to `nextHandler`. This "
"method is used in event methods to tell NVDA to pass the event so it can be "
"taken care of, such as saying the name of a control after beeping."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:336
msgid "### More new terms please"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:337
msgid "Other terms you may see include:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:338
msgid ""
"* Event: An event is a method that'll be run when something occurs, such as "
"when a program is focused, when names of controls change and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:339
msgid ""
"* Call: We say a function or method \"calls\" another method when we run the "
"second method from the first method. Our first example above demonstrates "
"this, by calling the tones.beep method from our script method."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:340
msgid ""
"* Object: An object is an instance of a class - that is, a class coming to "
"life when a program runs. Throughout your add-ons, as you write classes and "
"when you run your add-ons, your classes come to life as objects, commonly "
"abbreviated to obj. In NVDA, an object may refer to controls or parts of a "
"program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:341
msgid ""
"* Self: In Python, the word \"self\" means current class (if we're defining "
"one, such as when writing add-ons), or means the class for which a method is "
"defined. For example, in a class called numbers, the add method would have "
"self as the first argument, reminding us that add method is part of the "
"class of numbers. In NVDA development world, self usually means the current "
"NVDA object (see below), or in the add-on development, the instance of an "
"add-on. Many of your methods will have self as the first argument."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:342
msgid ""
"Just like example 1, once you're comfortable with app module code, you may "
"wish to delete the Notepad app module code unless you want to keep hearing "
"beeps when you switch to Notepad. The actual differences between global "
"plugins and app modules will become more clear when we talk about them in "
"more detail throughout this guide."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:343
msgid "### A few tips for beginners"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:344
msgid "Here are a few useful tips passed on by add-on writers:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:345
msgid "* Start with easy add-ons, such as saying a message, tones and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:346
msgid "* Write and test one method at a time."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:347
msgid ""
"* If you are writing app modules or drivers, become familiar with programs, "
"synthesizers or braille displays you wish to support (e.g. read "
"documentation, try using them, etc.)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:348
msgid ""
"* When defining commands (especially in global plugins), consult commands "
"used in NVDA and other add-ons first before assigning a new command in your "
"add-on to avoid command conflicts."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:349
msgid "## Useful modules from NVDA core"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:350
msgid ""
"Throughout the life of add-on development, you'll come across some useful "
"modules from NVDA core that would be helpful in your add-on code. This "
"section explains them and some functions in those modules that would be "
"useful, along with examples that utilize some of them."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:351
msgid ""
"Note: for readers who are scripters for other screen readers, see Appendix D "
"on equivalent functions between screen reader scripting facilities."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:352
msgid "### List of useful NVDA core modules and methods"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:353
msgid ""
"The following lists available NVDA core modules and some useful methods and "
"classes found in those modules:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:354
msgid ""
"* Addon Handler (addonHandler.py): The module which implements the add-on "
"subsystem. The addonHandler.initTranslation() method is used to initialize "
"internationalization support for your add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:355
msgid ""
"* NVDA basic API (api.py): A collection of core methods used throughout "
"NVDA, such as obtaining focus and navigator object, setting focus and so on. "
"Some of the most useful functions are:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:356
msgid ""
"    - `api.getFocusObject()`: Retrieves the focused control (returns the "
"object with focus)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:357
msgid ""
"    - `api.getNavigatorObject()`: Fetches the current navigator object. If "
"NVDA is set to follow system focus, the focus and navigator object will be "
"the same, otherwise a different object is returned."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:358
msgid ""
"    - `api.getForegroundObject()`: Returns the foreground window of the "
"current application (the parent of this object is the application itself)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:359
msgid ""
"    - These have a corresponding method to set a certain object as the focus "
"or navigator object. Note that this lets NVDA see the new focus or navigator "
"object but does not actually change system focus."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:360
msgid ""
"    - `api.getDesktopObject()`: returns the shell (topmost level) object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:361
msgid ""
"    - `api.copyToClip(text to be copied, optionally notify success or "
"failure)`: copies text to the clipboard and optionally let NVDA notify the "
"user about this operation."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:362
msgid ""
"* App Module subsystem (appModuleHandler.py, appModules): The subsystem in "
"charge of handling app modules (see the chapter on app modules for more "
"information)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:363
msgid ""
"* ARIA support (aria.py): Implements support for Accessible Rich Internet "
"Applications (ARIA)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:364
msgid ""
"* Base object collection (baseObject.py): Contains useful base objects such "
"as scriptable objects (see the chapter on NVDA objects and overlay objects "
"for more information)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:365
msgid ""
"* Braille input and output subsystem (braille.py, brailleInput.py): Controls "
"braille output to and input from braille displays, needed by braille display "
"driver add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:366
msgid ""
"* Built-in modules (builtin.py): Allows access to builtin modules when "
"working with add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:367
msgid ""
"* Configuration (config): Manages configuration and profiles (profiles are "
"available in 2013.3 or later)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:368
msgid ""
"* Content recognition engines (contentRecog packages): adds ability to use "
"OCR and other methods to recognize content in various scenarios. NVDA ships "
"with Windows 10 OCR engine."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:369
msgid ""
"* Controls and states collection (controlTypes.py): Includes dictionaries on "
"control types (roles) and possible states that a control can be in."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:370
msgid ""
"* Events (eventHandler.py): Handles various events such as gaining focus. "
"One function in particular is useful in app modules:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:371
msgid ""
"    - `eventHandler.requestEvents(event to be requested, process ID, window "
"class name for the control)`: Allows NVDA to listen to specific events for "
"certain controls while using another app."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:372
msgid ""
"* Extension points (extensionPoints): provides a way to let add-ons and "
"other modules define and respond to specific action such as profile "
"switches, actions in an add-on and so on. The following extension points are "
"defined:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:373
msgid ""
"    - `extensionPoints.Action`: notifies when something happens e.g. profile "
"switches."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:374
msgid ""
"    - `extensionPoints.Decider`: decides whether to process something "
"further e.g. processing keyboard input from a remote system."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:375
msgid ""
"    - `extensionPoints.Filter`: modifies a given text for further processing "
"e.g. advanced speech sequences."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:376
msgid ""
"* Global Commands collection (globalCommands.py): A list of global commands "
"available while using NVDA (see section on script scope for more "
"information)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:377
msgid ""
"* Global Plugin subsystem (globalPluginHandler.py): The module needed for "
"controlling global plugins."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:378
msgid ""
"* NVDA GUI (gui): A collection of classes used by NVDA to display its "
"messages graphically. Includes GUI's for NVDA menu, add-on manager and "
"others."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:379
msgid ""
"* Hardware port utilities and input/output management (hwPortUtils.py, hwIo."
"py): A set of utilities for communicating over serial and other hardware "
"ports, useful during driver add-on development."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:380
msgid ""
"* IAccessible support (IAccessibleHandler, IAccessible objects): Used for "
"supporting Microsoft Active Accessibility (MSAA)/IAccessible controls."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:381
msgid "* Input management (inputCore.py): Manages input from the user."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:382
msgid ""
"* Java support (JABHandler.py, JAB objects): A collection of methods used "
"for supporting JAB (Java Access Bridge) subsystem used for Java applications."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:383
msgid ""
"* Keyboard input (keyboardHandler.py): Supports entering commands from the "
"keyboard."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:384
msgid ""
"* Logging facility (logHandler.py): Allows a module to write logs to be "
"viewed by a developer or a user via Log Viewer. It includes the following "
"class:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:385
msgid "    - `logHandler.Log`: The class which implements logging facility."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:386
msgid ""
"* Math content presentation (MathPress packages): allows NVDA to recognize "
"and interact with various math content and markup. NVDA ships with MathML "
"support package and support for Math Player is included in 2015.2 or later."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:387
msgid "* Mouse support (mouseHandler.py): Supports mouse commands."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:388
msgid ""
"* NVDA objects collection (NVDAObjects): A collection of NVDA objects or "
"controls used in many applications and standards such as UIA (User Interface "
"Automation). Some objects require special actions to be performed, and these "
"are specified in behaviors module in NVDA objects package. Some of the "
"common ones include:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:389
msgid ""
"    - `NVDAObjects.NVDAObject`: the base class for NVDA objects that define "
"events, properties and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:390
msgid ""
"    - `NVDAObjects.behaviors`: a collection of behaviors for specific "
"controls, such as edit fields with or without selection detection, "
"terminals, tool tips, help balloons, a way to simulate table commands in "
"various controls and others."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:391
msgid ""
"    - `NVDAObjects.IAccessible`: a collection of MSAA/IAccessible objects, "
"such as working with SysListView32 list views and others."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:392
msgid ""
"    - `NVDAObjects.JAB`: a collection of classes used when interfacing with "
"Java applications and Java Access Bridge."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:393
msgid ""
"    - `NVDAObjects.UIA`: various classes for objects powered by UI "
"Automation. Since 2016, it is also the home of a collection of controls used "
"in legacy (not Chromium) Microsoft Edge and objects powered by EdgeHTML "
"rendering engine."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:394
msgid ""
"    - `NVDAObjects.Window`: generic windows and other custom objects such as "
"those found in Microsoft Excel."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:395
msgid "* Review facility (review.py): assists with working with review cursor."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:396
msgid ""
"* Scripts support (scriptHandler.py): Handles scripts, methods executed due "
"to the user pressing keyboard commands and other input."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:397
msgid ""
"    - scriptHandler.script: a decorator that allows information about the "
"bound script to be defined while defining the script itself, including "
"description (input help message), gesture/gestures (commands, the latter "
"used for a list of gestures), and script category."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:398
msgid "* Speech output (speech): Controls speech output."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:399
msgid ""
"* Synthesizer driver support (synthDriverHandler.py): This is the core "
"module needed for speech synthesizer add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:400
msgid ""
"* Widget text access (textInfos): Allows access to text for widget and "
"documents."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:401
msgid ""
"* Touchscreen support (touchHandler.py): Provides support for touchscreen "
"input (installed versions only)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:402
msgid ""
"    - `touchHandler.touchSupported()`: returns if the system supports touch "
"interaction."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:403
msgid ""
"* Tone output (tones.py): Allows the user to hear tones. The following "
"function is defined:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:404
msgid ""
"    - `tones.beep(pitch in hertz, duration in milliseconds, left channel "
"volume, right channel volume)`: Plays a tone of specified pitch for "
"specified duration. The first two arguments are mandatory, while the other "
"two are optional."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:405
msgid ""
"* User interface messages (ui.py): Includes various functions for speech and/"
"or braille output, including:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:406
msgid ""
"    - `ui.message(message to be spoken/brailled, speech priority, optional "
"braille message)`: Speaks or brailles the message (a string surrounded by "
"quotes). Optionally, speech priority can be specified to interrupt what the "
"speech synthesizer is saying when announcing the message, as well as output "
"a different message on braille displays."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:407
msgid ""
"    - `ui.browseableMessage(message to be shown, title, HTML or not)`: "
"displays some text and an optional title in a web browser window. If you "
"want to use HTML markup, set isHTML argument to True."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:408
msgid ""
"* UIA support (UIAHandler.py, UIA objects): Used for supporting UIA (User "
"Interface Automation) controls (Windows 7 and later)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:409
msgid ""
"* Virtual buffers (virtualBuffers): Handles virtual buffer documents such as "
"web sites."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:410
msgid ""
"* Windows version specifications and checks (winVersion.py): provides "
"constants representing Windows releases and comparing Windows releases."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:411
msgid ""
"    - winVersion.getWinVer(): returns the current Windows release (Windows "
"release name, major.minor.build, installation type, and service pack if "
"any). This data can be compared with other Windows releases such as "
"detecting specific Windows 10 release such as October 2018 Update e.g. "
"winVersion.getWinVer() >= winVersion.WIN10_1809."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:412
msgid ""
"* Windows API wrappers: the following modules are thin wrappers around "
"Windows API libraries. You can use the below modules or call Windows API "
"directly via ctypes.windll.dllname (e.g. ctypes.windll.user32):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:413
msgid ""
"    - `winKernel`: Wraps some constants, structures and functions from "
"kernel32.dll that are commonly encountered in NVDA."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:414
msgid ""
"    - `winUser`: wraps around constants, structures and functions defined in "
"user32.dll that are used by NVDA."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:415
msgid ""
"The modules without .py extension are directories, containing specialist "
"modules. There are other useful methods out there in addition to the list "
"above, but the above are the most useful ones. See the NVDA source code "
"documentation for other methods, or see the examples below on how these "
"methods and others are used throughout the life of an add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:416
msgid "### Some real-life examples"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:417
msgid ""
"Let's go through some simplified real-life examples demonstrating how the "
"components listed above are used in common add-on writing scenarios."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:418
msgid "#### Example 1: am I on the right app where the focus is located?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:419
msgid ""
"The below code checks whether the navigator object is located somewhere on "
"the same app or not."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:421
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:513
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:853
msgid "import api"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:422
msgid "def sameApp(obj=None):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:423
msgid "\tif obj is None:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:424
msgid "\t\tobj = api.getNavigatorObject()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:425
msgid "\treturn api.getFocusObject().appModule == obj.appModule"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:427
msgid ""
"The `api.getNavigatorObject()` function returns the current navigator "
"object, the object you are interested in as opposed to focused object. Each "
"NVDA object includes `appModule` member which records on which app an object "
"is located."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:428
msgid "#### Example 2: Display a message in a browse mode document"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:429
msgid ""
"In NVDA 2015.2 and later, it became possible to display a message in a "
"browse mode window so people can use browse mode commands to review the "
"message content. The below code displays \"Hello world\" in a document "
"window."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:431
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:438
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:854
msgid "import ui"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:432
msgid "ui.browseableMessage(\"Hello World!\", isHtml=False)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:434
msgid "The isHtml flag tells NVDA whether to treat the message as HTML text."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:435
msgid "#### Example 3: Announce the automation ID of a UIA object"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:436
msgid ""
"In UI Automation, automation ID is used to identify different screen "
"elements. The following code displays this information in a browsable window."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:439
msgid "from NVDAObjects.UIA import UIA"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:440
msgid "def announceUIAId():"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:441
msgid "\tobj = api.getFocusObject()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:442
msgid "\tif isinstance(obj, UIA):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:443
msgid "\t\tui.browseableMessage(obj.UIAAutomationId, isHtml=True)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:445
msgid "#### Example 4: Send keystrokes"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:446
msgid ""
"You can ask NVDA to send specific keystrokes by instantiating a keyboard "
"gesture object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:448
msgid "import keyboardHandler"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:449
msgid "def sendApplicationsKey():"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:450
msgid ""
"\tkeyboardHandler.KeyboardInputGesture.fromName(\"applications\").send()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:452
msgid ""
"#### Example 5: Stop speech whenever screen content changes if dynamic "
"content change announcement is off"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:453
msgid ""
"The below code is a handler for a name change event that stops speech "
"whenever screen content changes if dynamic content change announcement is "
"off."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:456
msgid "import config"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:457
msgid "import speech"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:459
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:672
msgid "\tdef event_nameChange(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:460
msgid ""
"\t\tif not config.conf[\"presentation\"][\"reportDynamicContentChanges\"]:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:461
msgid "\t\t\tspeech.cancelSpeech()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:463
msgid "#### Example 6: using script decorator"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:464
msgid ""
"A decorator is a function that wraps and returns another function while "
"performing internal operations. For example, a decorator can make changes to "
"the internals of a function or check something on behalf of another function "
"without the wrapped function being aware of what's happening."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:465
msgid ""
"In NVDA 2018.3, a special decorator named scriptHandler.script was "
"introduced to make it easier to define information about a script. A "
"script's description (input help mode message), gesture or gestures "
"(commands bound to this script), and script category can be assigned as you "
"define the script."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:466
msgid ""
"Recall the first example where a beep was heard when NVDA+A was pressed. The "
"drawback is that the actual script and the command (gesture) associated with "
"it were defined in different places. You can group them by using script "
"decorator (scriptHandler.script) as shown below."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:468
msgid ""
"# Add-on development first example global plugin, now edited to use script "
"decorator"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:470
msgid "import scriptHandler"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:473
msgid "\t@scriptHandler.script(gesture=\"kb:NVDA+A\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:477
msgid ""
"Throughout this guide, whenever script examples are shown, script decorator "
"will be used unless noted otherwise."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:478
msgid ""
"This is just a sample of things you can encounter as you write add-ons and "
"how you can use various NVDA components to achieve what you want. We'll tour "
"add-on components and meet more functions throughout this guide."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:479
msgid "## Add-on module components and development tips"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:480
msgid ""
"An add-on module consists of a number of components. This includes handling "
"input and output, working with different NVDA objects, reacting to events, "
"storing configuration and more."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:481
msgid ""
"This chapter introduces key components and concepts that are used in add-on "
"development, such as NVDA objects, scripts, event handling and additional "
"topics with examples."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:482
msgid ""
"Note that the [NVDA core development guide][NVDA Developer Guide] introduces "
"the below concepts. This chapter is intended as an extension of that "
"document. Consult the NVDA developer guide for a brief introduction."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:483
msgid ""
"Note for scripters of other screen readers: you might be familiar with some "
"of the concepts introduced in this section. Please read this section if you "
"want a better understanding of how some of them are used in NVDA."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:484
msgid "### The Python Console"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:485
msgid ""
"This guide sometimes suggests that you use the [Python Console]. The console "
"is a feature of NVDA which can be very useful to developers. It is described "
"in more detail in chapter 5 of the [NVDA Developer Guide]."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:486
msgid ""
"You can activate it by going to the NVDA Tools menu, or by pressing NVDA"
"+control+z."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:487
msgid "### Working with objects on screen"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:488
msgid ""
"An object is an instance of a class - that is, a class coming to life while "
"a program is running. For example, if a class called button has been "
"defined, the button on a screen is the object of this button class."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:489
msgid ""
"In NVDA, an object is a representation of a control or part of a program. "
"This includes buttons, check boxes, edit fields, toolbars, sliders and even "
"the application window. These are organized into hierarchies, or parent-"
"child relationships where an object may contain child objects - for example, "
"a list object in Windows Explorer may contain one or more list items, and "
"the parent of this list might be the Windows Explorer window. The object "
"that you're examining right now is termed \"navigator object.\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:490
msgid ""
"The NVDA object (or simply called object) contains a number of useful "
"properties or attributes. These include the object's name, its value "
"(checked, text of the edit window, etc.), role (check box, window, embedded "
"object, etc., location (screen coordinates) and more. NVDA objects also "
"contain useful methods for manipulating them, such as changing the value of "
"the object, reacting to events for the object (gains focus, value has "
"changed, etc.) and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:491
msgid ""
"In many situations, an NVDA object may belong to a class of related objects. "
"For each object class, NVDA provides ways of handling it. These classes "
"include IAccessible, JAB, UIA and so forth. These classes and behaviors for "
"each class of objects is defined in NVDAObjects directory in the NVDA source "
"code, and to use them in your add-on, import the appropriate object class "
"handler for the object you're using (e.g. if you're working with an "
"IAccessible object, import NVDAObjects.IAccessible.)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:492
msgid ""
"Two of these object classes merit special mention: virtual buffers and tree "
"interceptors. A tree interceptor allows NVDA to work with a \"tree\" of "
"objects as though they are just one object. A special case of tree "
"interceptor is virtual buffer, which allows NVDA to work with complex "
"documents such as PDF documents. These objects contain a special mechanism "
"to determine whether a given keyboard command will be passed to the "
"application or handled by NVDA (for instance, browse mode where first letter "
"navigation is used to move between elements)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:493
msgid "### Examining object hierarchy"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:494
msgid ""
"There are a number of ways which you can use to see the hierarchy of an "
"object for a given program:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:495
msgid ""
"1. Using object navigation commands (NVDA+Numpad 2/4/5/6/8) with simple "
"review mode turned off."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:496
msgid ""
"2. Using [Python Console], use obj.next/previous/parent/firstChild/lastChild "
"attributes. If you want to see all available properties, from Python "
"Console, type dir(obj)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:497
msgid ""
"If you wish to see a more detailed description about the navigator object, "
"while the navigator object is located at the object you're interested in, "
"press NVDA+F1 to launch log viewer and examine the developer info shown. The "
"root of all objects in Windows is the desktop, or shell object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:498
msgid "### Focus vs. navigator object"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:499
msgid ""
"In your add-on, you might wish to work with various objects and manipulate "
"them. These may include changing the focused object, synchronizing navigator "
"and focus objects, changing the role of an object and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:500
msgid ""
"A focus object is the currently focused control. These are linked to "
"keyboard focus - that is, it follows the highlighted control. In contrast, a "
"navigator object is the object you're interested in. Since navigator objects "
"can move anywhere, you can examine two objects at once: the focused object "
"and the navigator object. For instance, you might be focused on an edit "
"field while examining the title bar as the navigator object. We already saw "
"an example above where we can check if we're on two different apps by "
"checking for app modules for focus versus navigator object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:501
msgid ""
"In your add-on, to fetch the object with focus, write `someObj = api."
"getFocusObject()`. The someObj can be named differently - the convention is "
"to use the name \"obj\". To fetch the navigator object (which might be "
"different from the focused object), use `obj = api.getNavigatorObject()`."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:502
msgid "### Other useful object-related goodies"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:503
msgid ""
"Here are some other methods which work with NVDA objects, all located in api."
"py module:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:504
msgid ""
"* If you wish to obtain the foreground object (useful if you wish to look at "
"some child object of the foreground window), use `obj = api."
"getForegroundObject()`. The name of the foreground object, usually the top-"
"level window of an application is treated as a title by NVDA and can be "
"obtained by pressing NVDA+T."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:505
msgid ""
"* From [Python Console], to see the number of child objects that an object "
"contains (for instance, the children, or widgets of a foreground window), "
"type `obj.childCount`. The value 0 means that there are no more child "
"objects."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:506
msgid ""
"* To set some object as the new focus or navigator object, use `api."
"setFocusObject(obj)` or `api.setNavigatorObject(obj)`. These do not change "
"what Windows views as focused object, as these change what NVDA thinks is "
"the focus and navigator object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:507
msgid ""
"* You can fetch various properties of an object by specifying obj.property "
"where property is the attribute you wish to see (e.g. obj.value). Common "
"properties include name, value, states, role, app module, window class name "
"and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:508
msgid "### Example 1: Finding the value of a slider in a program"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:509
msgid ""
"Suppose you are asked by a user to give him the value of a slider in a "
"program using an app module. After looking at the object hierarchy and other "
"properties, you know that the toolbar is the last child of the foreground "
"object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:510
msgid "Here is the code to implement this feature:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:512
msgid "# Object example 1"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:516
msgid "\tsliderChildIndex = -1 # The variable to store the child index."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:517
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:525
msgid "\tdef getSliderValue(self):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:518
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:527
msgid "\t\tfg = api.getForegroundObject()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:519
msgid "\t\tsliderVal = fg.children[self.sliderChildIndex].value"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:520
msgid "\t\treturn sliderVal"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:522
msgid ""
"In this code, the method `fg.children[index]` is used to retrieve the child "
"with the given index (here, since we said the toolbar is the last child, the "
"index would be minus 1, or the very last child; we could have used fg."
"lastChild). Alternatively, you can use `fg.getChild(-1) in certain "
"situations (IAccessible, for example).)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:523
msgid ""
"However, this code has an issue: what if the slider value is actually within "
"the first child of the actual slider control? One way to fix this is to "
"check the object's role. The modified code looks like this:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:526
msgid ""
"\t\tfrom controlTypes import Role # It is possible to import from within a "
"method."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:528
msgid "\t\tslider = fg.lastChild"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:529
msgid "\t\tif slider.role == Role.SLIDER: return slider.firstChild.value"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:531
msgid ""
"Thus, when we know for sure that we're dealing with the slider, the method "
"returns the value of the slider's first child (if that is the case). Note "
"the two equals signs for equality, as opposed to just one equals sign for "
"assignment."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:532
msgid ""
"There are other examples you can try to familiarize yourself with object "
"navigation and manipulation:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:533
msgid ""
"* Obtaining the name of an object that is located somewhere else in the "
"program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:534
msgid "* Moving the navigator to the foreground object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:535
msgid "* Setting focus to another program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:536
msgid "* Locating the first status bar in a program with multiple status bars."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:537
msgid ""
"For real-life examples on objects in NVDA, consult the NVDA source code or "
"source codes of various community add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:538
msgid "### Specialist objects and overriding object properties at runtime"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:539
msgid ""
"Sometimes, it is not enough to work with default behavior for a control. For "
"example, some parts of a program may need custom gestures, or one may need "
"to change the role of a window to that of a button."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:540
msgid ""
"NVDA provides two methods for creating or manipulating specialist, or "
"overlay objects (or classes), each suited for different needs:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:541
msgid ""
"* `event_NVDAObject_init(self, object we're dealing with)`: If you wish to "
"override certain attributes of a control such as its role or label (name), "
"you can use this method to ask NVDA to take your \"input\" into account when "
"meeting objects for the first time (or initialized). For instance, if the "
"control has the window class name of TForm (seen on many Delphi "
"applications), you can ask NVDA to treat this control as a standard window "
"by assigning obj.role = controlTypes.Role.WINDOW (see control types module "
"for list of available roles)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:542
msgid ""
"* `chooseNVDAObjectOverlayClasses(self, object, list of classes)`: This "
"allows NVDA to use your own logic when dealing with certain objects. For "
"example, this is useful if you wish to assign custom gestures for certain "
"parts of a program in your app module (in fact, many app modules define "
"objects to deal with certain parts of a program, then uses "
"chooseNVDAObjectOverlayClasses to select the correct object when certain "
"conditions are met). These custom objects must be based on a solid object "
"that we wish to deal with (mostly IAccessible is enough, thus most overlay "
"objects inherit from, or is the child or specialist class of IAccessible "
"objects). In certain situations, you can use this method to drop a property "
"from an object, such as telling NVDA to not treat this object as a progress "
"bar by removing progress bar behavior from this object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:543
msgid ""
"Note that in case of the second method, the class(s) with the given name "
"must be present in the file, which is/are inherited from a known base object "
"(in Python, the syntax for the inheritance is `childClass(baseClass)`, and "
"is usually read as, \"this child class inherits from this base class\". "
"We'll see code like this later)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:544
msgid "### Examples of overlay classes and modified roles"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:545
msgid ""
"Below examples illustrate the uses of the two overlay and attribute "
"modification methods we've discussed above:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:546
msgid "An example of the first case: modifying an attribute."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:548
msgid "\t# Reassign some Delphi forms as window."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:549
msgid "\timport controlTypes"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:550
msgid "\tdef event_NVDAObject_init(self, obj):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:551
msgid ""
"\t\tif obj.windowClassName == \"TForm\": obj.role = controlTypes.Role.WINDOW"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:553
msgid ""
"This means that whenever we encounter a window with the class name of \"TForm"
"\", NVDA will treat this as a normal window."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:554
msgid ""
"Example 2 deals with an app module which has two objects for dealing with "
"specific parts of a program, then uses chooseNVDAObjectOverlayClasses to "
"assign the logic for each control."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:556
msgid "#An example of overlay classes"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:557
msgid "class enhancedEdit(IAccessible):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:558
msgid "\t# Some code to be run when window class name is MyEdit."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:559
msgid "class MainWindow(IAccessible):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:560
msgid ""
"\t# Another code, this time adding custom gestures for main window of the "
"program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:561
msgid "# In the app module:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:562
msgid "def chooseNVDAObjectOverlayClasses(self, obj, clsList):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:563
msgid "\tif obj.windowClassName == \"myEdit\": clsList.insert(0, enhancedEdit)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:564
msgid ""
"\telif obj.windowClassName == \"TWindow\": clsList.insert(0, mainWindow)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:566
msgid ""
"In both cases, the object that we wish to check must be inserted as the "
"first element of the clsList. The effect is that these custom objects will "
"take precedence when looking up gestures or code (behavior) for the object, "
"and in the developer info, these custom objects will come first when MRO "
"(Method Resolution Order) for the navigator object is displayed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:567
msgid ""
"Note: You may need to tune these two methods to provide correct overlay "
"classes for very specific controls (such as checking names, specific roles, "
"etc.), otherwise you may find that two or more identical-looking controls "
"are assigned to your custom object when in fact they are very different. "
"Also, the event_NVDAObject_init is only available in app modules."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:568
msgid "### Input and output: scripts and UI messages"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:569
msgid ""
"Another crucial component of add-ons is handling commands from users and "
"displaying what the add-on is doing. These are done via scripts (input) and "
"UI messages (output)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:570
msgid ""
"A script is a method run when the user performs certain commands. For "
"example, when you press NVDA+T, NVDA runs a script in global commands module "
"called SayTitle. In Poedit, for instance, when a translator presses Control"
"+Shift+A, NVDA will read translator comments added by the programmer to help "
"clarify a given translatable string. This command is not a native NVDA "
"command, but it is defined in the Poedit app module to perform this function."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:571
msgid ""
"Typically, an add-on which accepts scripts will have a list of command:"
"function mapped somewhere in the module. The simplest is a gestures "
"(commands) dictionary, a python dictionary (typically named __gestures) "
"which holds commands as keys and scripts as values for these keys (more than "
"one key, or command can be bound to scripts). Alternatively, information "
"about each script such as its description and bound gestures can be "
"specified through script decorator. These dictionaries are loaded when add-"
"on loads and is cleared when either NVDA exits or the app for the app module "
"loses focus (that is, the user has switched to another program)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:572
msgid ""
"Another way to bind scripts is via runtime insertion. This is done by "
"creating another gestures dictionary apart from __gestures dictionary which "
"holds context-sensitive gestures such as manipulating a single control. Then "
"the developer would use inputCore.bindGesture (or inputCore.bindGestures if "
"more than one gestures/scripts are defined) to define certain gestures for a "
"time, then using inputCore.clearGestures then inputCore."
"bindGestures(__gestures) to remove the added gestures. A more elegant way, "
"which involves scripts for specific objects, will be covered when we talk "
"about app modules and assigning gestures to specific parts of a program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:573
msgid ""
"For most scripts, you don't have to worry about sending the command to the "
"application. However, in case the script performs additional tasks while "
"sending the key to the active application, you can use `gesture.send()` to "
"send the command first before performing additional work."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:574
msgid ""
"In a similar manner to scripts, the UI module allows you to say or braille "
"what your add-on is doing. This is done by using `ui.message(something to "
"say)` where `something to say` is replaced by a string for NVDA to say. "
"Alternatively, you can call speech and braille handler methods directly if "
"you want speech to say one thing and the braille display to show something "
"else. We'll not go over `ui.message` here (you'll see examples of those), "
"but what's more important is scripts, so we'll focus on that in this section."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:575
msgid ""
"As of time of writing, NVDA supports input from the keyboard, braille "
"displays with or without braille keyboard and touchscreens. These input "
"types have a corresponding gesture prefix (kb for keyboard, br for braille "
"and ts for touchscreen) which identifies the type of gesture. Output can be "
"sent via speech and/or braille."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:576
msgid "### Example 2: A basic script dictionary and message output"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:577
msgid ""
"In this example, we'll define two scripts called \"sayHello\" and say"
"\"GoodBye\", then bind them into two separate gestures."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:579
msgid "\t# An example fragment for script assignment from a global plugin."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:580
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:596
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1087
msgid "\timport ui"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:581
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:602
msgid "\tdef script_sayHello(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:582
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:603
msgid "\t\tui.message(\"Hello!\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:583
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:608
msgid "\tdef script_sayGoodBye(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:584
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:609
msgid "\t\tui.message(\"Good Bye!\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:586
msgid "\t\t\"kb:control+NVDA+1\":\"sayHello\","
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:587
msgid "\t\t\"kb:Control+NVDA+2\":\"sayGoodBye\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:590
msgid ""
"Now when you press Control+NVDA+1, NVDA will say, \"Hello\", and when you "
"press Control+NVDA+2, NVDA will say, \"Good bye.\" This is the basic code on "
"receiving commands and sending messages."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:591
msgid "### Example 3: script information using script decorator"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:592
msgid ""
"As we have seen with an example above, script decorator can be used to "
"assign gestures to scripts easily. But script decorator can do more than "
"assign gestures: it can be used to provide additional information such as "
"input help message for a script."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:593
msgid ""
"In addition to the modified example 2, the below example will add an input "
"help message for both scripts, along with setting Control+NVDA+3 to make "
"NVDA say \"good bye\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:595
msgid ""
"\t# An example fragment for script decorator usage from a global plugin."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:597
msgid "\tfrom scriptHandler import script"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:598
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:604
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:814
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:997
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1021
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1047
msgid "\t@script("
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:599
msgid "\t\tdescription=\"Says Hello\","
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:600
msgid "\t\tgesture=\"kb:control+NVDA+1\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:601
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:607
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:817
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1000
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1024
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1050
msgid "\t)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:605
msgid "\t\tdescription=\"Says good bye\","
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:606
msgid "\t\tgestures=[\"kb:Control+NVDA+2\", \"kb:Control+NVDA+3\"]"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:611
msgid "#### Script decorator arguments"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:612
msgid ""
"You can pass in the following information about a script to script decorator:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:613
msgid ""
"* description: short description about a script. This will be presented in "
"input help mode and in input gestures dialog."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:614
msgid ""
"* category: the category associated with this script, used to group the "
"script under an appropriate category in input gestures dialog."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:615
msgid "* gesture: a single gesture bound to the script."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:616
msgid "* gestures: a list of gestures bound to this script."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:617
msgid "### Example 4: Scripts for specific objects"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:618
msgid ""
"As in specialist objects above, scripts can be assigned to certain objects "
"by specifying gestures dictionary for this particular object. Here is an "
"example from an app module which defines scripts for main window of a media "
"player program, defined using script decorator:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:620
msgid "# Scripts for objects for a program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:621
msgid "from NVDAObjects.IAccessible import IAccessible"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:622
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:811
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:855
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:995
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1019
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1043
msgid "from scriptHandler import script"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:623
msgid "class Player(IAccessible)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:624
msgid "\t@script(gesture=\"kb:NVDA+T\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:625
msgid "\tdef script_saySongName(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:626
msgid ""
"\t\tui.message(self.songTitle_) #Suppose if that variable has been defined."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:627
msgid "\t# And in the main app module:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:628
msgid "\tdef chooseNVDAObjectOverlayClasses(self, obj, clsList):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:629
msgid ""
"\t\tif obj.windowClassName == \"PlayerWindow\": clsList.insert(0, Player)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:631
msgid ""
"There is something odd going on with this example: normally, when you press "
"NVDA+T, NVDA says the title of the current window, but in this example, it "
"announces the name of the song instead. This is the result of script lookup "
"(see below) where the script for the current object is run instead of title "
"script from global commands. This is a common way of binding new scripts at "
"runtime."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:632
msgid "### Script lookup order and command conflicts"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:633
msgid ""
"As you write add-ons with scripts, you need to remember the following script "
"lookup order when trying to assign commands to scripts:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:634
msgid "1. Global plugins."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:635
msgid "2. App modules for the currently focused program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:636
msgid "3. NVDA objects we're dealing with."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:637
msgid "4. Global commands."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:638
msgid ""
"For example, if you assign the command NVDA+Shift+Y to an app module script, "
"NVDA will run that script from that program since no global plugin is using "
"this command. However, if a global plugin which uses that command is "
"installed, the script from the global plugin will be run instead of the app "
"module script. Similarly, from the above example, when using programs other "
"than that media player, NVDA will run a command from the global commands "
"collection when NVDA+T is pressed; but as long as we're using this media "
"player, NVDA+T will announce the name of the song (NVDA objects in app "
"modules takes precedence)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:639
msgid ""
"Because of the above rule, one should be careful when defining a script for "
"an add-on. To help you with this, keep the following guidelines handy:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:640
msgid ""
"1. First, consult the NVDA commands quick reference to see if the command "
"you wish to use has been defined in global commands. You should try to "
"minimize conflicts with built-in NVDA commands. An exception is commands for "
"app modules where same command may be used differently from one program to "
"another."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:641
msgid ""
"2. Read the documentation for add-ons (especially global plugins) to see if "
"any add-on is using this command, and if so, contact the add-on author to "
"come up with an alternate binding."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:642
msgid "### A few other remarks on scripts"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:643
msgid ""
"* You can use any modifiers as parts of commands for scripts (for example, "
"Alt+NVDA+letter). However, in order to avoid command conflicts, try "
"minimizing use of commands that programs might use such as Control+letter, "
"Alt+Shift+letter and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:644
msgid ""
"* When assigning keyboard commands, keyboard key labels are case insensitive."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:645
msgid ""
"* You can define a script category to show the user where your add-on script "
"will be used (shown in Input Gestures dialog in NVDA 2013.3 or later). There "
"are two ways of doing this: module level via `scriptCategory` attribute from "
"the add-on module, or designating the category for each script via either "
"`script_name.category` attribute or as part of script decorator by defining "
"the category argument. It is recommended that you name your script category "
"the same as the add-on name."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:646
msgid ""
"* You can define the input help mode message for a script by either using "
"`__doc__` attribute (commonly known as docstrings) or by passing in a short "
"description to description argument of script decorator. Script description "
"is also used in Input Gestures dialog to show the description for a script."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:647
msgid ""
"* If you need to leave one or more scripts unassigned (for example, if a "
"gesture conflicts with a global command), do not include the gesture binding "
"for the script in the gestures dictionary or do not define gesture/gestures "
"argument in script decorator. This helps minimize gesture conflicts and "
"allows users to assign custom gestures for scripts."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:648
msgid ""
"* If there are two objects, A and B and if B inherits from A and both "
"contain same command for a script, you can assign \"None\" to script name in "
"object B (subclass) to bypass a command when dealing with commands from "
"object B. For example, if F10 is defined for both objects and F10 is not "
"used in object B, you can assign object B's F10 command to \"None\" so F10 "
"can be sent to the operating system. This is implemented in some NVDA core "
"modules and in StationPlaylist Studio add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:649
msgid "### Events"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:650
msgid ""
"You can ask NVDA to do something if something happens. For example, you can "
"ask NVDA to say the new name for an object when it's name changes, or say "
"the new item's value when the item gets focused. These conditions, or "
"actions are called events."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:651
msgid "When an event occurs, NVDA does the following:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:652
msgid "1. Finds out what the event was (for example, a check box gains focus)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:653
msgid ""
"2. Performs actions for the event (e.g. says the name and the checked state "
"of this check box)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:654
msgid ""
"3. Passes the event down the chain in case other objects may have actions "
"associated with the event."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:655
msgid ""
"Depending on where the event is defined, you'll need two or four things when "
"defining an event. If it is declared from the add-on module, the required "
"parts are event name, the add-on module (self), object and next handler in "
"case the object has other events associated with it. If it is defined as "
"part of an object, the name of the event and the object (self) is required."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:656
msgid "A typical event routine looks like this:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:658
msgid "\tdef event_eventName(self, obj, nextHandler):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:659
msgid "\t\t# Do some action."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:662
msgid "For object events, use:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:664
msgid "\tdef event_eventName(self):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:665
msgid "\t\t# Event routine."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:667
msgid ""
"In fact, we have met an actual \"event\" before: `event_NVDAObject_init`. "
"This is a special event (one of many events defined in NVDA) fired when NVDA "
"meets a new object and initializes it according to your input (see the "
"section on overriding object properties for more information). Let's meet "
"other events you may see while writing your add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:668
msgid "### Example 5: Announcing the changed name of a control"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:669
msgid "The below code came from one of the add-on app modules."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:670
msgid ""
"Below is a routine for an event which tells you the name of some text on the "
"screen when the text changes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:673
msgid "\t\tif obj.windowClassName == \"TStaticText\": ui.message(obj.name)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:676
msgid ""
"As you can see, whenever the text object's name changes, NVDA will announce "
"the new name to the user. The \"name change\" event is one of the many "
"events that you can define custom actions for in your add-on (the complete "
"list is below)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:677
msgid ""
"Note: You can define events for any object of your choice, especially "
"controls in a program (where you can define custom actions for events in "
"your app module). If this is the case, you need to make sure that the "
"control meets certain conditions you set, such as name, role and so forth to "
"let NVDA keep an \"eye\" on that specific object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:678
msgid "### List of possible events"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:679
msgid ""
"This is a list of common events you may define custom actions for in your "
"add-on:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:680
msgid ""
"* gainFocus: The user has moved the focus to a specific control, or the user "
"has just switched to a program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:681
msgid "* loseFocus: Opposite of gainFocus."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:682
msgid ""
"* nameChange: The name of a control has changed (see above for an example)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:683
msgid ""
"* valueChange: The value of the control such as text of a field has changed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:684
msgid ""
"* stateChange: Useful to keep track of whether check boxes, buttons and "
"other control's state (checked, selected, etc.) has changed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:685
msgid ""
"* foreground: the object we're interested in has become the foreground "
"window of the program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:686
msgid "Less common events that are used in specific situations include:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:687
msgid "* typedCharacter: the user has entered something on a keyboard."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:688
msgid ""
"* appModule_gainFocus: user has switched to the app where an app module is "
"defined. Common uses include adding touchscreen commands for specific apps, "
"announcing extra info about the current state of the app and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:689
msgid "* appModule_loseFocus: opposite of appModule_gainFocus."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:690
msgid ""
"* descriptionChange: the description for a control provided by the "
"accessibility API has changed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:691
msgid ""
"* suggestionsOpened: used in controls where one can type something and "
"suggestions will be shown based on entered text. The default implementation "
"in NVDA plays a sound to indicate appearance of suggestions."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:692
msgid ""
"* suggestionsClosed: opposite of suggestionsOpened. The suggestions events "
"requires NVDA 2017.3 and the object must inherit from `NVDAObjects.behaviors."
"EditableTextWithSuggestions` class."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:693
msgid "### Events within objects"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:694
msgid ""
"The above section described event routines from an add-on's perspective. "
"This is just one way of defining events. The other way is to define events "
"from within objects, and is same as above except that it only takes one "
"argument (self)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:695
msgid "### Other components"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:696
msgid ""
"Besides objects, scripts and events, you can add other components in your "
"add-on for working with specific controls. For example, you can use a "
"textInfo module (such as NVDAObjects.NVDAObjectTextInfo) for working with "
"text and text offsets in edit fields and other controls, or use external "
"modules from third-party developers for specialized tasks such as windows "
"registry access (_winreg) and others. You can also use Python's built-in "
"modules (such as time, functools, etc.) for advanced operations."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:697
msgid ""
"One notable component is text infos, a way to let add-ons gain access to "
"text located on objects. You can access text, move around in it (such as via "
"lines and words), and manipulate portions via marking ranges and offsets. "
"For most add-ons, it isn't required to define custom text infos, as the "
"underlying accessibility API will provide suitable information."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:698
msgid ""
"Another useful component is mathematical text presentation library "
"(mathPres). This is used to allow NVDA to access math content in places such "
"as web browsers, as well as for add-ons to define custom math presentation "
"layers and ways to access math content in various applications. So far, math "
"content retrieval is done on text marked with MathML with MathPlayer "
"installed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:699
msgid ""
"If you wish to store settings for your add-on, use ConfigObj or NVDA's built-"
"in configuration manager to store configuration files and settings. "
"ConfigObj defines settings as a collection of dictionaries that can be "
"updated in real time. You can also pass in validation map to allow NVDA's "
"configuration manager (config.conf)to validate settings for your add-on and "
"let add-on settings become profile-specific settings."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:700
msgid ""
"Finally, you can ask NVDA to perform some routines while the add-on is "
"loading or being terminated. This is done by defining `__init__` and "
"`terminate` method for the add-on. Depending on the plugin type, use:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:701
msgid "* For global plugin:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:702
msgid "  ```python"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:703
msgid "\t  def __init__(self):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:704
msgid "  \t\t# The routine to do when the global plugin loads."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:705
msgid ""
"  \t\t# Warning! You should always call super method first in order to "
"initialize various foundations correctly."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:706
msgid "  \t\tsuper(GlobalPlugin, self).__init__()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:707
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:709
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:713
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:715
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:719
msgid "  ```"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:708
msgid "* For app modules:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:710
msgid "  \tdef __init__(self, *args, **kwargs):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:711
msgid "  \t\tsuper(AppModule, self).__init__(*args, **kwargs)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:712
msgid "  \t\t# What NVDA should do when the app module loads."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:714
msgid "* For terminating, regardless of the add-on type:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:716
msgid "  \tdef terminate(self):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:717
msgid "  \t\t# Do something when the add-on terminates."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:718
msgid ""
"  \t\t# Warning! Never initialize ANY core module such as GUI in terminate "
"method as doing so will prevent NVDA from exiting properly."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:720
msgid "### Let's build an add-on"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:721
msgid ""
"Now that we have a basic overview of components of add-ons, we're ready to "
"build some simple add-ons. But first, let's go over the actual add-on "
"development process, debugging tips, do's and don'ts and other tips."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:722
msgid "### Add-on planning and development tips"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:723
msgid ""
"Over the years, the NVDA community built a number of powerful add-ons for "
"NVDA users. Over the course of these years, the add-on writers gathered some "
"useful tips when it comes to writing your own add-ons. Here are a number of "
"them:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:724
msgid ""
"* Get to know NVDA: it is important that you become familiar with NVDA "
"commands, concepts and tips. Subscribe to NVDA users groups to learn more "
"about NVDA and how NVDA works, as you'll be extending it via your add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:725
msgid ""
"* Get to know the product at hand: as noted earlier, it is important that "
"you get to know the software you're writing the app module for, synthesizers "
"and braille displays you'll be writing the driver for and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:726
msgid ""
"* Plan ahead: if you know you'll be maintaining your add-on for a number of "
"months or years, it is useful to have a plan and write the add-on code to "
"prepare for future extensions. For example, working on features that you "
"need to implement now, dividing parts of a program to objects and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:727
msgid ""
"* Ready to debug and test your add-on: writing your add-on code is just one "
"part of the overall add-on development. The other part is testing and "
"debugging your add-on to make sure that users use your add-on with minimal "
"errors. As you write your add-ons, be sure to test your code regularly."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:728
msgid "* Most importantly, have fun."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:729
msgid "### Do's and don'ts"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:730
msgid ""
"Here are a few things you should do and not do throughout add-on development:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:731
msgid ""
"1. Do talk with users: it is important to remember that your add-ons will be "
"used by NVDA users around the world, so it is important to keep in touch "
"with your users to gather bug reports and suggestions."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:732
msgid ""
"2. Do ask for help if needed: If you're stuck, you can ask other add-on "
"writers anytime for solutions or tips, or if you need to, ask for "
"collaboration from other add-on developers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:733
msgid ""
"3. Do test your add-on on more than one computer: sometimes, a bug in one "
"computer may help you solve problems on your add-on on your computer later."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:734
msgid ""
"4. Don't use fancy code without understanding your intentions: a typo or "
"forgotten indentation can become troublesome when you debug an add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:735
msgid ""
"5. Do keep up to date with NVDA core changes: sometimes, you may find that "
"your add-on might not work due to NVDA core code changes. Be sure to read "
"\"changes for developers\" section in NVDA's What's New document to keep up "
"to date with code changes that may affect your add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:736
msgid "### Frequently Asked Questions about add-on components and development"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:737
msgid ""
"Q. When I try to obtain an object using an index, it fetches an object one "
"after the index I wrote.  "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:738
msgid "This is the side effect of zero-based indexing (count starts at 0)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:739
msgid "Q. When importing a module, NVDA says it cannot locate the module.  "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:740
msgid ""
"Did you type the correct name of the module? Did you extract the module "
"files in the correct location? Try fixing the typo, look at the import path "
"and try importing again."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:741
msgid ""
"Q. What is the difference between simple review and normal review and which "
"one should I use?  "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:742
msgid ""
"Simple review excludes layout objects such as windows, grouping and so on "
"which are placed for layout purposes. Normal review includes these as well. "
"The choice of using simple review versus normal review depends on your "
"situation."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:743
msgid ""
"Q. The command for my app module does not work in my app module; instead, "
"NVDA does something else.  "
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:744
msgid ""
"Check if a global plugin which uses the command is installed. First, disable "
"the global plugin and try again."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:745
msgid "Q. How can I use Win32 API in my add-on or object?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:746
msgid ""
"There is a document written by an add-on developer which talks about using "
"Win32 API in your add-on. Select [this link][Using Win32 API] to view this "
"document."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:747
msgid "Q. How can I create dialogs in my add-on?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:748
msgid ""
"See the [Interactive Dialogs](#user-content-interactive-dialogs) section."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:749
msgid ""
"Q. Can I create functions and assign variables outside the module classes?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:750
msgid ""
"Yes. This is useful if you need to reference them from inside the add-on "
"class. For example, you may have a function that's defined outside your "
"class that you'll need to use from more than one method in a global plugin "
"class."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:751
msgid "Q. I want to save user settings for my add-on. Can this be done?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:752
msgid ""
"Yes. You'll need to use a library that allows persistence, such as ConfigObj "
"library (configObj), JSON, or pickle to manage configuration. Some add-ons "
"(such as OCR) which uses configuration files store their configuration as an "
"ini file in NVDA's user configuration folder. For global plugins, you can "
"load and save user configuration from the add-on when the add-on is created "
"(__init__) or finished (terminate), respectively. You cannot do this easily "
"with app modules. Also, you'll need to provide a facility (commands, "
"dialogs, etc.) where users can configure add-on settings."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:753
msgid ""
"Q. I have a script which calls a function that runs for a long time, and I "
"cannot run NVDA commands when my script runs."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:754
msgid ""
"One way to fix this is using threads (separate, independent  operations in a "
"program) via Python's threading module. In order to do this, create a method "
"which you know will run for a long time, then from the script which calls "
"this method, create a new thread (see Python's threading module "
"documentation) that'll be in charge of running this method. This way other "
"NVDA commands can be performed while the add-on method does its work (see "
"Google Speech Recognition module for an example code)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:755
msgid ""
"Q. I would like to port a module written in Python 2 syntax for use as an "
"NVDA add-on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:756
msgid ""
"This cannot be done easily. One handy module for this purpose is six, which "
"allows running Python 2 and 3 code. NVDA 2019.3 and later is strictly a "
"Python 3 release."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:757
msgid ""
"Q. My add-on uses GUI facility, and after installing NVDA 2018.3, I get "
"errors related to wxPython."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:758
msgid ""
"NVDA 2018.3 uses wxPython 4, whereas earlier versions use older wxPython "
"releases. If you want to support older NVDA releases, you need to use "
"conditional statements (if/else) and version checks so the appropriate code "
"path can be used."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:759
msgid ""
"Q. After installing NVDA 2019.1, users say my add-ons are not compatible."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:760
msgid ""
"NVDA 2019.1 introduces add-on compatibility flags (sometimes called "
"compatibility range) that tells NVDA the following information:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:761
msgid ""
"* Minimum NVDA version (minimumNVDAVersion): an add-on can specify minimum "
"NVDA version required for the add-on. This is useful if you need to use "
"features introduced or changed in a given NVDA release without supporting "
"older NVDA releases."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:762
msgid ""
"* Last tested NVDA version (lastTestedNVDAVersion): tells NVDA the highest "
"tested release for the add-on. Without this flag being set, NVDA will treat "
"your add-ons as incompatible with the latest release."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:763
msgid ""
"Words in parentheses are manifest keys. Starting in NVDA 2019.1, these "
"compatibility flags are mandatory for all add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:764
msgid ""
"Q. My app module that was stored under appModules folder in user "
"configuration folder isn't working in NVDA 2019.1."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:765
msgid ""
"This is because NVDA 2019.1 will not load custom extension code stored in "
"subfolders of user configuration folder anymore. See the section on "
"scratchpad for details."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:766
msgid ""
"Q. Should I convert gestures dictionary and script docstring attribute to "
"script decorator?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:767
msgid ""
"It is up to you whether or not you wish to use older gestures dictionary and "
"script docstring or the newer script decorator to define script information. "
"For new add-ons, script decorator is preferred for easily defining script "
"information on the spot."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:768
msgid "Q. What is the recommended coding style for add-ons?"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:769
msgid ""
"The following is baseline coding style for add-ons, deriving from NVDA "
"screen reader coding style:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:770
msgid "* Use tab for indentation."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:771
msgid "* Use camel case for function and variable names e.g. someFunction."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:772
msgid "Q. I noticed that NVDA does not come with all Python libraries."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:773
msgid ""
"Most notably, NVDA does not ship with asyncio. You must include additional "
"libraries inside your add-on component folder."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:774
msgid "Q. I need to manipulate environment variables such as system path."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:775
msgid ""
"An effective way to do this is prepending a desired string (such as the path "
"to an executable you need to run) to existing environment variable value. "
"This allows your add-on to work with modified values without breaking NVDA "
"and/or Windows components while NVDA is running."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:776
msgid ""
"We did not include programming or Python-related FAQ's, as there are sites "
"which answer questions about Python such as coding style. Consult these "
"documents if you have issues with Python code."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:777
msgid ""
"Now that we have covered basic add-on components, let's learn about how to "
"package what you know in your add-on modules themselves: global plugins, app "
"modules, drivers, and enhancers."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:778
msgid "## Introduction to global plugins"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:779
msgid ""
"A global plugin adds features available everywhere. For example, if there is "
"a control that will be used in many applications, then you can write a "
"global plugin to handle them throughout NVDA. Another example is adding "
"additional features to NVDA that can be used in all programs, such as OCR "
"capability, place marker management and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:780
msgid ""
"A global plugin is a Python source code (.py) file with the name of your "
"plugin. For example, if you're adding support for rich edit fields in many "
"applications, you can name your plugin as richEditSupport.py. When naming "
"them, try be brief so you can see what your plugin does."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:781
msgid ""
"IMPORTANT: although enhancers may appear to be identical with global plugins "
"(and several enhancers were created as global plugins in the past), they are "
"not the same. See Enhancers section for details."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:782
msgid "### Typical development plan for global plugins"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:783
msgid "Typically, a global plugin is developed thus:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:784
msgid ""
"1. You or someone suggests a feature or support for a particular control "
"across different programs."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:785
msgid ""
"2. You plan your global plugin (see the section on when to write or not "
"write global plugins)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:786
msgid ""
"3. You write your global plugin and test it. Once it is done and tested, you "
"release the plugin."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:787
msgid ""
"Since global plugins are Python files, you can use the full power of python "
"in your add-on code. Also, since global plugins have access to full power of "
"NVDA code such as events, scripts and objects, you can use the concepts you "
"learned from previous sections."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:788
msgid "### The global plugin code"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:789
msgid ""
"As shown earlier, the procedure for writing global plugins is same as "
"writing any Python program, except that you import globalPluginHandler and "
"put your add-on code in a class called `GlobalPlugin` which inherits from "
"`globalPluginHandler.GlobalPlugin` (see the example in the first intro "
"chapter). If you need to use third-party modules, you need to place the "
"package in the same folder as the global plugin file and import the external "
"module(s). Then define objects (usually overlay objects), methods and so on "
"in your code."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:790
msgid "### When to write or not write global plugins"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:791
msgid ""
"Since global plugins are used everywhere, you might be tempted to write "
"support for a single application using global plugin alone. However, this is "
"not the case. There are other guidelines to keep in mind when deciding "
"whether to write a global plugin or not:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:792
msgid "You might consider writing a global plugin if:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:793
msgid "1. You or a user wishes to use a certain feature everywhere."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:794
msgid ""
"2. You need to support same controls across different applications, provided "
"that the control behaves the same in these programs."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:795
msgid "You should not write a global plugin if:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:796
msgid "1. If you wish to enhance support for a single application."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:797
msgid "2. You are writing support for speech synthesizers or braille displays."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:798
msgid "### A Few more things to remember about global plugins"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:799
msgid ""
"* When you write scripts in your global plugin, the commands you assign to "
"them will take precedence (they are looked up first). Therefore it is "
"important to consult the NVDA user guide and help for other add-ons to "
"minimize command conflicts."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:800
msgid ""
"* Each global plugin must be placed in globalPlugins directory in your add-"
"on folder structure."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:801
msgid ""
"* It is possible to use more than one Python file in your global plugin. If "
"this is the case, you need to put them in a folder (name must be the name of "
"the plugin) inside globalPlugins folder, with the main plugin file named "
"__init__.py."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:802
msgid ""
"* If you need to do something when the global plugin is loaded (such as "
"loading the user configuration), you need to write an __init__ method in "
"your plugin class. In this method, you need to call the __init__ method in "
"the super (globalPluginHandler.GlobalPlugin) first before doing other "
"startup work. Also, if you need to do something when the global plugin ends, "
"define terminate method."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:803
msgid "Let's go through some examples and exercises."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:804
msgid "### Example 1: Writing computer braille using QWERTY keyboard"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:805
msgid ""
"You are meeting with a client who uses Duxbury braille translator (a popular "
"braille document production program). This client is working with another "
"user of NVDA who wishes to write computer braille from his computer keyboard "
"everywhere. Based on this, you decide to write a global plugin, and found a "
"module that allows the computer keyboard to act like a braille keyboard "
"using a function."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:806
msgid "The global plugin, named brailleWrite.py, would look like this:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:808
msgid "# An example global plugin."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:809
msgid "import qtbrl # The braille entry module."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:813
msgid "\tbrlentry = False # Braille entry is not active."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:815
msgid "\t\tdescription=\"Toggles braille entry on or off.\","
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:816
msgid "\t\tgesture=\"kb:NVDA+X\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:818
msgid "\tdef script_toggleBrailleEntry(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:819
msgid ""
"\t\tself.brlentry = True if not self.brlentry else False # Toggle braille "
"entry mode."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:821
msgid "With this background in mind, try some of the short exercises below."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:822
msgid "### Exercises"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:823
msgid ""
"1. Write a global plugin named nvdaVersion.py to say the current NVDA "
"version when NVDA+Shift+V is pressed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:824
msgid ""
"2. A user wants to hear the time announced every minute. Using the clock on "
"the system tray, write a global plugin to announce when the time changes "
"(hint: you need to use an event and check the role of the clock object)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:825
msgid "## Introduction to app modules"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:826
msgid ""
"An app module enhances support for a particular program. For example, you "
"can write an app module which adds convenience commands for reading various "
"parts of the screen, or you can define how a particular control should "
"behave in a program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:827
msgid ""
"An app module is a Python (.py) file with the name corresponding to the "
"executable name of a program. For example, an app module for Winamp is named "
"winamp.py since Winamp's executable name is winamp.exe."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:828
msgid ""
"NVDA itself comes with several app modules, such as Winamp, Adobe Reader, "
"Microsoft Office programs and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:829
msgid "### Differences between app modules and global plugins"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:830
msgid ""
"At first glance, app modules may look the same as any global plugin. "
"However, app modules have additional properties that global plugins lack, "
"including:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:831
msgid ""
"* Instead of `globalPluginHandler`, you need to import `appModuleHandler`. "
"The class to implement is `AppModule(appModuleHandler.AppModule)`."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:832
msgid ""
"* App modules are stored in appModules folder in your add-on directory "
"structure and is named the same as the executable name of the program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:833
msgid ""
"* You can ask NVDA to enter sleep mode in a program where NVDA will not "
"speak or braille anything while using the program, and any keyboard commands "
"you press will be handled by the program directly. This is done by setting "
"`sleepMode` attribute in the AppModule class to True."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:834
msgid ""
"* Some apps present information in the form of a webpage, and if this "
"happens, browse mode can be used. However, in NVDA 2019.2 and later, this "
"ability is disabled for apps such as Skype. To restore browse mode "
"functionality, you need to set disableBrowseModeByDefault to False."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:835
msgid "* The `event_NVDAObject_init` routine is only available in app modules."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:836
msgid ""
"* You can ask NVDA to keep an eye on an object to handle events for them "
"even if the user is using another app."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:837
msgid "### App module development process and strategies"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:838
msgid "A typical app module is developed thus:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:839
msgid "1. You or a user requests enhanced support for a program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:840
msgid ""
"2. If possible, contact the app vendor (programmer) to ask accessibility "
"improvements for the program from their end."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:841
msgid ""
"3. With or without cooperation from app vendor, you would examine how the "
"program works and areas on the screen that needs to be read out."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:842
msgid ""
"4. Write and test the app module (with users) until the app module is ready "
"for release."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:843
msgid "As you write app modules, try these tips:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:844
msgid ""
"1. Use objects to represent parts of a program. This is done in two steps: "
"define the control for parts of a program via objects (inheriting from some "
"object such as IAccessible), then use `chooseNVDAObjectOverlayClasses` "
"routine to tell NVDA to work with your custom object when working with that "
"control. See overlay classes section for tips."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:845
msgid ""
"2. If possible, test your app module using two or more versions of the "
"program to make sure your app module works with those versions."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:846
msgid ""
"3. You should not incorporate all desired features in version 1.0 - leave "
"some of them for a future release."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:847
msgid "### Example 2: Simple app module in Notepad"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:848
msgid ""
"Suppose you wish to find out which line you're editing in Notepad. Assuming "
"that Notepad will show status bar at all times, you wish to assign a key "
"combination to read the current line number."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:849
msgid "The app module for Notepad would look like this:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:851
msgid "# Example app module for Notepad, notepad.py."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:857
msgid "\t@script(gesture=\"kb:NVDA+S\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:858
msgid "\tdef script_sayLineNumber(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:859
msgid "\t\t# Suppose line number is in the form \"  ln 1\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:860
msgid "\t\tlineNumList = api.getStatusBar().getChild(1).name.split()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:861
msgid "\t\tlineNum = lineNumList[0]+lineNumList[1]"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:862
msgid "\t\tui.message(lineNum)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:864
msgid ""
"So whenever you run Notepad, when you press NVDA+S, NVDA will say line "
"number."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:865
msgid "### Example 3: Silencing NVDA in Openbook"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:866
msgid ""
"Openbook is a scanning and reading program from Freedom scientific. Since "
"Openbook provides speech, you can tell NVDA to enter sleep mode while "
"Openbook (openbook.exe) is running using the below app module:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:868
msgid "# Silencing NVDA in openbook, openbook.py."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:871
msgid "\tsleepMode = True"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:873
msgid ""
"With that single line of code, NVDA will enter sleep mode in that program "
"(you should do this only if the program provides speech and/or braille "
"support on its own)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:874
msgid ""
"### Example 4: Announcing control property changes while using another app"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:875
msgid ""
"You can ask NVDA to handle specific events while focused on another app. "
"This is done by calling eventHandler.requestEvents in app module's __init__ "
"method. In order to invoke this, you need process ID (PID) for the "
"application, window class name for the object and the name of the event to "
"be handled."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:876
msgid ""
"The below code allows NVDA to announce value changes while focused on "
"another application."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:878
msgid "# Example app module for a messenger app."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:879
msgid ""
"# The object we wish to track has window class name of \"MessengerWindow\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:881
msgid "import eventHandler"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:883
msgid "\tdef __init__(self, *args, **kwargs):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:884
msgid "\t\tsuper(AppModule, self).__init__(*args, **kwards)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:885
msgid ""
"\t\teventHandler.requestEvents(\"valueChange\", self.processID, "
"\"MessengerWindow\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:887
msgid ""
"Once defined, even if focused in another app, new messages (values) will be "
"announced."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:888
msgid "### Useful app module properties and methods"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:889
msgid ""
"`sleepMode` and `processID` are just two of many attributes that app modules "
"have. Other useful properties and methods used in app modules include the "
"following:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:890
msgid "* appName: the name of the app (usually the name of the executable)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:891
msgid "* productName: Records the actual product name for the app."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:892
msgid "* productVersion: Records the version of the app."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:893
msgid ""
"* is64BitProcess: if true, the app is a 64-bit process (only true if you're "
"using a 64-bit app under 64-bit Windows versions)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:894
msgid ""
"* dumpOnCrash: if you are debugging apps that crashes often, you can call "
"this function to let NVDA save a crash dump of this app in the temp files "
"directory so you can retrieve it later."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:895
msgid ""
"* disableBrowseModeByDefault: some apps are essentially web documents, and "
"as such, browse mode will be invoked. You must set this value to True if you "
"want to force NVDA to treat this application as a proper aplication i.e. "
"disable browse mode."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:896
msgid "* appPath: records the path to the app executable."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:897
msgid ""
"* appArchitecture: the intended processor architecture for the app e.g. x86, "
"AMD64, ARM64."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:898
msgid ""
"* isWindowsStoreApp: applicable on Windows 8, 8.1, and 10, determines if the "
"app is hosted inside an app container such as a Store app."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:899
msgid ""
"And other properties. Type dir(obj.appModule) from [Python Console] for the "
"complete list."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:900
msgid "### Other remarks on app modules"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:901
msgid "Here are other remarks regarding app modules:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:902
msgid ""
"* If you find that different versions of the program are laid out "
"differently e.g. locations for controls are different, then you can write "
"code which can handle these cases. There are a number of options you can "
"choose from: adding some constants in your app module to handle different "
"object locations, writing code for these controls (one per version) in "
"custom objects which will be chosen in overlay class method and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:903
msgid ""
"* If possible, try working with services that the app provides, such as COM "
"(Component Object Model) methods (for example, Outlook app module), API's "
"the app provides (such as Winamp) and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:904
msgid ""
"* To support an application that works the same as another program "
"(especially if you're writing an app module for a 64-bit version of a 32-bit "
"program for which you also wrote an app module), use the following code "
"fragment (called aliasing):\\"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:905
msgid "  `from appName import *`\\"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:906
msgid ""
"  where appName is the name of the app module and * (asterisk or star) means "
"import everything. For an example of this, look at NVDA's app modules for "
"Miranda32 and Miranda64."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:907
msgid ""
"* If you wish to extend an app module that comes with NVDA, use the "
"following code fragment (this is called overriding the built-in module):\\"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:908
msgid "  `from nvdaBuiltin.appModules.appName import *`\\"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:909
msgid ""
"  Where appName is the app module you wish to extend. For example, if you "
"wish to support different controls in Windows calculator (calc.py), use:\\"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:910
msgid "  `from nvdaBuiltin.appModules.calc import *`\\"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:911
msgid ""
"* Many app modules (both built-in and third-party ones) use app names as "
"part of the name for a constant (a value that doesn't change). For example, "
"in NVDA's Powerpoint module (powerpnt.py), many constants start with \"PP\". "
"Similarly, in Station Playlist Studio app module, many constants in the app "
"module file (splstudio.py) starts with \"SPL\". This is used to remind you "
"where these constants are used."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:912
msgid "## Drivers"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:913
msgid ""
"A driver allows software such as NVDA to communicate with hardware or use "
"functionality provided by another software. Typically, when people speak of "
"drivers, they usually refer to a program installed on a computer that allows "
"software to communicate with a specific piece of hardware, such as video "
"cards, keyboards and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:914
msgid ""
"In NVDA, drivers refer to modules that NVDA can use to communicate with a "
"speech synthesizer or a braille display. For instance, you can write a "
"braille display driver that sends braille output to your braille display, or "
"ask your synthesizer to switch languages and provide configurable settings."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:915
msgid "### Driver components"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:916
msgid ""
"All drivers (regardless of target device or software to be supported) import "
"appropriate modules such as `synthDriverHandler`. For most drivers, majority "
"of the driver code deals with communicating with the target device or "
"software, and all drivers must define the driver class (synthDriverHandler."
"SynthDriver or braille.BrailleDisplayDriver)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:917
msgid "All driver classes, at a minimum, must contain:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:918
msgid ""
"* Driver identifier: a camel-case string such as \"oneCore\" that uniquely "
"identifies a given driver."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:919
msgid ""
"* Friendly name: the name that'll appear under synthesizer or braille "
"settings dialogs."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:920
msgid ""
"* Availability flag: a class method named `check` that tells NVDA that the "
"driver is ready for use."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:921
msgid ""
"* Connection manager: a set of routines that instructs NVDA as to how to "
"locate a given synthesizer or a braille display."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:922
msgid ""
"* Output handler: a function that'll perform the actual output processing. "
"For synthesizers, `speak` method must be present; for braille displays, "
"`display` method is needed."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:923
msgid "For speech synthesizers, they need to have:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:924
msgid ""
"* Synth settings ring options: a list of synthesizer settings users can "
"adjust via synth settings ring."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:925
msgid "For braille displays:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:926
msgid ""
"* Input handlers: if input from the braille display is desirable, the driver "
"author must implement responders for commands such as braille keys, routing "
"buttons and additional hardware."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:927
msgid ""
"* Command set: a map that identifies NVDA command assignments for various "
"display hardware buttons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:928
msgid ""
"### A Few important things to remember before, during and after driver "
"development"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:929
msgid ""
"* Before writing a driver, make sure you have the needed software and/or "
"hardware."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:930
msgid ""
"* Be sure to study protocols and APIs used by a speech synthesizer or a "
"braille display (this is more so for braille displays which may implement "
"different protocols)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:931
msgid ""
"* Make sure you know how to communicate with your equipment or software - "
"ports, USB IDs, Bluetooth addresses, serial port settings, DLLs and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:932
msgid ""
"* Work with another person who happens to use the equipment or software you "
"are writing driver(s) for."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:933
msgid "### Typical driver development steps"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:934
msgid ""
"When writing drivers, you may wish to follow the recommended steps for app "
"module development (planning, talking to vendors, user test, etc.). However, "
"since drivers require intimate knowledge of hardware and/or software, you "
"should spend more time on testing your driver. This is more so if you are "
"writing a driver for a braille display which can send arbitrary commands "
"(braille commands, routing buttons, etc.)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:935
msgid "## Enhancers"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:936
msgid ""
"An enhancer is a module that helps certain groups of users use computers "
"more efficiently. Enhancers may include cursor tracking, magnification, and "
"other enhancements."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:937
msgid ""
"Currently NVDA can provide assistance through vision enhancement providers. "
"A vision enhancement provider is an enhancer that allows people with low "
"vision or sight use computers effectively by working in tandem with NVDA. "
"Enhancements may include cursor highlighting, screen curtain effect, and "
"magnifying parts of the screen. These enhancers are stored under "
"\"visionEnhancementProviders\" folder and defined as a "
"\"VisionEnhancementProvider\" class which inherits from \"vision."
"providerBase.VisionEnhancementProvider\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:938
msgid ""
"Note: because only one enhancer is supported at this time, we will refer to "
"vision enhancement provider in the sections below."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:939
msgid "### Enhancer components"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:940
msgid ""
"An enhancer such as vision enhancement provider will look similar to a "
"combination of a global plugin and a driver (see above sections for "
"explanations). For the most part, components used for drivers are "
"applicable. These include:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:941
msgid ""
"* Enhancer identifier: a camel-case string such as \"screenCurtain\" that "
"uniquely identifies this enhancer."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:942
msgid "* Friendly name: the name that'll appear under Vision dialog."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:943
msgid ""
"* Supported enhancements: a frozen set of enhancement roles this provider "
"will introduce."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:944
msgid ""
"* Startup check: a routine that will ensure NVDA is running on a specific "
"environment where the enhancer would be most helpful, such as checking for a "
"specific Windows release."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:945
msgid ""
"* Startup and shutdown: a class constructor that instructs the enhancer to "
"come online and a \"terminate\" method that shuts it down."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:946
msgid ""
"* Event registrar: if an enhancer wishes to respond to various actions "
"performed by users, it can specify follow-up actions."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:947
msgid ""
"### A Few important things to remember before, during and after enhancer "
"development"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:948
msgid ""
"* Be sure to talk to users planning to use your enhancer. For vision "
"enhancement providers, make sure the enhancements are indeed what users want."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:949
msgid ""
"* Test your enhancers with many users to make sure it is working correctly."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:950
msgid "### Typical enhancer development steps"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:951
msgid ""
"When writing enhancers such as vision enhancement providers, you may wish to "
"follow the recommended steps for driver and global plugin development "
"(planning, talking to users, user test, etc.). As these modules will affect "
"NVDA experience globally (even when switching configuration profiles), make "
"sure the enhancer does not degrade user experience for people not needing it."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:952
msgid "## Sharing your add-on and experience with others"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:953
msgid ""
"Once you've finished developing your add-ons, you might want to share your "
"code with others. Along the way, you might contribute your know-how so "
"others may benefit from your experiences."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:954
msgid ""
"This chapter is designed to give some guidance on add-on release and "
"maintenance, as well as connecting with your add-on users and other NVDA "
"core and add-on developers around the world."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:955
msgid "### The NVDA Add-ons list"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:956
msgid ""
"If you want to keep in touch with your add-on users or want to learn from or "
"contribute your add-on to others, please subscribe to [NVDA add-ons list]"
"[4]. This is a low traffic list devoted to discussing current and future add-"
"ons, as well as to review other add-ons created by members of the community "
"or have your add-on reviewed by other add-on developers around the world."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:957
msgid "### The NVDA Community Add-ons web site and code repository"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:958
msgid ""
"To download or learn more about various add-ons created by NVDA users, visit "
"[NVDA Community Add-ons web site]. You can browse currently available add-"
"ons, view add-ons under development and read add-on development guidelines."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:959
msgid ""
"For developers wishing to read the code that powers various add-ons, you can "
"search for add-on repositories stored on [GitHub]. The NVDA community add-on "
"developers use [Git] for version control."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:960
msgid "Some of the useful and educational add-on repositories are:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:961
msgid ""
"* [Add-on Template]: this is the source code repository for the community "
"add-on template."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:962
msgid ""
"* [Place markers by Noelia Martinez](https://github.com/nvdaes/"
"placeMarkers): adds place marker functionality and provides a good example "
"of using text infos."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:963
msgid ""
"* [Windows 10 App Essentials by Joseph Lee](https://github.com/josephsl/"
"wintenApps): provides improved support for Windows 10 and various universal "
"apps, considered a classic in how global plugins and app modules work "
"together and includes examples of overlay classes and control behaviors that "
"derives from UI Automation objects."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:964
msgid ""
"* [Read Feeds by Noelia Martinez](https://github.com/nvdaes/readFeeds): "
"eases discovery of feeds on various websites and includes a simple example "
"of storing and validating add-on settings."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:965
msgid ""
"* [NVDA Remote Support by Christopher Toth and Tyler Spivey](https://github."
"com/nvdaremote/nvdaremote): a popular add-on used for remote troubleshooting "
"and technical support, provides examples of how various external Python "
"libraries are used."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:966
msgid ""
"* [StationPlaylist by Joseph Lee](https://github.com/josephsl/"
"stationPlaylist): improves usage of StationPlaylist Studio, provides "
"interesting examples on overlay classes and app API, use of threads, and add-"
"on dialogs and other user interfaces."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:967
msgid "### Submitting your add-on for review"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:968
msgid ""
"If you would like to submit your add-on for distribution on community add-"
"ons website, you must request a review from a member of the add-ons "
"community as follows:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:969
msgid "1. If you haven't, subscribe to NVDA Add-ons mailing list."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:970
msgid ""
"2. Ask the community to review your add-on. Be sure to specify name, author, "
"brief description of the add-on, and public code repository if possible."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:971
msgid ""
"3. Community members will review and comment on your add-on, including "
"license and copyright, user experience, documentation, and security."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:972
msgid ""
"4. If your add-on is accepted for community add-ons website distribution, a "
"maintainer of the community add-ons website will register your add-on. This "
"includes creating a new entry for your add-on and preparing localization "
"support."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:973
msgid ""
"5. Optionally, after your add-on is accepted, you can ask the community for "
"more detailed reviews. These can include improving messages, GUI layout, "
"advanced security audit, compatibility testing, and porting to newer Python "
"versions."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:974
msgid "#### Add-on review checklist"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:975
msgid "Your add-on:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:976
msgid ""
"1. Must be licensed under GNU General Public license (GPL) version 2 or "
"later or equivalent which allows a GPL software such as NVDA to incorporate "
"your code while it runs."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:977
msgid ""
"2. Must be written in Python 3. Compatibility with Python 2 is optional but "
"not recommended starting with NVDA 2021.1 base API."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:978
msgid ""
"3. Must be compatible with latest base API release (as of May 2021, base API "
"is 2021.1)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:979
msgid ""
"4. Messages to be presented to users should be made translatable (use _() "
"Gettext function to make messages translatable). Be sure to accompany "
"translatable messages with comments for translators."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:980
msgid "## Advanced Code Examples and Features"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:981
msgid ""
"This chapter is a work in progress. If there is something you would like to "
"see here, or if you have a comment or correction, please contact one of the "
"maintainers, or ask for it on the add-ons mailing list."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:982
msgid "### Interactive Dialogs"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:983
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1062
msgid "#### Introduction"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:984
msgid ""
"To present straight forward information to your users, ui.message and ui."
"browseableMessage are usually sufficient. However, if the user needs to give "
"information back to your add-on, those aren't going to help. For that, you "
"need dialogs. Creating dialogs and the many considerations around using them "
"are outside the scope of this document, but we can help to get you started."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:985
msgid ""
"To create and use dialogs, you need to import two modules: GUI (import gui) "
"and WXPython (import wx). Read their documentation for the large number of "
"options available to you."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:986
msgid "In short:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:987
msgid ""
"* gui provides methods for constructing and displaying some standard dialogs."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:988
msgid ""
"* wx provides the actual implementation for those dialogs, and provides many "
"of the constants and extended options you will need to really make use of "
"dialogs effectively."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:989
msgid "#### Example 1: A Basic Dialog"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:990
msgid ""
"The following code will create a basic dialog, providing the user with two "
"very familiar options. See the notes after the code to understand what is "
"going on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:992
msgid "import wx  # We need this for working with dialogs and windows"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:993
msgid "import gui  # We need this for working with dialogs and windows"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:998
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1022
msgid "\t\tgesture=\"kb:nvda+shift+t\",  # Configure the key"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:999
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1023
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1049
msgid "\t\tdescription=\"Run an add-on guide example\"  # NVDA input help"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1001
msgid ""
"\tdef script_makeSillyWindow(self, gesture):\t# A normal GlobalPlugin script "
"method"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1002
msgid "\t\tdef showSillyWindow():\t\t\t# Define an internal function"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1003
msgid ""
"\t\t\tgui.messageBox(\"Warning! You are about to do nothing. But you will be "
"doing it with an important looking dialog window. Continue?\","
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1004
msgid "\t\t\t\t\"Silly Question Window\", wx.OK | wx.CANCEL | wx.ICON_WARNING)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1005
msgid "\t\twx.CallAfter(showSillyWindow)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1007
msgid ""
"If you save the above as a global plugin and load it in NVDA, then press NVDA"
"+shift+t, you should find yourself in a new window."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1008
msgid ""
"The window is generated by the call to gui.messageBox. The first parameter "
"is the text of the window, the second parameter is the title of the window, "
"and the third parameter contains a list of constant flags which wx uses to "
"generate the dialog's buttons and other attributes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1009
msgid "* wx.ICON_WARNING, causes the window to behave as a Windows warning."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1010
msgid "* wx.OK, causes the window to display the standard OK button."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1011
msgid "* And wx.CANCEL is the same for cancel."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1012
msgid ""
"Unfortunately, if we just call gui.messageBox directly, it will usually "
"cause NVDA to hang, unless it is run from the main thread. To get around "
"that problem, we use wx.CallAfter to queue the dialog for display in the "
"main thread. However, wx.CallAfter can not call gui.messageBox directly: it "
"must do so through some other method or function. In this example we achieve "
"that by using a nested function the only purpose of which is the one-time "
"generation of that dialog."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1013
msgid "#### Example 2: A Three-Way Dialog"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1014
msgid ""
"Below is a more complex example, that shows how to return information from a "
"dialog, based upon which button was pressed. Note that there are many more "
"constants you can use, and types of dialog other than messageBox. This "
"section is only an introduction to the subject to get you started."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1016
msgid "import wx"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1017
msgid "import gui"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1025
msgid "\t@script(gesture=\"kb:nvda+shift+t\")\t\t# Configure the key"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1026
msgid "\tdef script_askPointlessQuestion(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1027
msgid "\t\tdef askTheQuestion():\t\t\t# Define an internal function"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1028
msgid ""
"\t\t\tresult = gui.messageBox(\"\"\"Warning! You are about to answer a "
"pointless question."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1029
msgid "Fortunately you have this great window to do it in!"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1030
msgid "Do you wish to proceed?\"\"\","
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1031
msgid "\t\t\t\t\"Silly Question\", wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1032
msgid "\t\t\tif result == wx.YES: answer = \"yes\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1033
msgid "\t\t\telif result == wx.NO: answer = \"no\""
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1034
msgid "\t\t\telse: return"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1035
msgid ""
"\t\t\tgui.messageBox(\"You answered %s to the pointless question.\" "
"%(answer), \"Silly Answer\", wx.OK)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1036
msgid "\t\twx.CallAfter(askTheQuestion)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1038
msgid "### Using The Log"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1039
msgid ""
"There are more in-depth things you can do with the log than what will be "
"shown here."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1040
msgid ""
"However, most of the time, all you want to do is write a basic message into "
"the log. To do that, you can import NVDA's log singleton, and call its "
"methods just like any others."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1044
msgid "from logHandler import log  # This is what you need for logging"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1045
msgid "from datetime import date"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1048
msgid "\t\tgesture=\"kb:nvda+shift+l\",  # Configure the key"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1051
msgid "\tdef script_captainsLog(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1052
msgid "\t\ttoday = date.today().strftime(\"%Y.%m.%d\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1053
#, python-brace-format
msgid "\t\tlog.info(f\"NVDA log. Earth date, {today}.\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1054
msgid "\t\tlog.warning(\"These are the add-ons of the screen reader NVDA.\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1055
msgid ""
"\t\tlog.debugWarning(\"Its continuing mission. To seek out new opportunities "
"to improve lives!\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1056
msgid "\t\tlog.debug(\"To empower users!\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1057
msgid ""
"\t\tlog.error(\"and to boldly access software that no screen reader has made "
"accessible before!\")"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1059
msgid ""
"If you run the above in the NVDA scratchpad or a global plugin, and call it "
"by pressing the Shift+NVDA+L key sequence, you will receive between zero and "
"five log entries, depending on how your NVDA logging level is configured in "
"general settings. For example, if your log level is set to \"debug\", you "
"will find them all there, but only four of them if your log level is set to "
"\"debug warning\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1060
msgid ""
"Note: while developing add-ons, it is usually wise to have the most "
"debugging that you can, so you can gather information when things go wrong. "
"For that reason, you may want to set your logging level to \"debug\"."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1061
msgid "### Threading"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1063
msgid ""
"If a routine in an add-on runs for a long time, NVDA would appear to freeze "
"or stop responding altogether. This is where threads come in - running a "
"long-running task with a different thread, allowing NVDA to remain "
"responsive."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1064
msgid ""
"Although Python does support threads, it can run one thing at a time due to "
"global interpreter lock (GIL). Thus, on computers with multiple processor "
"cores, it is advised to use processes (via multiprocessing module) to allow "
"Python interpreters to run on all cores. However, this workaround introduces "
"latency and overhead, so for many scenarios, threads are preferred."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1065
msgid "#### Threading scenarios"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1066
msgid "Threads are useful if"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1067
msgid ""
"* You need to work on something while waiting for a result. For example, if "
"a global plugin needs to access the internet for various tasks, a separate "
"thread can be used for obtaining online information while NVDA is busy with "
"something else."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1068
msgid ""
"* Monitor things in the background without interrupting NVDA. For example, "
"an overlay class defined in an app module can use a thread to announce "
"screen information as it changes in the background."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1069
msgid ""
"* Run tasks periodically. For example, a speech synthesizer can use a timer "
"thread to determine if a hardware synthesizer is ready or not."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1070
msgid "#### Threading examples"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1071
msgid "All examples use threading module unless noted otherwise."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1072
msgid "Download content from a website via a global plugin:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1073
#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1086
msgid "\timport threading"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1074
msgid "\timport urllib"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1075
msgid "\t# Other parts of the global plugin."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1076
msgid "\tdef downloadContent(address):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1077
msgid "\t\treturn urllib.urlopen(address)"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1078
msgid "\tclass GlobalPlugin(globalPluginHandler.GlobalPlugin):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1079
msgid "\t\tdef script_downloadContent(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1080
msgid ""
"\t\t\tdownloadThread = threading.Thread(target=downloadContent, "
"args=(someWebsite,))"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1081
msgid "\t\t\tdownloadThread.start()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1082
msgid "\t\t\tdownloadThread.join()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1083
msgid ""
"We need to use a separate thread to access web content because urllib "
"(urllib.request in Python 3) blocks, making NVDA appear to freeze."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1084
msgid "Announce a message ten seconds after pressing a key from an app:"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1085
msgid ""
"There are two timers you can use: threading.Timer or wx.Timer. The below app "
"module example uses threading.Timer."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1088
msgid "\t# Other parts of an app module."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1089
msgid "\tclass AppModule(appModuleHandler.AppModule):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1090
msgid "\t\tdef script_saySomething(self, gesture):"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1091
msgid ""
"\t\t\tmessageTimer = threading.Timer(10.0, ui.message, args=(\"this is a "
"timer message\", ))"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1092
msgid "\t\t\tmessageTimer.start()"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1093
msgid ""
"One limitation with threading.Timer is that it does not support repetitive "
"tasks, and for these, you need to use wx.Timer."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1094
msgid "### Storing and Using Persistent Information Outside Your Add-on"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1095
msgid "**Coming Soon**"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1096
msgid "## Miscellaneous information"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1097
msgid ""
"Please add additional material to this guide. We at NVDA Add-on Team welcome "
"contributions from other add-on developers and users around the world."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1098
msgid "## Appendices"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1099
msgid "### Appendix A: add-on terms dictionary"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1100
msgid ""
"The below terms are used throughout this development guide as well as in the "
"add-ons community to refer to add-ons, development processes and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1101
msgid ""
"* Add-on: an extension for a program. In NVDA world, add-ons refer to "
"additional packages users can install to extend NVDA's functionality, "
"improve support for an app, or add new speech synthesizers or braille "
"displays."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1102
msgid "* Application: synonymous with program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1103
msgid "* App module: a module that adds or improves support for a program."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1104
msgid "* API: Application Programming Interface."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1105
msgid "* Base class: parent class of an object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1106
msgid ""
"* Braille display: a hardware or software that outputs text via tactile "
"braille output and/or allows users to enter text via a braille keyboard or "
"other input mechanisms."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1107
msgid ""
"* Built-in module: a module that comes with NVDA that add-ons can optionally "
"override or extend."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1108
msgid ""
"* Caret: cursor shown on screen, usually seen when editing text or "
"navigating documents."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1109
msgid "* Class: definition of an object."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1110
msgid ""
"* Driver: a program that allows another program to talk to other software or "
"hardware."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1111
msgid ""
"* Enhancer: a module that adds usability enhancements in tandem with NVDA."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1112
msgid ""
"* Event: a routine called when certain things happen such as character "
"input, changes to text on screen, a checkbox being checked and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1113
msgid ""
"* Function: a piece of code that performs something given one or more input "
"parameters and optionally returns something."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1114
msgid ""
"* Gesture: a piece of input such as key presses, touchscreen flicks, braille "
"keys and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1115
msgid "* Global plugin: a module that adds features everywhere."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1116
msgid ""
"* Module: collection of variables, functions, classes and others inside a "
"file."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1117
msgid "* Object: a class definition coming to life."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1118
msgid "* Script: a function that is attached (assigned) to a gesture."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1119
msgid ""
"* Speech synthesizer: a software or hardware that converts text and various "
"speech commands sent to it into voice output."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1120
msgid "* Variable: a temporary placeholder for some data."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1121
msgid ""
"### Appendix B: Programming and Python concepts every add-on developer needs "
"to know"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1122
msgid ""
"The below list summarizes concepts all add-on developers will need to know "
"when writing add-ons."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1123
msgid ""
"* API: a set of documentation and code samples used to let a program or "
"hardware interface with other software or hardware."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1124
msgid ""
"* Base class: a class that provides base methods, attributes and properties "
"for other objects to inherit and extend. Synonymous with superclass and "
"parent class."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1125
msgid ""
"* Child class: a class that derives its power from one or more base classes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1126
msgid ""
"* Class: definition of objects, including methods, attributes and expected "
"behaviors. All Python classes and attributes are public; they can \"become "
"private\" through use of naming conventions such as prefixing a variable "
"name with underscores (_)."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1127
msgid "* Code block: collection of code."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1128
msgid ""
"* Compiling: translating a high-level programming language into a low-level "
"language suitable for machine execution."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1129
msgid ""
"* Event-driven programming: a programming paradigm based on following, "
"reacting to and handling events."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1130
msgid ""
"* Exception: one or more runtime circumstances that prevent normal operation "
"of a program such as being denied access to a resource, name usage problem "
"in code and other cases."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1131
msgid "* GUI: Graphical User Interface."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1132
msgid ""
"* Handle: an opaque reference to a resource such as a file, TCP socket, "
"window and so on."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1133
msgid ""
"* Has versus is relationship: former referring to attributes of a single "
"class, the latter referring to inherited classes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1134
msgid ""
"* Indentation-based syntax: use of indentations such as tabs to denote code "
"blocks."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1135
msgid ""
"* Inheritance: ability for one or more parent classes to provide base "
"methods and attributes for child classes to override or extend as the need "
"arises."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1136
msgid ""
"* Interpreting: running a program written in a high-level language without "
"compiling it first."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1137
msgid "* Object: runtime instance of one or more classes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1138
msgid ""
"* Object hierarchy: how screen elements are organized via parent-child "
"(container-contained) relationship."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1139
msgid ""
"* Object-oriented programming: a programming paradigm that defines solutions "
"to problems or represent real-life things via classes and objects."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1140
msgid ""
"* Scope: where variables, functions, classes and objects are defined in code."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1141
msgid "### Appendix C: Add-on type comparison"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1142
msgid "The following table compares various add-on types and when to use them."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1143
msgid "| Task or feature | Global plugin | App module | Driver | Enhancer |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1144
msgid "| ------- | --------- | -------- | -------- | -------- |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1145
msgid "| Can be used everywhere | Yes | No | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1146
msgid ""
"| Naming restrictions | No (limited by Windows file naming conventions) | "
"Must be name of the executable | No (limited by Windows file naming "
"conventions) | No (limited by Windows file naming conventions) |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1147
msgid ""
"| Retrieve various controls, including focused control | Yes | Yes | No | "
"Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1148
msgid ""
"| Commands can be used everywhere | Yes | No | Braille display drivers only "
"if defined | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1149
msgid "| Handle events such as focus changes | Yes | Yes | No | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1150
msgid "| Define custom objects to represent controls | Yes | Yes | No | No |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1151
msgid ""
"| Define custom actions to be performed when the module loads and unloads | "
"Yes | Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1152
msgid ""
"| Perform actions when profile switching occurs and other actions | Yes | "
"Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1153
msgid "| Can modify object attributes at runtime | No | Yes | No | No |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1154
msgid ""
"| Modify speech and other output routines and presentation experience (i.e. "
"speech.cancelSpeech, braille.handler.update, etc.) | Yes | yes | No | "
"Depends on enhancer |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1155
msgid "| Include custom settings | Yes | Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1156
msgid ""
"| Can patch NVDA functions, classes and modules at will | Yes | Not advised "
"| No | Not advised |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1157
msgid "| Subject to configuration profile switches | No | Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1158
msgid ""
"| Can call external libraries written in C and other languages and bundled "
"as DLLs | Yes | Yes | Yes | Yes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1159
msgid ""
"### Appendix D: notes and references for scripters of other screen readers"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1160
msgid ""
"If you write scripts for screen readers such as JAWS for Windows or Window-"
"Eyes, be sure to go over this section as it introduces you to common tasks "
"you can do with NVDA and other notes."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1161
msgid "| Task | NVDA or Python function/class/module | Notes |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1162
msgid "| -------- | -------- | -------- |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1163
msgid "| Cancel speech | speech.cancelSpeech() | Stops speech. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1164
msgid ""
"| Speak something | speech.speakMessage(message) or as part of ui."
"message(message) | the ui.message function also performs braille output. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1165
msgid ""
"| Braille something | braille.handler.message(message) or ui."
"message(message) | Same as above. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1166
msgid ""
"| Show an HTML window | ui.browseableMessage(message, title, isHTML = True) "
"| Mimics virtual viewer except it'll be shown on screen. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1167
msgid "| Retrieve focused object | something = api.getFocusObject() | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1168
msgid ""
"| Retrieve foreground window | foreground = api.getForegroundObject() |  |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1169
msgid "| Title of the active window (if present) | foreground.name | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1170
msgid ""
"| Find out what object is navigator object | obj = api.getNavigatorObject() "
"| This may or may not be the focused control. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1171
msgid ""
"| Retrieve window handle for a given object | hwnd = obj.windowHandle | "
"Obtain object via api.get*Object() functions. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1172
msgid ""
"| Check the name of the window class | obj.windowClassName == somename | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1173
msgid ""
"| Making sure the parent object has the correct window control ID | if obj."
"parent.windowControlID == something: statement | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1174
msgid ""
"| The parent object does not provide what I want, but the grandparent does | "
"something = obj.parent.parent.attribute | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1175
msgid ""
"| The label of a list item is the name of its first child object | obj.name "
"= obj.firstChild.name | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1176
msgid ""
"| I want the control label of the focused object and description of the "
"previous object to be announced when I press NVDA+Tab | In "
"reportFocus(self): obj.name += \" \" + obj.previous.description | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1177
msgid ""
"| Announce state changes if and only if the next object is the toolbar I'm "
"looking for | In event_stateChange(self): toolbar = obj.next; if toolbar."
"role == controlTypes.Role.TOOLBAR and toolbar.attribute = "
"whatYouAreLookingFor and additional conditions ...: statement | For better "
"readability, place each statement on separate lines with correct indents "
"applied. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1178
msgid ""
"| Announcing the name of an object on screen (provided that object "
"navigation can be used) | obj = api.getForegroundObject().route...; ui."
"message(obj.name) | Try placing each statement on its own line with correct "
"indents applied. Route refers to obj.next/previous/parent/firstChild/"
"lastChild/children[index]/getChild(index) and so on. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1179
msgid ""
"| Check if the object's role is what you want | obj.role == controlTypes."
"Role.* | Role.* can be any role you are looking for. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1180
msgid ""
"| Looking for a specific text in the object's name | sometext in obj.name | "
"This is a typical string membership task. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1181
msgid ""
"| Does the control's label start with a specific text | obj.name."
"startswith(sometext) | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1182
msgid ""
"| Length of a text field with easily retrievable value | len(obj.value) | "
"This works if the value of the field can be found. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1183
msgid ""
"| Is a checkbox checked | controlTypes.State.CHECKED in obj.states | obj."
"states is a set. First, verify that the role is a checkbox. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1184
msgid ""
"| How many items are in a list | someList.childCount | Provided that the "
"list provides correct underlying implementation to obtain item count. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1185
msgid ""
"| Where the object is located on screen | obj.location | This returns a "
"tuple of four elements, namely x and y coordinates of the top-left corner of "
"the object, as well as length and width. For example, on the Shell (desktop) "
"object with screen resolution of 1920 by 1080 pixels, the return value will "
"be (0, 0, 1920, 1080. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1186
msgid ""
"| Is this an MSAA control | isinstance(obj, NVDAObjects.IAccessible."
"IAccessible) | A typical implementation is to import IAccessible from "
"NVDAObjects.IAccessible and doing isinstance(obj, IAccessible). |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1187
msgid ""
"| Position of a MSAA list item | item.IAccessibleChildID | Provided that "
"this is properly implemented. The default for controls other than list "
"items, treeview items and what not is 0. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1188
msgid ""
"| I need to work with IAccessible object methods directly | obj."
"IAccessibleObject.method | First, find out how to use the given MSAA method "
"for a control, then retrieve the IAccessible object itself and call the "
"needed method. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1189
msgid ""
"| Give me the UIA element that powers a certain UIA control | obj.UIAElement "
"| Useful if you wish to perform UIA client operations on this element. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1190
msgid ""
"| Automation ID for a UIA element | obj.UIAAutomationID | First, check if "
"the object is a UIA control. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1191
msgid ""
"| Framework used to generate this UIA object | obj.UIAElement."
"cachedFrameworkID | The GUI framework used to program this object. Commonly "
"encountered frameworks are Direct UI, Windows Presentation Foundation (WPF) "
"controls with UIA enabled, XAML (eXtensible Application Markup Language) and "
"Microsoft Edge. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1192
msgid ""
"| I want to ask UIA about values of a specific property | obj."
"_getUIACacheablePropertyValue(propertyID) | Provided that the object is a "
"UIA control, pass in the property ID you wish to know as an argument to this "
"function. If the property is supported, a valid value will be returned, "
"otherwise a COM error exception will be thrown. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1193
msgid ""
"| Executable name of any object | obj.appModule.appName | appModule is the "
"attribute of any object that can be represented within an app such as "
"focused control. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1194
msgid ""
"| Path to the executable for the foreground object | api."
"getForegroundObject().appModule.appPath | Obtains the path to the executable "
"for any object. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1195
msgid ""
"| Provide information about a script in one go | scriptHandler."
"script(description, one or more gestures, category) | This is a decorator. "
"Typically you would write: @scriptHandler.script followed by the script "
"information. Gestures can be a single gesture (gesture=string) or a list "
"(gestures=[gestures]). |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1196
msgid ""
"| Assign a keyboard command to a script | @scriptHandler."
"script(gesture=keyboardCommand) | Keyboard gestures start with a \"kb:\". |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1197
msgid ""
"| Send keystrokes | gesture.send() | This is to be called from a script with "
"the desired keystroke bound to it. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1198
msgid ""
"| Handling multiple presses of a keystroke | scriptHandler."
"getLastScriptRepeatCount() | 0 means the command was pressed once. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1199
#, python-brace-format
msgid ""
"| I want to assign Control+Alt+number row to a script | @scriptHandler."
"script(gestures=[f\"kb:control+alt+{i}\" for i in range(10)]) | This uses a "
"combination of a decorator and formatted string literals (f strings) defined "
"inside a list comprehension. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1200
msgid ""
"| providing input help message | @scriptHandler."
"script(description=inputHelpMessage) | Effectively, a script's description "
"(assigned to its docstring) is treated as its input help message. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1201
msgid ""
"| Handle name changes | event_nameChange(self, obj, nextHandler) | The body "
"should consist of what should be done, ending with a call -to nextHandler() "
"function. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1202
msgid ""
"| Live region change announcements | event_liveRegionChange(self, obj, "
"nextHandler) | By default, new text will be spoken and/or brailled. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1203
msgid ""
"| Instantly transform a window into a dialog | In "
"chooseNVDAObjectOverlayClasses(self, obj, clsList): if you found the window "
"you want: clsList.insert(0, NVDAObjects.Behaviors.Dialog) | Be sure to "
"identify this window that is really a dialog. If done correctly, contents of "
"this \"dialog\" will be announced automatically. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1204
msgid ""
"| I'm working with a terminal window | Inherit from NVDAObjects.behaviors."
"Terminal | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1205
msgid ""
"| I want to add table navigation commands for an object that is not shown as "
"a table yet | Inherit from NVDAObjects.behaviors.RowWithFakeNavigation | "
"This class defines input help mode message and a base implementation for "
"table navigation commands (Control+Alt+arrows). |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1206
msgid ""
"| I need pointers for providing improved support for a Java application | "
"NVDAObjects.JAB and JABHandler module | Java Access Bridge (32-bit and 64-"
"bit) should be installed (installed in 2019.3). |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1207
msgid ""
"| Adding support for an app that has similar functionality as another app | "
"Import contents of the source app module via from appModuleName import * | "
"Commonly called \"aliasing\". |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1208
msgid ""
"| Play a tone | tones.beep(hertz, duration) | Duration in milliseconds. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1209
msgid ""
"| Play a tone on the left speaker | tones.beep(hertz, duration, "
"leftVolume=100, rightVolume=0) | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1210
msgid ""
"| Play a wave file | nvwave.playWaveFile(path) | For example, nvwave."
"playWaveFile(r\"test.wav\") |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1211
msgid ""
"| Obtain text info for a given object | obj.TextInfo | Note the uppercase \"T"
"\". |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1212
msgid ""
"| Check if keyboard echo (typed characters) is on | config.conf[\"keyboard\"]"
"[\"speakTypedCharacters\"] | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1213
msgid ""
"| turn speak command keys on without opening a settings dialog | config."
"conf[\"keyboard\"][\"speakCommandKeys\"] = True | The user should toggle "
"this on via keyboard settings dialog. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1214
msgid ""
"| Is focus mode/forms mode active | obj.treeInterceptor.passThrough | If "
"True, focus/forms mode is on while using browse mode documents. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1215
msgid ""
"| Is touchscreen support available | touchHandler.touchSupported() | If "
"true, touch support is active and available. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1216
msgid "| Get NVDA version | versionInfo.version | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1217
msgid ""
"| I wish to do something whenever configuration profiles are changed | "
"config.post_configProfileSwitch | You need to register a function to listen "
"to this action, then let this function do something when profiles are "
"changed. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1218
msgid ""
"| Let me know if this is a snapshot build | __debug__ | If yes (True), this "
"is a snapshot build, otherwise this is a release version. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1219
msgid ""
"| I need certain features in order for my code to work better | "
"hasattr(module, something) | This allows you to check for existence of a "
"feature/attribute you need, as it then allows you to support old and new "
"code paths. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1220
msgid ""
"| Windows version | winVersion.getWinVer() | This returns current Windows "
"version (Windows release name, major.minor.build, installation type "
"(workstation, server, domain controller), and service pack if any). You can "
"also compare the version returned against a specific Windows release from "
"winVersion module e.g. winVersion.getWinVer() >= winVersion.WIN81. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1221
msgid ""
"| Is 64-bit Windows | os.environ[\"PROCESSOR_ARCHITEW6432\"] in (\"AMD64\", "
"\"ARM64\") or os.path.exists(r\"C:\\Program Files (X86) | The environment "
"variable method is more reliable. Starting from 2017.4, both AMD64 or ARM64 "
"must be checked, especially when supporting Windows 10 on ARM. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1222
msgid "| Registry access | winreg module | \"_winreg\" in Python 2. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1223
msgid "| Open a website with the default web browser | os.startfile(URL) | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1224
msgid ""
"| Download headers for a file on the web | resource = urllib.urlopen(URL) | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1225
msgid "| Work with JSON data | json module | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1226
msgid ""
"| Allocate some memory somewhere | ctypes.windll.kernel32.VirtualAllocEx() | "
"The faster way to do this is winKernel.virtualAllocEx function. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1227
msgid ""
"| Send a message to another process | ctypes.windll.user32.SendMessageW() | "
"The shorter way is winUser.sendMessage() function. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1228
msgid ""
"| Current time in seconds | time.time() | This returns seconds elapsed from "
"January 1, 1970 at midnight. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1229
msgid ""
"| Create a message box | gui.messageBox | A thin wrapper around wx."
"MessageBox class. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1230
msgid "| Create a custom dialog | wx.Dialog | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1231
msgid ""
"| Run multiple background tasks at once | threading.Thread | In reality, due "
"to internal issues, Python will run one thread after another. This approach "
"is useful if you want to run a background task while making NVDA remain "
"responsive. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1232
msgid "| Run something periodically | wx.PyTimer or threading.Timer | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1233
msgid ""
"| Tally occurrence of text in a document | collections.Counter | Be sure to "
"have a list of words from a text file before running a tally on it. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1234
msgid ""
"| Create a dynamic array | list object | Python's list object ([]) is a "
"dynamic array. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1235
msgid ""
"| Work with associative arrays | dict object | Python's dictionary ({}) "
"object is another name for associative array, sometimes called a map. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1236
msgid ""
"| Open, parse, and save config files | config module or configobj module | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1237
msgid ""
"| I wish to make my code run faster and error-free | DO NOT DO IT UNLESS YOU "
"REALLY NEED TO! | To paraphrase a quote from a famous programmer, \"don't "
"optimize unless you want to go through headaches\". |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1238
msgid ""
"| I want to release version 1.0 of my code with everything included | NEVER "
"DO THAT UNLESS YOU KNOW WHY,  know WHAT YOU ARE DOING, OR SPECIFIED BY A "
"CONTRACT YOU SIGNED! | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1239
msgid ""
"| I wish to bring a feature from another screen reader to NVDA | Justify why "
"and plan accordingly | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1240
msgid ""
"| I want to contribute features of my add-on to NVDA screen reader | Send in "
"a pull request and prepare to answer questions from reviewers | Sometimes, a "
"feature or two from an add-on do land in NVDA screen reader but after going "
"through pull request review process. For more information, see NV Access's "
"contributing guidelines. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1241
msgid "### Appendix E: Python 2 versus 3"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1242
msgid ""
"The following describes notable changes between Python 2 and 3 and tips for "
"making your add-on Python 2 and 3 compatible."
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1243
msgid "| Concept or task | Python 2| Python 3 | Compatibility tips |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1244
msgid "| ------- | --------- | -------- | -------- |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1245
msgid ""
"| Print text | print text | print(text) | The latter also works on Python 2. "
"|"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1246
msgid ""
"| Default text format | ANSI | Unicode | Unicode is preferred. To do so, "
"prefix text with a \"u\". |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1247
msgid ""
"| Range | xrange | range | If you are not concerned with performance, use "
"range. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1248
msgid "| Reduce/accumulate | reduce | functools.reduce | |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1249
msgid ""
"| Map and filter returns | list | iterator | If you want maximum "
"compatibility, wrap a call to map or filter inside a list function call. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1250
msgid ""
"| Exception aliasing | exception, e | exception as e | The latter works on "
"Python 2. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1251
msgid ""
"| Relative import | import relativeModule | from . import relativeModule | "
"The latter also works on Python 2. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1252
msgid ""
"| Registry access | _winreg | winreg | For maximum compatibility, use "
"winreg, and on Python 2, import _winreg as winreg. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1253
msgid ""
"| Dictionary item/key/value iteration | dict.iteritems/iterkeys/itervalues | "
"dict.items/keys/values | In case of dict.keys, one can just iterate through "
"the dictionary itself. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1254
msgid ""
"| Strictly integer division | / | // | The former now performs regular "
"division on Python 3. |"
msgstr ""

#: ..\python_docs\NVDA-Add-on-Development-Guide.py:1255
msgid ""
"| Class definition | class someclass: content | class someclass(object): "
"content | The latter also works on Python 2. |"
msgstr ""
