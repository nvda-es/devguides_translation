# SOME DESCRIPTIVE TITLE.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-09-04 17:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ..\python_docs\Braille-framework.py:3
msgid ""
"The following draft page provides an introduction into NVDA's braille "
"framework. For more information about braille displays, read the page that "
"describes the process of [Adding Support for a Braille Display](https://"
"github.com/nvaccess/nvda/wiki/AddingSupportForABrailleDisplay)."
msgstr ""

#: ..\python_docs\Braille-framework.py:4
msgid "## Basic introduction to Modules"
msgstr ""

#: ..\python_docs\Braille-framework.py:5
msgid "NVDA\"s braille framework depends on the following modules:"
msgstr ""

#: ..\python_docs\Braille-framework.py:6
msgid ""
"* [`braille.py`](https://github.com/nvaccess/nvda/blob/master/source/braille."
"py): contains the base of NVDA\"s braille code, including the braille "
"handler as well as a base braille display driver that all braille display "
"drivers inherit from. Also, it contains classes for  regions, braille "
"buffers and braille display gestures, described in greater detail below."
msgstr ""

#: ..\python_docs\Braille-framework.py:7
msgid ""
"* [`brailleTables.py`](https://github.com/nvaccess/nvda/blob/master/source/"
"brailleTables.py): contains definitions of liblouis braille tables used "
"within NVDA."
msgstr ""

#: ..\python_docs\Braille-framework.py:8
msgid ""
"* [`brailleInput.py`](https://github.com/nvaccess/nvda/blob/master/source/"
"brailleInput.py): the code that is responsible for the processing of braille "
"input and kkey presses from braille keyboards."
msgstr ""

#: ..\python_docs\Braille-framework.py:9
msgid ""
"* [`bdDetect.py`](https://github.com/nvaccess/nvda/blob/master/source/"
"bdDetect.py): contains definitions of detection data for braille displays "
"and implements a Detector class that facilitates automatic detection of "
"braille displays over USB or Bluetooth."
msgstr ""

#: ..\python_docs\Braille-framework.py:10
msgid ""
"* [`hwIo.py`](https://github.com/nvaccess/nvda/blob/master/source/hwIo.py): "
"contains classes that streamline thread safe communication with braille "
"displays using HID, Serial or Bulk protocols."
msgstr ""

#: ..\python_docs\Braille-framework.py:11
msgid ""
"* [`hwPortUtils.py`](https://github.com/nvaccess/nvda/blob/master/source/"
"hwPortUtils.py): contains fucntions that ease detection of HID, USB or "
"Serial based hardware."
msgstr ""

#: ..\python_docs\Braille-framework.py:12
msgid "## The `braille` module"
msgstr ""

#: ..\python_docs\Braille-framework.py:13
msgid "### The `BrailleHandler` class"
msgstr ""

#: ..\python_docs\Braille-framework.py:14
msgid ""
"The `BrailleHandler` class is the playing point guard of the braille "
"framework. It receives requests from NVDA's core to control what has to be "
"shown on a braille display, thereby making use of underlying technics and "
"classes, including BrailleBuffers and BrailleRegions. When braille is "
"initialized using the initialize function, a single BrailleHandler is "
"instantiated as braille.handler. Basically, the braille handler does the "
"following:"
msgstr ""

#: ..\python_docs\Braille-framework.py:15
msgid ""
"* It keeps track of the current braille display in use and enables or "
"disables automatic detection if appropriate."
msgstr ""

#: ..\python_docs\Braille-framework.py:16
msgid ""
"* It keeps track of several braille settings, including tethering, focus "
"context presentation, cursor blinking, message timeout, braille output "
"tables, etc."
msgstr ""

#: ..\python_docs\Braille-framework.py:17
msgid ""
"* it allows interaction with displays using gestures for scrolling and "
"cursor routing"
msgstr ""

#: ..\python_docs\Braille-framework.py:18
msgid ""
"* it performs actions based on several NVDA events related to objects, "
"including when an object gains focus or becomes the navigator object."
msgstr ""

#: ..\python_docs\Braille-framework.py:19
msgid "### The `Region` and `BrailleBuffer` classes"
msgstr ""

#: ..\python_docs\Braille-framework.py:20
msgid ""
"The `Region` and `BrailleBuffer` classes are strongly related to each other. "
"A `Region` can be seen as the smallest entity within the braille framework, "
"presenting information about an NVDA object. A BrailleBuffer can be seen as "
"a box of regions that are relevant for the current focus object, navigator "
"object or review position."
msgstr ""

#: ..\python_docs\Braille-framework.py:21
msgid "There are basically three types of regions:"
msgstr ""

#: ..\python_docs\Braille-framework.py:22
msgid ""
"1. `TextRegion`: A simple region that just contains some text and isn't "
"related to an NVDA object."
msgstr ""

#: ..\python_docs\Braille-framework.py:23
msgid ""
" It can be used to show braille messages, such as those that are shown when "
"retrieving the current time or date, the current battery status or when "
"changing an NVDA setting using a gesture."
msgstr ""

#: ..\python_docs\Braille-framework.py:24
msgid ""
"2. `NVDAObjectRegion`: A region that shows information about an NVDA object, "
"such as its name (I agree), its role (checkbox or chk) and states (not "
"checked or ⣏⣀⣹)."
msgstr ""

#: ..\python_docs\Braille-framework.py:25
msgid ""
" Note that NVDAObjectRegions *do not** show the text within an edit control, "
"such as a text editor."
msgstr ""

#: ..\python_docs\Braille-framework.py:26
msgid ""
"3. `TextInfoRegion`: These regions contain the content of TextInfo objects. "
"The position of the review cursor within screen review, the text shown at "
"the caret in a text editor or the currently selected line within NVDA\"s "
"browse mode are all shown using a TextInfoRegion or one of its subclasses."
msgstr ""

#: ..\python_docs\Braille-framework.py:27
msgid ""
"A `BrailleBuffer` is responsible for chaining several `Region` instances "
"together. When viewing an object that has been selected using object "
"navigation, the buffer usually contains one or two objects;; one "
"NVDAObjetRegion for the object's properties and an optional TextInfoRegion "
"to show the text within the object when it is a text control. When showing a "
"focused object however, the buffer may also contain several objects that "
"form the so called focus ancestry of an object."
msgstr ""

#: ..\python_docs\Braille-framework.py:28
msgid "The structure of a buffer is probably best described using an example."
msgstr ""

#: ..\python_docs\Braille-framework.py:29
msgid ""
"1. Using the NVDA menu, go to `Preferences` > `Settings` and select the "
"`Speech` category. Alternatively, you can press control+NVDA+v to open this "
"category within the settings dialog."
msgstr ""

#: ..\python_docs\Braille-framework.py:30
msgid ""
"2. Focus the synthesizer edit control that contains the name of the current "
"synthesizer."
msgstr ""

#: ..\python_docs\Braille-framework.py:31
msgid "3. In this particular case, the braille buffer contains 4 regions:"
msgstr ""

#: ..\python_docs\Braille-framework.py:32
msgid ""
" 1. An NVDAObjectRegion for the dialog, represented by the text \"'NVDA: "
"Speech (normal configuration) dlg\""
msgstr ""

#: ..\python_docs\Braille-framework.py:33
msgid ""
" 2. An NVDAObjectRegion for the synthesizer grouping, represented by the "
"text \"'Synthesizer grp Alt+s\""
msgstr ""

#: ..\python_docs\Braille-framework.py:34
msgid ""
"3. An NVDAObjectRegion for the synthesizer text control, represented by the "
"text \"Synthesizer ro mln edt Alt+s\""
msgstr ""

#: ..\python_docs\Braille-framework.py:35
msgid ""
"4. A TextInfoRegion for the contents of the synthesizer text control, which "
"contains the text \"Windows OneCore voices\""
msgstr ""

#: ..\python_docs\Braille-framework.py:36
msgid ""
" These regions or parts of the buffer form the raw text of the buffer: "
"'NVDA: Speech (normal configuration) dlg Synthesizer grp Alt+s Synthesizer "
"ro mln edt Alt+s Windows OneCore voices"
msgstr ""

#: ..\python_docs\Braille-framework.py:37
msgid ""
"Note that this buffer is almost 200 characters in size and in braille "
"characters, this might be even more, depending on your current braille table "
"of use. However, a braille display may have only 40 braille cells. This is "
"where NVDA makes a distiction between a braille buffer or a braille window. "
"The braille window is the part of the buffer that is currently visible on "
"your braille display. As you may expect, the braille window has a maximum "
"size of the length of the current braille display. In the case that the "
"braille window contains less characters, the braille display is padded up "
"with spaces. You can change your position in a buffer with the scroll "
"buttons on a braille display, in which case the position of the braille "
"window is changed, effectively changing what is currently visible on your "
"braille display."
msgstr ""
